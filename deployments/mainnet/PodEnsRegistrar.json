{
  "address": "0x6a0d1d55CBCc107D4665e05346f5BE4dDE4C3A80",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "ensAddr",
          "type": "address"
        },
        {
          "internalType": "contract Resolver",
          "name": "resolverAddr",
          "type": "address"
        },
        {
          "internalType": "contract ReverseRegistrar",
          "name": "_reverseRegistrar",
          "type": "address"
        },
        {
          "internalType": "contract IControllerRegistry",
          "name": "controllerRegistryAddr",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "contract IInviteToken",
          "name": "inviteTokenAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "input",
          "type": "address"
        }
      ],
      "name": "addressToNode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        }
      ],
      "name": "getEnsNode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRootNode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "podSafe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "podCreator",
          "type": "address"
        }
      ],
      "name": "registerPod",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract Resolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reverseRegistrar",
      "outputs": [
        {
          "internalType": "contract ReverseRegistrar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "setAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_state",
          "type": "uint256"
        }
      ],
      "name": "setRestrictionState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "setText",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum PodEnsRegistrar.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xad710fd176e8aff54c9ca25e13fbfeea699572d51cfbc1572fbbfe5a436b1594",
  "receipt": {
    "to": null,
    "from": "0x2149A222feD42fefc3A120B3DdA34482190fC666",
    "contractAddress": "0x6a0d1d55CBCc107D4665e05346f5BE4dDE4C3A80",
    "transactionIndex": 26,
    "gasUsed": "1246779",
    "logsBloom": "0x
    "blockHash": "0xfaec4427df7ad7bf127c33c2093a6d51eb8f82b4a006ebcaf6a8e2786d6ff5bc",
    "transactionHash": "0xad710fd176e8aff54c9ca25e13fbfeea699572d51cfbc1572fbbfe5a436b1594",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 15122616,
        "transactionHash": "0xad710fd176e8aff54c9ca25e13fbfeea699572d51cfbc1572fbbfe5a436b1594",
        "address": "0x6a0d1d55CBCc107D4665e05346f5BE4dDE4C3A80",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002149a222fed42fefc3a120b3dda34482190fc666"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0xfaec4427df7ad7bf127c33c2093a6d51eb8f82b4a006ebcaf6a8e2786d6ff5bc"
      }
    ],
    "blockNumber": 15122616,
    "cumulativeGasUsed": "2253803",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    "0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41",
    "0x084b1c3C81545d370f3634392De611CaaBFf8148",
    "0x0d97643EE1051B523E4e3b66Df3640bBA6C0F79f",
    "0x9002824fab8a467e84d5596c10c335823a3a50c2dc35b8ff0a9fcc0557a72776",
    "0x872EdeaD0c56930777A82978d4D7deAE3A2d1539"
  ],
  "solcInputHash": "9633e82b06ab97dc1c9bb33222fb03ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"ensAddr\",\"type\":\"address\"},{\"internalType\":\"contract Resolver\",\"name\":\"resolverAddr\",\"type\":\"address\"},{\"internalType\":\"contract ReverseRegistrar\",\"name\":\"_reverseRegistrar\",\"type\":\"address\"},{\"internalType\":\"contract IControllerRegistry\",\"name\":\"controllerRegistryAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"contract IInviteToken\",\"name\":\"inviteTokenAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"}],\"name\":\"addressToNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"getEnsNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRootNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"podSafe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"podCreator\",\"type\":\"address\"}],\"name\":\"registerPod\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract Resolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reverseRegistrar\",\"outputs\":[{\"internalType\":\"contract ReverseRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_state\",\"type\":\"uint256\"}],\"name\":\"setRestrictionState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum PodEnsRegistrar.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addressToNode(address)\":{\"params\":{\"input\":\"- an ENS registered address\"}},\"constructor\":{\"params\":{\"ensAddr\":\"The address of the ENS registry.\",\"node\":\"The node that this registrar administers.\"}},\"getEnsNode(bytes32)\":{\"params\":{\"label\":\"- label hash of pod name (i.e., labelhash('mypod'))\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"register(bytes32,address)\":{\"params\":{\"label\":\"The hash of the label to register.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setText(bytes32,string,string)\":{\"params\":{\"node\":\"- the node hash of an ENS name\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addressToNode(address)\":{\"notice\":\"Returns the reverse registrar node of a given address, e.g., the node of mypod.addr.reverse.\"},\"constructor\":{\"notice\":\"Constructor.\"},\"getEnsNode(bytes32)\":{\"notice\":\"Generates a node hash from the Registrar's root node + the label hash.\"},\"register(bytes32,address)\":{\"notice\":\"Register a name, or change the owner of an existing registration.\"}},\"notice\":\"A registrar that allocates subdomains to the first person to claim them.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ens/PodEnsRegistrar.sol\":\"PodEnsRegistrar\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363537353539383539383035\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/ens/PodEnsRegistrar.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\nimport \\\"lib/ens-contracts/contracts/registry/ENS.sol\\\";\\nimport \\\"lib/ens-contracts/contracts/registry/ReverseRegistrar.sol\\\";\\nimport \\\"lib/ens-contracts/contracts/resolvers/Resolver.sol\\\";\\nimport \\\"../interfaces/IControllerRegistry.sol\\\";\\nimport \\\"../interfaces/IInviteToken.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * A registrar that allocates subdomains to the first person to claim them.\\n */\\ncontract PodEnsRegistrar is Ownable {\\n    modifier onlyControllerOrOwner() {\\n        require(\\n            controllerRegistry.isRegistered(msg.sender) ||\\n                owner() == msg.sender,\\n            \\\"sender must be controller/owner\\\"\\n        );\\n        _;\\n    }\\n\\n    enum State {\\n        onlySafeWithShip, // Only safes with SHIP token\\n        onlyShip, // Anyone with SHIP token\\n        open, // Anyone can enroll\\n        closed // Nobody can enroll, just in case\\n    }\\n\\n    ENS public ens;\\n    Resolver public resolver;\\n    ReverseRegistrar public reverseRegistrar;\\n    IControllerRegistry controllerRegistry;\\n    bytes32 rootNode;\\n    IInviteToken inviteToken;\\n    State public state = State.onlySafeWithShip;\\n\\n    /**\\n     * Constructor.\\n     * @param ensAddr The address of the ENS registry.\\n     * @param node The node that this registrar administers.\\n     */\\n    constructor(\\n        ENS ensAddr,\\n        Resolver resolverAddr,\\n        ReverseRegistrar _reverseRegistrar,\\n        IControllerRegistry controllerRegistryAddr,\\n        bytes32 node,\\n        IInviteToken inviteTokenAddr\\n    ) {\\n        require(address(ensAddr) != address(0), \\\"Invalid address\\\");\\n        require(address(resolverAddr) != address(0), \\\"Invalid address\\\");\\n        require(address(_reverseRegistrar) != address(0), \\\"Invalid address\\\");\\n        require(\\n            address(controllerRegistryAddr) != address(0),\\n            \\\"Invalid address\\\"\\n        );\\n        require(node != bytes32(0), \\\"Invalid node\\\");\\n        require(address(inviteTokenAddr) != address(0), \\\"Invalid address\\\");\\n\\n        ens = ensAddr;\\n        resolver = resolverAddr;\\n        controllerRegistry = controllerRegistryAddr;\\n        rootNode = node;\\n        reverseRegistrar = _reverseRegistrar;\\n        inviteToken = inviteTokenAddr;\\n    }\\n\\n    function registerPod(\\n        bytes32 label,\\n        address podSafe,\\n        address podCreator\\n    ) public returns (address) {\\n        if (state == State.closed) {\\n            revert(\\\"registrations are closed\\\");\\n        }\\n\\n        if (state == State.onlySafeWithShip) {\\n            // This implicitly prevents safes that were created in this transaction\\n            // from registering, as they cannot have a SHIP token balance.\\n            require(\\n                inviteToken.balanceOf(podSafe) > 0,\\n                \\\"safe must have SHIP token\\\"\\n            );\\n            inviteToken.burn(podSafe, 1);\\n        }\\n        if (state == State.onlyShip) {\\n            // Prefer the safe's token over the user's\\n            if (inviteToken.balanceOf(podSafe) > 0) {\\n                inviteToken.burn(podSafe, 1);\\n            } else if (inviteToken.balanceOf(podCreator) > 0) {\\n                inviteToken.burn(podCreator, 1);\\n            } else {\\n                revert(\\\"sender or safe must have SHIP\\\");\\n            }\\n        }\\n\\n        bytes32 node = keccak256(abi.encodePacked(rootNode, label));\\n\\n        require(\\n            controllerRegistry.isRegistered(msg.sender),\\n            \\\"controller not registered\\\"\\n        );\\n\\n        require(ens.owner(node) == address(0), \\\"label is already owned\\\");\\n\\n        _register(label, address(this));\\n\\n        resolver.setAddr(node, podSafe);\\n\\n        return address(reverseRegistrar);\\n    }\\n\\n    function getRootNode() public view returns (bytes32) {\\n        return rootNode;\\n    }\\n\\n    /**\\n     * Generates a node hash from the Registrar's root node + the label hash.\\n     * @param label - label hash of pod name (i.e., labelhash('mypod'))\\n     */\\n    function getEnsNode(bytes32 label) public view returns (bytes32) {\\n        return keccak256(abi.encodePacked(getRootNode(), label));\\n    }\\n\\n    /**\\n     * Returns the reverse registrar node of a given address,\\n     * e.g., the node of mypod.addr.reverse.\\n     * @param input - an ENS registered address\\n     */\\n    function addressToNode(address input) public returns (bytes32) {\\n        return reverseRegistrar.node(input);\\n    }\\n\\n    /**\\n     * Register a name, or change the owner of an existing registration.\\n     * @param label The hash of the label to register.\\n     */\\n    function register(bytes32 label, address owner)\\n        public\\n        onlyControllerOrOwner\\n    {\\n        _register(label, owner);\\n    }\\n\\n    /**\\n     * Register a name, or change the owner of an existing registration.\\n     * @param label The hash of the label to register.\\n     */\\n    function _register(bytes32 label, address owner) internal {\\n        ens.setSubnodeRecord(rootNode, label, owner, address(resolver), 0);\\n    }\\n\\n    /**\\n     * @param node - the node hash of an ENS name\\n     */\\n    function setText(\\n        bytes32 node,\\n        string memory key,\\n        string memory value\\n    ) public onlyControllerOrOwner {\\n        resolver.setText(node, key, value);\\n    }\\n\\n    function setAddr(bytes32 node, address newAddress)\\n        public\\n        onlyControllerOrOwner\\n    {\\n        resolver.setAddr(node, newAddress);\\n    }\\n\\n    function setRestrictionState(uint256 _state) external onlyOwner {\\n        state = State(_state);\\n    }\\n}\\n\",\"keccak256\":\"0xca5c53613d42c85992d893de5f6197921f6eae3c0bad873a2a88b14209897107\"},\"contracts/interfaces/IControllerRegistry.sol\":{\"content\":\"pragma solidity ^0.8.7;\\n\\n\\ninterface IControllerRegistry{\\n\\n    /**\\n     * @param _controller Address to check if registered as a controller\\n     * @return Boolean representing if the address is a registered as a controller\\n     */\\n    function isRegistered(address _controller) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x040c34638ad2095660cb546d9821c52ac020372fedc9067ffc59e47fc3523924\"},\"contracts/interfaces/IInviteToken.sol\":{\"content\":\"pragma solidity ^0.8.7;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IInviteToken is IERC20 {\\n    function batchMint(address[] calldata accounts, uint256 amount) external;\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa236fad716a9894f7e5fdafe658b30d5f6393cc441b2a1c63c20d56f7fa5b7ce\"},\"lib/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xf79be82c1a2eb0a77fba4e0972221912e803309081ca460fd2cf61653e55758a\"},\"lib/ens-contracts/contracts/registry/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(address owner, address resolver)\\n        external\\n        returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd6ba83973ffbab31dec17a716af3bb5703844d16dceb5078583fb2c509f8bcc2\"},\"lib/ens-contracts/contracts/registry/ReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./ENS.sol\\\";\\nimport \\\"./IReverseRegistrar.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport \\\"../root/Controllable.sol\\\";\\n\\nabstract contract NameResolver {\\n    function setName(bytes32 node, string memory name) public virtual;\\n}\\n\\nbytes32 constant lookup = 0x3031323334353637383961626364656600000000000000000000000000000000;\\n\\nbytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n// namehash('addr.reverse')\\n\\ncontract ReverseRegistrar is Ownable, Controllable, IReverseRegistrar {\\n    ENS public immutable ens;\\n    NameResolver public defaultResolver;\\n\\n    event ReverseClaimed(address indexed addr, bytes32 indexed node);\\n\\n    /**\\n     * @dev Constructor\\n     * @param ensAddr The address of the ENS registry.\\n     */\\n    constructor(ENS ensAddr) {\\n        ens = ensAddr;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(\\n            ensAddr.owner(ADDR_REVERSE_NODE)\\n        );\\n        if (address(oldRegistrar) != address(0x0)) {\\n            oldRegistrar.claim(msg.sender);\\n        }\\n    }\\n\\n    modifier authorised(address addr) {\\n        require(\\n            addr == msg.sender ||\\n                controllers[msg.sender] ||\\n                ens.isApprovedForAll(addr, msg.sender) ||\\n                ownsContract(addr),\\n            \\\"ReverseRegistrar: Caller is not a controller or authorised by address or the address itself\\\"\\n        );\\n        _;\\n    }\\n\\n    function setDefaultResolver(address resolver) public override onlyOwner {\\n        require(\\n            address(resolver) != address(0),\\n            \\\"ReverseRegistrar: Resolver address must not be 0\\\"\\n        );\\n        defaultResolver = NameResolver(resolver);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claim(address owner) public override returns (bytes32) {\\n        return claimForAddr(msg.sender, owner, address(defaultResolver));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param addr The reverse record to set\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) public override authorised(addr) returns (bytes32) {\\n        bytes32 labelHash = sha3HexAddress(addr);\\n        bytes32 reverseNode = keccak256(\\n            abi.encodePacked(ADDR_REVERSE_NODE, labelHash)\\n        );\\n        emit ReverseClaimed(addr, reverseNode);\\n        ens.setSubnodeRecord(ADDR_REVERSE_NODE, labelHash, owner, resolver, 0);\\n        return reverseNode;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimWithResolver(address owner, address resolver)\\n        public\\n        override\\n        returns (bytes32)\\n    {\\n        return claimForAddr(msg.sender, owner, resolver);\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the calling account. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setName(string memory name) public override returns (bytes32) {\\n        return\\n            setNameForAddr(\\n                msg.sender,\\n                msg.sender,\\n                address(defaultResolver),\\n                name\\n            );\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the account provided. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * Only callable by controllers and authorised users\\n     * @param addr The reverse record to set\\n     * @param owner The owner of the reverse node\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) public override returns (bytes32) {\\n        bytes32 node = claimForAddr(addr, owner, resolver);\\n        NameResolver(resolver).setName(node, name);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Returns the node hash for a given account's reverse records.\\n     * @param addr The address to hash\\n     * @return The ENS node hash.\\n     */\\n    function node(address addr) public pure override returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr))\\n            );\\n    }\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n        assembly {\\n            for {\\n                let i := 40\\n            } gt(i, 0) {\\n\\n            } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n\\n    function ownsContract(address addr) internal view returns (bool) {\\n        try Ownable(addr).owner() returns (address owner) {\\n            return owner == msg.sender;\\n        } catch {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xee1b81673ada526eac74312ba72bbde6140e07b49434e800e3fb1110eeb8a7d4\"},\"lib/ens-contracts/contracts/resolvers/Resolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./profiles/IABIResolver.sol\\\";\\nimport \\\"./profiles/IAddressResolver.sol\\\";\\nimport \\\"./profiles/IAddrResolver.sol\\\";\\nimport \\\"./profiles/IContentHashResolver.sol\\\";\\nimport \\\"./profiles/IDNSRecordResolver.sol\\\";\\nimport \\\"./profiles/IDNSZoneResolver.sol\\\";\\nimport \\\"./profiles/IInterfaceResolver.sol\\\";\\nimport \\\"./profiles/INameResolver.sol\\\";\\nimport \\\"./profiles/IPubkeyResolver.sol\\\";\\nimport \\\"./profiles/ITextResolver.sol\\\";\\nimport \\\"./profiles/IExtendedResolver.sol\\\";\\n\\n/**\\n * A generic resolver interface which includes all the functions including the ones deprecated\\n */\\ninterface Resolver is\\n    IERC165,\\n    IABIResolver,\\n    IAddressResolver,\\n    IAddrResolver,\\n    IContentHashResolver,\\n    IDNSRecordResolver,\\n    IDNSZoneResolver,\\n    IInterfaceResolver,\\n    INameResolver,\\n    IPubkeyResolver,\\n    ITextResolver,\\n    IExtendedResolver\\n{\\n    /* Deprecated events */\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n\\n    function setABI(\\n        bytes32 node,\\n        uint256 contentType,\\n        bytes calldata data\\n    ) external;\\n\\n    function setAddr(bytes32 node, address addr) external;\\n\\n    function setAddr(\\n        bytes32 node,\\n        uint256 coinType,\\n        bytes calldata a\\n    ) external;\\n\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\n\\n    function setDnsrr(bytes32 node, bytes calldata data) external;\\n\\n    function setName(bytes32 node, string calldata _name) external;\\n\\n    function setPubkey(\\n        bytes32 node,\\n        bytes32 x,\\n        bytes32 y\\n    ) external;\\n\\n    function setText(\\n        bytes32 node,\\n        string calldata key,\\n        string calldata value\\n    ) external;\\n\\n    function setInterface(\\n        bytes32 node,\\n        bytes4 interfaceID,\\n        address implementer\\n    ) external;\\n\\n    function multicall(bytes[] calldata data)\\n        external\\n        returns (bytes[] memory results);\\n\\n    /* Deprecated functions */\\n    function content(bytes32 node) external view returns (bytes32);\\n\\n    function multihash(bytes32 node) external view returns (bytes memory);\\n\\n    function setContent(bytes32 node, bytes32 hash) external;\\n\\n    function setMultihash(bytes32 node, bytes calldata hash) external;\\n}\\n\",\"keccak256\":\"0x52333f81a618c966f2983d23111f3fb7061ebaa0493e896b9868208dde06ffdf\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract ResolverBase is ERC165 {\\n    function isAuthorised(bytes32 node) internal virtual view returns(bool);\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node));\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xda95c503bb8d3ad8ebd5c77eac75487d732858c84678eda57e30c72e63d216bf\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./IABIResolver.sol\\\";\\nimport \\\"../ResolverBase.sol\\\";\\n\\ninterface IABIResolver {\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0x37d037dd1cb59d7406ccd07d69e7206470c0aa3331c0efb92001769389bf4f2d\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(bytes32 indexed node, uint coinType, bytes newAddress);\\n\\n    function addr(bytes32 node, uint coinType) external view returns(bytes memory);\\n}\\n\",\"keccak256\":\"0x20717682fa28eb1755a3b6ade738c8e0239c1cc393579058d4c3ffaca238c04b\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xd95cd77684ba5752c428d7dceb4ecc6506ac94f4fbb910489637eb68dcd8e366\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n    event DNSRecordChanged(bytes32 indexed node, bytes name, uint16 resource, bytes record);\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n    // DNSZoneCleared is emitted whenever a given node's zone information is cleared.\\n    event DNSZoneCleared(bytes32 indexed node);\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(bytes32 node, bytes32 name, uint16 resource) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x640992fd5ad915a67712e2343ea0b8c5c0b88ea2646ff6bb713d448bef6ebfb5\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n    event DNSZonehashChanged(bytes32 indexed node, bytes lastzonehash, bytes zonehash);\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x3b3ca51ab4dcc4eee417bf1ffa54e10d9cf6a30d8f0e3722915965b06355ecb4\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n    function resolve(bytes memory name, bytes memory data)\\n        external\\n        view\\n        returns (bytes memory, address);\\n}\\n\",\"keccak256\":\"0x0a586a1725cdc5f90f2e302c620a4a033adfc87e49bbcc5a43604ba579bce7a7\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IInterfaceResolver {\\n    event InterfaceChanged(bytes32 indexed node, bytes4 indexed interfaceID, address implementer);\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The ENS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc2673ebfb678b4c2730bff0434daf3a974d9ee0696c4adf533b41802f291745d\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IPubkeyResolver {\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x69748947093dd2fda9ddcebd0adf19a6d1e7600df1d4b1462a0417156caddca7\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(bytes32 node, string calldata key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x36a6602f2d76f373c5e1dcded0c87e1d3ab5180dbbbea7aa2a8d0e9a36273e38\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0x6b3f2e56e5ad1f72b32a0bd4edbfabe0c14160df307b2bb4a64e3af99623dc96\"},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x9ceac6c134cbbeac2d7c1e004f633bf1fefbb153038fe14528f333d0b274ec19\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526006805460ff60a01b191690553480156200001e57600080fd5b50604051620015ea380380620015ea8339810160408190526200004191620002b7565b6200004c3362000267565b6001600160a01b0386166200009a5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b60448201526064015b60405180910390fd5b6001600160a01b038516620000e45760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640162000091565b6001600160a01b0384166200012e5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640162000091565b6001600160a01b038316620001785760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640162000091565b81620001b65760405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964206e6f646560a01b604482015260640162000091565b6001600160a01b038116620002005760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640162000091565b600180546001600160a01b03199081166001600160a01b039889161790915560028054821696881696909617909555600480548616938716939093179092556005556003805484169285169290921790915560068054909216921691909117905562000358565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060008060008060c08789031215620002d157600080fd5b8651620002de816200033f565b6020880151909650620002f1816200033f565b604088015190955062000304816200033f565b606088015190945062000317816200033f565b608088015160a0890151919450925062000331816200033f565b809150509295509295509295565b6001600160a01b03811681146200035557600080fd5b50565b61128280620003686000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063cfeac6a511610066578063cfeac6a5146101ee578063d22057a914610201578063d5fa2b0014610214578063f2fde38b1461022757600080fd5b80638da5cb5b1461019657806398eed3e9146101a7578063b9efd9b5146101ba578063c19d93fb146101cd57600080fd5b806338d1fcc3116100d357806338d1fcc3146101605780633f15457f14610168578063715018a61461017b578063808698531461018357600080fd5b806304f3bcec146100fa57806310f13a8c1461012a578063137a3f601461013f575b600080fd5b60025461010d906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61013d6101383660046110f4565b61023a565b005b61015261014d366004610fed565b6103af565b604051908152602001610121565b600554610152565b60015461010d906001600160a01b031681565b61013d61044c565b60035461010d906001600160a01b031681565b6000546001600160a01b031661010d565b61010d6101b53660046110b2565b610460565b61013d6101c8366004611050565b610ab4565b6006546101e190600160a01b900460ff1681565b60405161012191906111e3565b6101526101fc366004611050565b610b13565b61013d61020f366004611082565b610b4f565b61013d610222366004611082565b610c49565b61013d610235366004610fed565b610d9f565b6004805460405163c3c5a54760e01b815233928101929092526001600160a01b03169063c3c5a5479060240160206040518083038186803b15801561027e57600080fd5b505afa158015610292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b6919061102e565b806102da5750336102cf6000546001600160a01b031690565b6001600160a01b0316145b61032b5760405162461bcd60e51b815260206004820152601f60248201527f73656e646572206d75737420626520636f6e74726f6c6c65722f6f776e65720060448201526064015b60405180910390fd5b6002546040517f10f13a8c0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906310f13a8c90610378908690869086906004016111ae565b600060405180830381600087803b15801561039257600080fd5b505af11580156103a6573d6000803e3d6000fd5b50505050505050565b6003546040517fbffbe61c0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152600092169063bffbe61c9060240160206040518083038186803b15801561040e57600080fd5b505afa158015610422573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104469190611069565b92915050565b610454610e2f565b61045e6000610e89565b565b60006003600654600160a01b900460ff1660038111156104825761048261120b565b14156104d05760405162461bcd60e51b815260206004820152601860248201527f726567697374726174696f6e732061726520636c6f73656400000000000000006044820152606401610322565b6000600654600160a01b900460ff1660038111156104f0576104f061120b565b1415610628576006546040516370a0823160e01b81526001600160a01b03858116600483015260009216906370a082319060240160206040518083038186803b15801561053c57600080fd5b505afa158015610550573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105749190611069565b116105c15760405162461bcd60e51b815260206004820152601960248201527f73616665206d7573742068617665205348495020746f6b656e000000000000006044820152606401610322565b600654604051632770a7eb60e21b81526001600160a01b0385811660048301526001602483015290911690639dc29fac90604401600060405180830381600087803b15801561060f57600080fd5b505af1158015610623573d6000803e3d6000fd5b505050505b6001600654600160a01b900460ff1660038111156106485761064861120b565b1415610843576006546040516370a0823160e01b81526001600160a01b03858116600483015260009216906370a082319060240160206040518083038186803b15801561069457600080fd5b505afa1580156106a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cc9190611069565b111561073e57600654604051632770a7eb60e21b81526001600160a01b0385811660048301526001602483015290911690639dc29fac906044015b600060405180830381600087803b15801561072157600080fd5b505af1158015610735573d6000803e3d6000fd5b50505050610843565b6006546040516370a0823160e01b81526001600160a01b03848116600483015260009216906370a082319060240160206040518083038186803b15801561078457600080fd5b505afa158015610798573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bc9190611069565b11156107fb57600654604051632770a7eb60e21b81526001600160a01b0384811660048301526001602483015290911690639dc29fac90604401610707565b60405162461bcd60e51b815260206004820152601d60248201527f73656e646572206f722073616665206d757374206861766520534849500000006044820152606401610322565b600060055485604051602001610863929190918252602082015260400190565b60408051808303601f190181529082905280516020909101206004805463c3c5a54760e01b845233918401919091529092506001600160a01b03169063c3c5a5479060240160206040518083038186803b1580156108c057600080fd5b505afa1580156108d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f8919061102e565b6109445760405162461bcd60e51b815260206004820152601960248201527f636f6e74726f6c6c6572206e6f742072656769737465726564000000000000006044820152606401610322565b6001546040517f02571be3000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b0316906302571be39060240160206040518083038186803b1580156109a257600080fd5b505afa1580156109b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109da9190611011565b6001600160a01b031614610a305760405162461bcd60e51b815260206004820152601660248201527f6c6162656c20697320616c7265616479206f776e6564000000000000000000006044820152606401610322565b610a3a8530610ef1565b60025460405162d5fa2b60e81b8152600481018390526001600160a01b0386811660248301529091169063d5fa2b0090604401600060405180830381600087803b158015610a8757600080fd5b505af1158015610a9b573d6000803e3d6000fd5b50506003546001600160a01b0316979650505050505050565b610abc610e2f565b806003811115610ace57610ace61120b565b600680547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b836003811115610b0b57610b0b61120b565b021790555050565b6000610b1e60055490565b6040805160208101929092528101839052606001604051602081830303815290604052805190602001209050919050565b6004805460405163c3c5a54760e01b815233928101929092526001600160a01b03169063c3c5a5479060240160206040518083038186803b158015610b9357600080fd5b505afa158015610ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcb919061102e565b80610bef575033610be46000546001600160a01b031690565b6001600160a01b0316145b610c3b5760405162461bcd60e51b815260206004820152601f60248201527f73656e646572206d75737420626520636f6e74726f6c6c65722f6f776e6572006044820152606401610322565b610c458282610ef1565b5050565b6004805460405163c3c5a54760e01b815233928101929092526001600160a01b03169063c3c5a5479060240160206040518083038186803b158015610c8d57600080fd5b505afa158015610ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc5919061102e565b80610ce9575033610cde6000546001600160a01b031690565b6001600160a01b0316145b610d355760405162461bcd60e51b815260206004820152601f60248201527f73656e646572206d75737420626520636f6e74726f6c6c65722f6f776e6572006044820152606401610322565b60025460405162d5fa2b60e81b8152600481018490526001600160a01b0383811660248301529091169063d5fa2b00906044015b600060405180830381600087803b158015610d8357600080fd5b505af1158015610d97573d6000803e3d6000fd5b505050505050565b610da7610e2f565b6001600160a01b038116610e235760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610322565b610e2c81610e89565b50565b6000546001600160a01b0316331461045e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610322565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001546005546002546040517f5ef2c7f00000000000000000000000000000000000000000000000000000000081526004810192909252602482018590526001600160a01b03848116604484015290811660648301526000608483015290911690635ef2c7f09060a401610d69565b600082601f830112610f7157600080fd5b813567ffffffffffffffff80821115610f8c57610f8c611221565b604051601f8301601f19908116603f01168101908282118183101715610fb457610fb4611221565b81604052838152866020858801011115610fcd57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610fff57600080fd5b813561100a81611237565b9392505050565b60006020828403121561102357600080fd5b815161100a81611237565b60006020828403121561104057600080fd5b8151801515811461100a57600080fd5b60006020828403121561106257600080fd5b5035919050565b60006020828403121561107b57600080fd5b5051919050565b6000806040838503121561109557600080fd5b8235915060208301356110a781611237565b809150509250929050565b6000806000606084860312156110c757600080fd5b8335925060208401356110d981611237565b915060408401356110e981611237565b809150509250925092565b60008060006060848603121561110957600080fd5b83359250602084013567ffffffffffffffff8082111561112857600080fd5b61113487838801610f60565b9350604086013591508082111561114a57600080fd5b5061115786828701610f60565b9150509250925092565b6000815180845260005b818110156111875760208185018101518683018201520161116b565b81811115611199576000602083870101525b50601f01601f19169290920160200192915050565b8381526060602082015260006111c76060830185611161565b82810360408401526111d98185611161565b9695505050505050565b602081016004831061120557634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e2c57600080fdfea264697066735822122072b3e008c89351d1fe0d364e526c45be43df346cf846d6eb9a1d5cf04c8494c964736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063cfeac6a511610066578063cfeac6a5146101ee578063d22057a914610201578063d5fa2b0014610214578063f2fde38b1461022757600080fd5b80638da5cb5b1461019657806398eed3e9146101a7578063b9efd9b5146101ba578063c19d93fb146101cd57600080fd5b806338d1fcc3116100d357806338d1fcc3146101605780633f15457f14610168578063715018a61461017b578063808698531461018357600080fd5b806304f3bcec146100fa57806310f13a8c1461012a578063137a3f601461013f575b600080fd5b60025461010d906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61013d6101383660046110f4565b61023a565b005b61015261014d366004610fed565b6103af565b604051908152602001610121565b600554610152565b60015461010d906001600160a01b031681565b61013d61044c565b60035461010d906001600160a01b031681565b6000546001600160a01b031661010d565b61010d6101b53660046110b2565b610460565b61013d6101c8366004611050565b610ab4565b6006546101e190600160a01b900460ff1681565b60405161012191906111e3565b6101526101fc366004611050565b610b13565b61013d61020f366004611082565b610b4f565b61013d610222366004611082565b610c49565b61013d610235366004610fed565b610d9f565b6004805460405163c3c5a54760e01b815233928101929092526001600160a01b03169063c3c5a5479060240160206040518083038186803b15801561027e57600080fd5b505afa158015610292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b6919061102e565b806102da5750336102cf6000546001600160a01b031690565b6001600160a01b0316145b61032b5760405162461bcd60e51b815260206004820152601f60248201527f73656e646572206d75737420626520636f6e74726f6c6c65722f6f776e65720060448201526064015b60405180910390fd5b6002546040517f10f13a8c0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906310f13a8c90610378908690869086906004016111ae565b600060405180830381600087803b15801561039257600080fd5b505af11580156103a6573d6000803e3d6000fd5b50505050505050565b6003546040517fbffbe61c0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152600092169063bffbe61c9060240160206040518083038186803b15801561040e57600080fd5b505afa158015610422573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104469190611069565b92915050565b610454610e2f565b61045e6000610e89565b565b60006003600654600160a01b900460ff1660038111156104825761048261120b565b14156104d05760405162461bcd60e51b815260206004820152601860248201527f726567697374726174696f6e732061726520636c6f73656400000000000000006044820152606401610322565b6000600654600160a01b900460ff1660038111156104f0576104f061120b565b1415610628576006546040516370a0823160e01b81526001600160a01b03858116600483015260009216906370a082319060240160206040518083038186803b15801561053c57600080fd5b505afa158015610550573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105749190611069565b116105c15760405162461bcd60e51b815260206004820152601960248201527f73616665206d7573742068617665205348495020746f6b656e000000000000006044820152606401610322565b600654604051632770a7eb60e21b81526001600160a01b0385811660048301526001602483015290911690639dc29fac90604401600060405180830381600087803b15801561060f57600080fd5b505af1158015610623573d6000803e3d6000fd5b505050505b6001600654600160a01b900460ff1660038111156106485761064861120b565b1415610843576006546040516370a0823160e01b81526001600160a01b03858116600483015260009216906370a082319060240160206040518083038186803b15801561069457600080fd5b505afa1580156106a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cc9190611069565b111561073e57600654604051632770a7eb60e21b81526001600160a01b0385811660048301526001602483015290911690639dc29fac906044015b600060405180830381600087803b15801561072157600080fd5b505af1158015610735573d6000803e3d6000fd5b50505050610843565b6006546040516370a0823160e01b81526001600160a01b03848116600483015260009216906370a082319060240160206040518083038186803b15801561078457600080fd5b505afa158015610798573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bc9190611069565b11156107fb57600654604051632770a7eb60e21b81526001600160a01b0384811660048301526001602483015290911690639dc29fac90604401610707565b60405162461bcd60e51b815260206004820152601d60248201527f73656e646572206f722073616665206d757374206861766520534849500000006044820152606401610322565b600060055485604051602001610863929190918252602082015260400190565b60408051808303601f190181529082905280516020909101206004805463c3c5a54760e01b845233918401919091529092506001600160a01b03169063c3c5a5479060240160206040518083038186803b1580156108c057600080fd5b505afa1580156108d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f8919061102e565b6109445760405162461bcd60e51b815260206004820152601960248201527f636f6e74726f6c6c6572206e6f742072656769737465726564000000000000006044820152606401610322565b6001546040517f02571be3000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b0316906302571be39060240160206040518083038186803b1580156109a257600080fd5b505afa1580156109b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109da9190611011565b6001600160a01b031614610a305760405162461bcd60e51b815260206004820152601660248201527f6c6162656c20697320616c7265616479206f776e6564000000000000000000006044820152606401610322565b610a3a8530610ef1565b60025460405162d5fa2b60e81b8152600481018390526001600160a01b0386811660248301529091169063d5fa2b0090604401600060405180830381600087803b158015610a8757600080fd5b505af1158015610a9b573d6000803e3d6000fd5b50506003546001600160a01b0316979650505050505050565b610abc610e2f565b806003811115610ace57610ace61120b565b600680547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b836003811115610b0b57610b0b61120b565b021790555050565b6000610b1e60055490565b6040805160208101929092528101839052606001604051602081830303815290604052805190602001209050919050565b6004805460405163c3c5a54760e01b815233928101929092526001600160a01b03169063c3c5a5479060240160206040518083038186803b158015610b9357600080fd5b505afa158015610ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcb919061102e565b80610bef575033610be46000546001600160a01b031690565b6001600160a01b0316145b610c3b5760405162461bcd60e51b815260206004820152601f60248201527f73656e646572206d75737420626520636f6e74726f6c6c65722f6f776e6572006044820152606401610322565b610c458282610ef1565b5050565b6004805460405163c3c5a54760e01b815233928101929092526001600160a01b03169063c3c5a5479060240160206040518083038186803b158015610c8d57600080fd5b505afa158015610ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc5919061102e565b80610ce9575033610cde6000546001600160a01b031690565b6001600160a01b0316145b610d355760405162461bcd60e51b815260206004820152601f60248201527f73656e646572206d75737420626520636f6e74726f6c6c65722f6f776e6572006044820152606401610322565b60025460405162d5fa2b60e81b8152600481018490526001600160a01b0383811660248301529091169063d5fa2b00906044015b600060405180830381600087803b158015610d8357600080fd5b505af1158015610d97573d6000803e3d6000fd5b505050505050565b610da7610e2f565b6001600160a01b038116610e235760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610322565b610e2c81610e89565b50565b6000546001600160a01b0316331461045e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610322565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001546005546002546040517f5ef2c7f00000000000000000000000000000000000000000000000000000000081526004810192909252602482018590526001600160a01b03848116604484015290811660648301526000608483015290911690635ef2c7f09060a401610d69565b600082601f830112610f7157600080fd5b813567ffffffffffffffff80821115610f8c57610f8c611221565b604051601f8301601f19908116603f01168101908282118183101715610fb457610fb4611221565b81604052838152866020858801011115610fcd57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610fff57600080fd5b813561100a81611237565b9392505050565b60006020828403121561102357600080fd5b815161100a81611237565b60006020828403121561104057600080fd5b8151801515811461100a57600080fd5b60006020828403121561106257600080fd5b5035919050565b60006020828403121561107b57600080fd5b5051919050565b6000806040838503121561109557600080fd5b8235915060208301356110a781611237565b809150509250929050565b6000806000606084860312156110c757600080fd5b8335925060208401356110d981611237565b915060408401356110e981611237565b809150509250925092565b60008060006060848603121561110957600080fd5b83359250602084013567ffffffffffffffff8082111561112857600080fd5b61113487838801610f60565b9350604086013591508082111561114a57600080fd5b5061115786828701610f60565b9150509250925092565b6000815180845260005b818110156111875760208185018101518683018201520161116b565b81811115611199576000602083870101525b50601f01601f19169290920160200192915050565b8381526060602082015260006111c76060830185611161565b82810360408401526111d98185611161565b9695505050505050565b602081016004831061120557634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e2c57600080fdfea264697066735822122072b3e008c89351d1fe0d364e526c45be43df346cf846d6eb9a1d5cf04c8494c964736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addressToNode(address)": {
        "params": {
          "input": "- an ENS registered address"
        }
      },
      "constructor": {
        "params": {
          "ensAddr": "The address of the ENS registry.",
          "node": "The node that this registrar administers."
        }
      },
      "getEnsNode(bytes32)": {
        "params": {
          "label": "- label hash of pod name (i.e., labelhash('mypod'))"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "register(bytes32,address)": {
        "params": {
          "label": "The hash of the label to register."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setText(bytes32,string,string)": {
        "params": {
          "node": "- the node hash of an ENS name"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addressToNode(address)": {
        "notice": "Returns the reverse registrar node of a given address, e.g., the node of mypod.addr.reverse."
      },
      "constructor": {
        "notice": "Constructor."
      },
      "getEnsNode(bytes32)": {
        "notice": "Generates a node hash from the Registrar's root node + the label hash."
      },
      "register(bytes32,address)": {
        "notice": "Register a name, or change the owner of an existing registration."
      }
    },
    "notice": "A registrar that allocates subdomains to the first person to claim them.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5305,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3079,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "ens",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ENS)4047"
      },
      {
        "astId": 3082,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "resolver",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Resolver)4605"
      },
      {
        "astId": 3085,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "reverseRegistrar",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ReverseRegistrar)4449"
      },
      {
        "astId": 3088,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "controllerRegistry",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IControllerRegistry)3529"
      },
      {
        "astId": 3090,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "rootNode",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 3093,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "inviteToken",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IInviteToken)3740"
      },
      {
        "astId": 3098,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "state",
        "offset": 20,
        "slot": "6",
        "type": "t_enum(State)3076"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENS)4047": {
        "encoding": "inplace",
        "label": "contract ENS",
        "numberOfBytes": "20"
      },
      "t_contract(IControllerRegistry)3529": {
        "encoding": "inplace",
        "label": "contract IControllerRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IInviteToken)3740": {
        "encoding": "inplace",
        "label": "contract IInviteToken",
        "numberOfBytes": "20"
      },
      "t_contract(Resolver)4605": {
        "encoding": "inplace",
        "label": "contract Resolver",
        "numberOfBytes": "20"
      },
      "t_contract(ReverseRegistrar)4449": {
        "encoding": "inplace",
        "label": "contract ReverseRegistrar",
        "numberOfBytes": "20"
      },
      "t_enum(State)3076": {
        "encoding": "inplace",
        "label": "enum PodEnsRegistrar.State",
        "numberOfBytes": "1"
      }
    }
  }
}