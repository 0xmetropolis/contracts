{
  "address": "0x4C98aF741e352C6551BfF9509b3f8ca9Dd4E6397",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_memberToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_controllerRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_proxyFactoryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gnosisMasterAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_podEnsRegistrar",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fallbackHandlerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "podId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "safe",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "ensName",
          "type": "string"
        }
      ],
      "name": "CreatePod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "podId",
          "type": "uint256"
        }
      ],
      "name": "DeregisterPod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "podId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "UpdatePodAdmin",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ENCODED_SIG_ADD_OWNER",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ENCODED_SIG_DISABLE_MOD",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ENCODED_SIG_ENABLE_MOD",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ENCODED_SIG_REMOVE_OWNER",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ENCODED_SIG_SET_GUARD",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ENCODED_SIG_SWAP_OWNER",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUNCTION_SIG_ENABLE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUNCTION_SIG_EXEC",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUNCTION_SIG_SETUP",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "areModulesLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_podId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_mintMembers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_burnMembers",
          "type": "address[]"
        }
      ],
      "name": "batchMintAndBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "beforeTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "checkAfterExecution",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "enum Enum.Operation",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "checkTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controllerRegistry",
      "outputs": [
        {
          "internalType": "contract IControllerRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_label",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_ensString",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expectedPodId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_imageUrl",
          "type": "string"
        }
      ],
      "name": "createPod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_safe",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_label",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_ensString",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expectedPodId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_imageUrl",
          "type": "string"
        }
      ],
      "name": "createPodWithSafe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_context",
          "type": "address"
        }
      ],
      "name": "delegateSetup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "podId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "previousModule",
          "type": "address"
        }
      ],
      "name": "ejectSafe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "enableModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackHandlerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        }
      ],
      "name": "getSafeMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gnosisMasterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "isSafeMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        }
      ],
      "name": "isSafeModuleEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isTransferLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "memberToken",
      "outputs": [
        {
          "internalType": "contract IMemberToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_podId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_prevModule",
          "type": "address"
        }
      ],
      "name": "migratePodController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "podAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "podEnsRegistrar",
      "outputs": [
        {
          "internalType": "contract IPodEnsRegistrar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "podIdToSafe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "members",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "podId",
          "type": "uint256"
        }
      ],
      "name": "recoverSafe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "safeToPodId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_podId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLocked",
          "type": "bool"
        }
      ],
      "name": "setPodModuleLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_podId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isTransferLocked",
          "type": "bool"
        }
      ],
      "name": "setPodTransferLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_podId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "updatePodAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_podEnsRegistrar",
          "type": "address"
        }
      ],
      "name": "updatePodEnsRegistrar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_podId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_podAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_safeAddress",
          "type": "address"
        }
      ],
      "name": "updatePodState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5d4a0a98eaa78fa6e15fa4c21e332aa56a00ac172d096535ad1d8aa3ab4f5777",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x2149A222feD42fefc3A120B3DdA34482190fC666",
    "contractAddress": null,
    "transactionIndex": 4,
    "gasUsed": "4426290",
    "logsBloom": "0x
    "blockHash": "0x18fbe31bfd07fe1f7f43eaab25a44cd00d6862e396f85e23a6c7a311ca2bf7fb",
    "transactionHash": "0x5d4a0a98eaa78fa6e15fa4c21e332aa56a00ac172d096535ad1d8aa3ab4f5777",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 15360683,
        "transactionHash": "0x5d4a0a98eaa78fa6e15fa4c21e332aa56a00ac172d096535ad1d8aa3ab4f5777",
        "address": "0x4C98aF741e352C6551BfF9509b3f8ca9Dd4E6397",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 43,
        "blockHash": "0x18fbe31bfd07fe1f7f43eaab25a44cd00d6862e396f85e23a6c7a311ca2bf7fb"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 15360683,
        "transactionHash": "0x5d4a0a98eaa78fa6e15fa4c21e332aa56a00ac172d096535ad1d8aa3ab4f5777",
        "address": "0x4C98aF741e352C6551BfF9509b3f8ca9Dd4E6397",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000002149a222fed42fefc3a120b3dda34482190fc666"
        ],
        "data": "0x",
        "logIndex": 44,
        "blockHash": "0x18fbe31bfd07fe1f7f43eaab25a44cd00d6862e396f85e23a6c7a311ca2bf7fb"
      }
    ],
    "blockNumber": 15360683,
    "cumulativeGasUsed": "5840060",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2149A222feD42fefc3A120B3DdA34482190fC666",
    "0x0762aA185b6ed2dCA77945Ebe92De705e0C37AE3",
    "0x0d97643EE1051B523E4e3b66Df3640bBA6C0F79f",
    "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
    "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
    "0x6a0d1d55CBCc107D4665e05346f5BE4dDE4C3A80",
    "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4"
  ],
  "numDeployments": 1,
  "solcInputHash": "c1fce53a706e8c2dc5575755f0e954da",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_memberToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controllerRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxyFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gnosisMasterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_podEnsRegistrar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fallbackHandlerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"podId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"}],\"name\":\"CreatePod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"podId\",\"type\":\"uint256\"}],\"name\":\"DeregisterPod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"podId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"UpdatePodAdmin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ENCODED_SIG_ADD_OWNER\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCODED_SIG_DISABLE_MOD\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCODED_SIG_ENABLE_MOD\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCODED_SIG_REMOVE_OWNER\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCODED_SIG_SET_GUARD\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCODED_SIG_SWAP_OWNER\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNCTION_SIG_ENABLE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNCTION_SIG_EXEC\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNCTION_SIG_SETUP\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"areModulesLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_podId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_mintMembers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_burnMembers\",\"type\":\"address[]\"}],\"name\":\"batchMintAndBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"beforeTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"checkAfterExecution\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerRegistry\",\"outputs\":[{\"internalType\":\"contract IControllerRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_ensString\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expectedPodId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"}],\"name\":\"createPod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safe\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_ensString\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expectedPodId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"}],\"name\":\"createPodWithSafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_context\",\"type\":\"address\"}],\"name\":\"delegateSetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"podId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"previousModule\",\"type\":\"address\"}],\"name\":\"ejectSafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"enableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackHandlerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"}],\"name\":\"getSafeMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gnosisMasterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"isSafeMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"}],\"name\":\"isSafeModuleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isTransferLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"memberToken\",\"outputs\":[{\"internalType\":\"contract IMemberToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_podId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prevModule\",\"type\":\"address\"}],\"name\":\"migratePodController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"podAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"podEnsRegistrar\",\"outputs\":[{\"internalType\":\"contract IPodEnsRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"podIdToSafe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"podId\",\"type\":\"uint256\"}],\"name\":\"recoverSafe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"safeToPodId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_podId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLocked\",\"type\":\"bool\"}],\"name\":\"setPodModuleLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_podId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isTransferLocked\",\"type\":\"bool\"}],\"name\":\"setPodTransferLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_podId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"updatePodAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_podEnsRegistrar\",\"type\":\"address\"}],\"name\":\"updatePodEnsRegistrar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_podId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_podAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safeAddress\",\"type\":\"address\"}],\"name\":\"updatePodState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes)\":{\"params\":{\"data\":\"Passes a flag for an initial creation event\",\"from\":\"The address sending the membership token\",\"ids\":\"An array of membership token ids to be transfered\",\"operator\":\"The address that initiated the action\",\"to\":\"The address recieveing the membership token\"}},\"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)\":{\"details\":\"This will be called by the safe at execution time time _param to Destination address of Safe transaction. _param value Ether value of Safe transaction.\",\"params\":{\"data\":\"Data payload of Safe transaction. _param operation Operation type of Safe transaction. _param safeTxGas Gas that should be used for the Safe transaction. _param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund) _param gasPrice Gas price that should be used for the payment calculation. _param gasToken Token address (or 0 if ETH) that is used for the payment. _param refundReceiver Address of receiver of gas payment (or 0 if tx.origin). _param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v}) _param msgSender Account executing safe transaction\"}},\"constructor\":{\"details\":\"Will instantiate safe teller with gnosis master and proxy addresses\",\"params\":{\"_controllerRegistry\":\"The address of the ControllerRegistry contract\",\"_gnosisMasterAddress\":\"The gnosis master address\",\"_memberToken\":\"The address of the MemberToken contract\",\"_proxyFactoryAddress\":\"The proxy factory address\"}},\"createPod(address[],uint256,address,bytes32,string,uint256,string)\":{\"params\":{\"_admin\":\"The address of the pod admin\",\"_ensString\":\"string of pod ens name (i.e.'mypod.pod.xyz')\",\"_label\":\"label hash of pod name (i.e labelhash('mypod'))\",\"_members\":\"The addresses of the members of the pod\",\"threshold\":\"The number of members that are required to sign a transaction\"}},\"createPodWithSafe(address,address,bytes32,string,uint256,string)\":{\"details\":\"Used to create a pod with an existing safeWill automatically distribute membership NFTs to current safe members\",\"params\":{\"_admin\":\"The address of the pod admin\",\"_ensString\":\"string of pod ens name (i.e.'mypod.pod.xyz')\",\"_label\":\"label hash of pod name (i.e labelhash('mypod'))\",\"_safe\":\"The address of existing safe\"}},\"ejectSafe(uint256,bytes32,address)\":{\"params\":{\"label\":\"- labelhash of pod ENS name, i.e., `labelhash(\\\"mypod\\\")`\",\"podId\":\"- ID of pod being ejected\",\"previousModule\":\"- previous module\"}},\"migratePodController(uint256,address,address)\":{\"details\":\"This will nullify all pod state on this controllerUpdate state on _newControllerUpdate controller to _newController in Safe and MemberToken\",\"params\":{\"_newController\":\"The address of the new pod controller\",\"_podId\":\"The id number of the pod\",\"_prevModule\":\"The module that points to the orca module in the safe's ModuleManager linked list\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverSafe(address[],uint256,uint256)\":{\"params\":{\"members\":\"The addresses of the members of the pod as it was originally created.\",\"podId\":\"- Pod ID of safe you are trying to recreate\",\"threshold\":\"The number of members that are required to sign a transaction\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setPodModuleLock(uint256,bool)\":{\"details\":\"Allows admin to unlock the safe modules and allow them to be edited by members\",\"params\":{\"_isLocked\":\"true - pod modules cannot be added/removed\",\"_podId\":\"The id number of the pod\"}},\"setPodTransferLock(uint256,bool)\":{\"params\":{\"_isTransferLocked\":\"The address of the new pod admin\",\"_podId\":\"The id number of the pod\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePodAdmin(uint256,address)\":{\"params\":{\"_newAdmin\":\"The address of the new pod admin\",\"_podId\":\"The id number of the pod\"}},\"updatePodState(uint256,address,address)\":{\"details\":\"This is called by another version of controller to migrate a pod to this versionWill only accept calls from registered controllersCan only be called once.\",\"params\":{\"_podAdmin\":\"The address of the pod admin\",\"_podId\":\"The id number of the pod\",\"_safeAddress\":\"The address of the safe\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ejectSafe(uint256,bytes32,address)\":{\"notice\":\"Ejects a safe from the Orca ecosystem. Also handles clean up for safes that have already been ejected. Note that the reverse registry entry cannot be cleaned up if the safe has already been ejected.\"},\"recoverSafe(address[],uint256,uint256)\":{\"notice\":\"Uses CREATE2 to replicate a given safe on a new network.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ControllerV1.sol\":\"ControllerV1\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363630373636303437353134\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/ControllerV1.sol\":{\"content\":\"pragma solidity ^0.8.7;\\n\\nimport \\\"lib/ens-contracts/contracts/registry/ENS.sol\\\";\\nimport \\\"lib/ens-contracts/contracts/registry/ReverseRegistrar.sol\\\";\\nimport \\\"lib/ens-contracts/contracts/resolvers/Resolver.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\\\";\\nimport \\\"./interfaces/IControllerV1.sol\\\";\\nimport \\\"./interfaces/IMemberToken.sol\\\";\\nimport \\\"./interfaces/IControllerRegistry.sol\\\";\\nimport \\\"./SafeTeller.sol\\\";\\nimport \\\"./MemberTeller.sol\\\";\\nimport \\\"./ens/IPodEnsRegistrar.sol\\\";\\nimport {BaseGuard, Enum} from \\\"lib/safe-contracts/contracts/base/GuardManager.sol\\\";\\n\\ncontract ControllerV1 is\\n    IControllerV1,\\n    SafeTeller,\\n    MemberTeller,\\n    BaseGuard,\\n    Ownable\\n{\\n    event CreatePod(uint256 podId, address safe, address admin, string ensName);\\n    event UpdatePodAdmin(uint256 podId, address admin);\\n    event DeregisterPod(uint256 podId);\\n\\n    IControllerRegistry public immutable controllerRegistry;\\n    IPodEnsRegistrar public podEnsRegistrar;\\n\\n    string public constant VERSION = \\\"1.3.0\\\";\\n\\n    mapping(address => uint256) public safeToPodId;\\n    mapping(uint256 => address) public override podIdToSafe;\\n    mapping(uint256 => address) public podAdmin;\\n    mapping(uint256 => bool) public isTransferLocked;\\n\\n    uint8 internal constant CREATE_EVENT = 0x01;\\n\\n    /**\\n     * @dev Will instantiate safe teller with gnosis master and proxy addresses\\n     * @param _memberToken The address of the MemberToken contract\\n     * @param _controllerRegistry The address of the ControllerRegistry contract\\n     * @param _proxyFactoryAddress The proxy factory address\\n     * @param _gnosisMasterAddress The gnosis master address\\n     */\\n    constructor(\\n        address _owner,\\n        address _memberToken,\\n        address _controllerRegistry,\\n        address _proxyFactoryAddress,\\n        address _gnosisMasterAddress,\\n        address _podEnsRegistrar,\\n        address _fallbackHandlerAddress\\n    )\\n        SafeTeller(\\n            _proxyFactoryAddress,\\n            _gnosisMasterAddress,\\n            _fallbackHandlerAddress\\n        )\\n        MemberTeller(_memberToken)\\n    {\\n        require(_owner != address(0), \\\"Invalid address\\\");\\n        require(_memberToken != address(0), \\\"Invalid address\\\");\\n        require(_controllerRegistry != address(0), \\\"Invalid address\\\");\\n        require(_proxyFactoryAddress != address(0), \\\"Invalid address\\\");\\n        require(_gnosisMasterAddress != address(0), \\\"Invalid address\\\");\\n        require(_podEnsRegistrar != address(0), \\\"Invalid address\\\");\\n        require(_fallbackHandlerAddress != address(0), \\\"Invalid address\\\");\\n\\n        // Set owner separately from msg.sender.\\n        transferOwnership(_owner);\\n\\n        controllerRegistry = IControllerRegistry(_controllerRegistry);\\n        podEnsRegistrar = IPodEnsRegistrar(_podEnsRegistrar);\\n    }\\n\\n    function updatePodEnsRegistrar(address _podEnsRegistrar)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(_podEnsRegistrar != address(0), \\\"Invalid address\\\");\\n        podEnsRegistrar = IPodEnsRegistrar(_podEnsRegistrar);\\n    }\\n\\n    /**\\n     * @param _members The addresses of the members of the pod\\n     * @param threshold The number of members that are required to sign a transaction\\n     * @param _admin The address of the pod admin\\n     * @param _label label hash of pod name (i.e labelhash('mypod'))\\n     * @param _ensString string of pod ens name (i.e.'mypod.pod.xyz')\\n     */\\n    function createPod(\\n        address[] memory _members,\\n        uint256 threshold,\\n        address _admin,\\n        bytes32 _label,\\n        string memory _ensString,\\n        uint256 expectedPodId,\\n        string memory _imageUrl\\n    ) external override {\\n        address safe = createSafe(_members, threshold, expectedPodId);\\n\\n        _createPod(\\n            _members,\\n            safe,\\n            _admin,\\n            _label,\\n            _ensString,\\n            expectedPodId,\\n            _imageUrl\\n        );\\n    }\\n\\n    /**\\n     * @dev Used to create a pod with an existing safe\\n     * @dev Will automatically distribute membership NFTs to current safe members\\n     * @param _admin The address of the pod admin\\n     * @param _safe The address of existing safe\\n     * @param _label label hash of pod name (i.e labelhash('mypod'))\\n     * @param _ensString string of pod ens name (i.e.'mypod.pod.xyz')\\n     */\\n    function createPodWithSafe(\\n        address _admin,\\n        address _safe,\\n        bytes32 _label,\\n        string memory _ensString,\\n        uint256 expectedPodId,\\n        string memory _imageUrl\\n    ) external override {\\n        require(_safe != address(0), \\\"invalid safe address\\\");\\n        // safe must have zero'd pod id\\n        if (safeToPodId[_safe] == 0) {\\n            // if safe has zero pod id make sure its not set at pod id zero\\n            require(_safe != podIdToSafe[0], \\\"safe already in use\\\");\\n        } else {\\n            revert(\\\"safe already in use\\\");\\n        }\\n        require(safeToPodId[_safe] == 0, \\\"safe already in use\\\");\\n        require(isSafeModuleEnabled(_safe), \\\"safe module must be enabled\\\");\\n        require(\\n            isSafeMember(_safe, msg.sender) || msg.sender == _safe,\\n            \\\"caller must be safe or member\\\"\\n        );\\n\\n        address[] memory members = getSafeMembers(_safe);\\n\\n        _createPod(\\n            members,\\n            _safe,\\n            _admin,\\n            _label,\\n            _ensString,\\n            expectedPodId,\\n            _imageUrl\\n        );\\n    }\\n\\n    /**\\n     * @param _members The addresses of the members of the pod\\n     * @param _admin The address of the pod admin\\n     * @param _safe The address of existing safe\\n     * @param _label label hash of pod name (i.e labelhash('mypod'))\\n     * @param _ensString string of pod ens name (i.e.'mypod.pod.xyz')\\n     */\\n    function _createPod(\\n        address[] memory _members,\\n        address _safe,\\n        address _admin,\\n        bytes32 _label,\\n        string memory _ensString,\\n        uint256 expectedPodId,\\n        string memory _imageUrl\\n    ) internal {\\n        // add create event flag to token data\\n        bytes memory data = new bytes(1);\\n        data[0] = bytes1(uint8(CREATE_EVENT));\\n\\n        uint256 podId = memberToken.createPod(_members, data);\\n        // The imageUrl has an expected pod ID, but we need to make sure it aligns with the actual pod ID\\n        require(podId == expectedPodId, \\\"pod id didn't match, try again\\\");\\n\\n        emit CreatePod(podId, _safe, _admin, _ensString);\\n        emit UpdatePodAdmin(podId, _admin);\\n\\n        // add controller as guard\\n        setSafeGuard(_safe, address(this));\\n        if (_admin != address(0)) {\\n            // will lock safe modules if admin exists\\n            setModuleLock(_safe, true);\\n            podAdmin[podId] = _admin;\\n        }\\n        podIdToSafe[podId] = _safe;\\n        safeToPodId[_safe] = podId;\\n\\n        // setup pod ENS\\n        address reverseRegistrar = podEnsRegistrar.registerPod(\\n            _label,\\n            _safe,\\n            msg.sender\\n        );\\n        setupSafeReverseResolver(_safe, reverseRegistrar, _ensString);\\n\\n        // Node is how ENS identifies names, we need that to setText\\n        bytes32 node = podEnsRegistrar.getEnsNode(_label);\\n        podEnsRegistrar.setText(node, \\\"avatar\\\", _imageUrl);\\n        podEnsRegistrar.setText(node, \\\"podId\\\", Strings.toString(podId));\\n    }\\n\\n    /**\\n     * @dev Allows admin to unlock the safe modules and allow them to be edited by members\\n     * @param _podId The id number of the pod\\n     * @param _isLocked true - pod modules cannot be added/removed\\n     */\\n    function setPodModuleLock(uint256 _podId, bool _isLocked)\\n        external\\n        override\\n    {\\n        require(\\n            msg.sender == podAdmin[_podId],\\n            \\\"Must be admin to set module lock\\\"\\n        );\\n        setModuleLock(podIdToSafe[_podId], _isLocked);\\n    }\\n\\n    /**\\n     * @param _podId The id number of the pod\\n     * @param _newAdmin The address of the new pod admin\\n     */\\n    function updatePodAdmin(uint256 _podId, address _newAdmin)\\n        external\\n        override\\n    {\\n        address admin = podAdmin[_podId];\\n        address safe = podIdToSafe[_podId];\\n\\n        require(safe != address(0), \\\"Pod doesn't exist\\\");\\n\\n        // if there is no admin it can only be added by safe\\n        if (admin == address(0)) {\\n            require(msg.sender == safe, \\\"Only safe can add new admin\\\");\\n        } else {\\n            require(msg.sender == admin, \\\"Only admin can update admin\\\");\\n        }\\n        // set module lock to true for non zero _newAdmin\\n        setModuleLock(safe, _newAdmin != address(0));\\n\\n        podAdmin[_podId] = _newAdmin;\\n\\n        emit UpdatePodAdmin(_podId, _newAdmin);\\n    }\\n\\n    /**\\n     * @param _podId The id number of the pod\\n     * @param _isTransferLocked The address of the new pod admin\\n     */\\n    function setPodTransferLock(uint256 _podId, bool _isTransferLocked)\\n        external\\n        override\\n    {\\n        address admin = podAdmin[_podId];\\n        address safe = podIdToSafe[_podId];\\n\\n        // if no pod admin it can only be set by safe\\n        if (admin == address(0)) {\\n            require(msg.sender == safe, \\\"Only safe can set transfer lock\\\");\\n        } else {\\n            // if admin then it can be set by admin or safe\\n            require(\\n                msg.sender == admin || msg.sender == safe,\\n                \\\"Only admin or safe can set transfer lock\\\"\\n            );\\n        }\\n\\n        // set podid to transfer lock bool\\n        isTransferLocked[_podId] = _isTransferLocked;\\n    }\\n\\n    /**\\n     * @dev This will nullify all pod state on this controller\\n     * @dev Update state on _newController\\n     * @dev Update controller to _newController in Safe and MemberToken\\n     * @param _podId The id number of the pod\\n     * @param _newController The address of the new pod controller\\n     * @param _prevModule The module that points to the orca module in the safe's ModuleManager linked list\\n     */\\n    function migratePodController(\\n        uint256 _podId,\\n        address _newController,\\n        address _prevModule\\n    ) external override {\\n        require(_newController != address(0), \\\"Invalid address\\\");\\n        require(\\n            _newController != address(this),\\n            \\\"Cannot migrate to same controller\\\"\\n        );\\n        require(\\n            controllerRegistry.isRegistered(_newController),\\n            \\\"Controller not registered\\\"\\n        );\\n\\n        address admin = podAdmin[_podId];\\n        address safe = podIdToSafe[_podId];\\n\\n        require(\\n            msg.sender == admin || msg.sender == safe,\\n            \\\"User not authorized\\\"\\n        );\\n\\n        IControllerBase newController = IControllerBase(_newController);\\n\\n        // nullify current pod state\\n        podAdmin[_podId] = address(0);\\n        podIdToSafe[_podId] = address(0);\\n        safeToPodId[safe] = 0;\\n        // update controller in MemberToken\\n        memberToken.migrateMemberController(_podId, _newController);\\n        // update safe module to _newController\\n        migrateSafeTeller(safe, _newController, _prevModule);\\n        // update pod state in _newController\\n        newController.updatePodState(_podId, admin, safe);\\n    }\\n\\n    /**\\n     * @dev This is called by another version of controller to migrate a pod to this version\\n     * @dev Will only accept calls from registered controllers\\n     * @dev Can only be called once.\\n     * @param _podId The id number of the pod\\n     * @param _podAdmin The address of the pod admin\\n     * @param _safeAddress The address of the safe\\n     */\\n    function updatePodState(\\n        uint256 _podId,\\n        address _podAdmin,\\n        address _safeAddress\\n    ) external override {\\n        require(_safeAddress != address(0), \\\"Invalid address\\\");\\n        require(\\n            controllerRegistry.isRegistered(msg.sender),\\n            \\\"Controller not registered\\\"\\n        );\\n        require(\\n            podAdmin[_podId] == address(0) &&\\n                podIdToSafe[_podId] == address(0) &&\\n                safeToPodId[_safeAddress] == 0,\\n            \\\"Pod already exists\\\"\\n        );\\n        // if there is a pod admin, set state and lock modules\\n        if (_podAdmin != address(0)) {\\n            podAdmin[_podId] = _podAdmin;\\n            setModuleLock(_safeAddress, true);\\n        }\\n        podIdToSafe[_podId] = _safeAddress;\\n        safeToPodId[_safeAddress] = _podId;\\n\\n        // add controller as guard\\n        setSafeGuard(_safeAddress, address(this));\\n\\n        emit UpdatePodAdmin(_podId, _podAdmin);\\n    }\\n\\n    /**\\n     * Ejects a safe from the Orca ecosystem. Also handles clean up for safes\\n     * that have already been ejected.\\n     * Note that the reverse registry entry cannot be cleaned up if the safe has already been ejected.\\n     * @param podId - ID of pod being ejected\\n     * @param label - labelhash of pod ENS name, i.e., `labelhash(\\\"mypod\\\")`\\n     * @param previousModule - previous module\\n     */\\n    function ejectSafe(\\n        uint256 podId,\\n        bytes32 label,\\n        address previousModule\\n    ) external override {\\n        address safe = podIdToSafe[podId];\\n        address admin = podAdmin[podId];\\n\\n        require(safe != address(0), \\\"pod not registered\\\");\\n\\n        if (admin != address(0)) {\\n            require(msg.sender == admin, \\\"must be admin\\\");\\n            setModuleLock(safe, false);\\n        } else {\\n            require(msg.sender == safe, \\\"tx must be sent from safe\\\");\\n        }\\n\\n        Resolver resolver = Resolver(podEnsRegistrar.resolver());\\n        bytes32 node = podEnsRegistrar.getEnsNode(label);\\n        address addr = resolver.addr(node);\\n        require(addr == safe, \\\"safe and label didn't match\\\");\\n        podEnsRegistrar.setText(node, \\\"avatar\\\", \\\"\\\");\\n        podEnsRegistrar.setText(node, \\\"podId\\\", \\\"\\\");\\n        podEnsRegistrar.setAddr(node, address(0));\\n        podEnsRegistrar.register(label, address(0));\\n\\n        // if module is already disabled, the safe must unset these manually\\n        if (isSafeModuleEnabled(safe)) {\\n            // remove controller as guard\\n            setSafeGuard(safe, address(0));\\n            // remove module and handle reverse registration clearing.\\n            disableModule(\\n                safe,\\n                podEnsRegistrar.reverseRegistrar(),\\n                previousModule\\n            );\\n        }\\n\\n        // This needs to happen before the burn to skip the transfer check.\\n        podAdmin[podId] = address(0);\\n        podIdToSafe[podId] = address(0);\\n        safeToPodId[safe] = 0;\\n\\n        // Burn member tokens\\n        address[] memory members = this.getSafeMembers(safe);\\n        memberToken.burnSingleBatch(members, podId);\\n\\n        emit DeregisterPod(podId);\\n    }\\n\\n    function batchMintAndBurn(\\n        uint256 _podId,\\n        address[] memory _mintMembers,\\n        address[] memory _burnMembers\\n    ) external {\\n        address safe = podIdToSafe[_podId];\\n        require(\\n            msg.sender == safe || msg.sender == podAdmin[_podId],\\n            \\\"not authorized\\\"\\n        );\\n        memberToken.mintSingleBatch(_mintMembers, _podId, bytes(\\\" \\\"));\\n        memberToken.burnSingleBatch(_burnMembers, _podId);\\n    }\\n\\n    /**\\n     * @param operator The address that initiated the action\\n     * @param from The address sending the membership token\\n     * @param to The address recieveing the membership token\\n     * @param ids An array of membership token ids to be transfered\\n     * @param data Passes a flag for an initial creation event\\n     */\\n    function beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory,\\n        bytes memory data\\n    ) external override {\\n        require(msg.sender == address(memberToken), \\\"Not Authorized\\\");\\n\\n        // only recognise data flags from this controller\\n        if (operator == address(this)) {\\n            // if create or sync event than side effects have been pre-handled\\n            if (data.length > 0) {\\n                if (uint8(data[0]) == CREATE_EVENT) return;\\n                if (uint8(data[0]) == SYNC_EVENT) return;\\n            }\\n            // because 1155 burn doesn't allow data we use a burn sync flag to skip side effects\\n            if (BURN_SYNC_FLAG == true) {\\n                setBurnSyncFlag(false);\\n                return;\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < ids.length; i += 1) {\\n            uint256 podId = ids[i];\\n            address safe = podIdToSafe[podId];\\n            address admin = podAdmin[podId];\\n\\n            // If safe is 0'd, it means we're deregistering the pod, so we can skip check\\n            if (safe == address(0) && to == address(0)) return;\\n\\n            if (from == address(0)) {\\n                // mint event\\n\\n                // there are no rules operator must be admin, safe or controller\\n                require(\\n                    operator == safe ||\\n                        operator == admin ||\\n                        operator == address(this),\\n                    \\\"No Rules Set\\\"\\n                );\\n\\n                onMint(to, safe);\\n            } else if (to == address(0)) {\\n                // burn event\\n\\n                // there are no rules  operator must be admin, safe or controller\\n                require(\\n                    operator == safe ||\\n                        operator == admin ||\\n                        operator == address(this),\\n                    \\\"No Rules Set\\\"\\n                );\\n\\n                onBurn(from, safe);\\n            } else {\\n                // pod cannot be locked\\n                require(\\n                    isTransferLocked[podId] == false,\\n                    \\\"Pod Is Transfer Locked\\\"\\n                );\\n                // transfer event\\n                onTransfer(from, to, safe);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This will be called by the safe at execution time time\\n     * _param to Destination address of Safe transaction.\\n     * _param value Ether value of Safe transaction.\\n     * @param data Data payload of Safe transaction.\\n     * _param operation Operation type of Safe transaction.\\n     * _param safeTxGas Gas that should be used for the Safe transaction.\\n     * _param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * _param gasPrice Gas price that should be used for the payment calculation.\\n     * _param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * _param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * _param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})\\n     * _param msgSender Account executing safe transaction\\n     */\\n    function checkTransaction(\\n        address,\\n        uint256,\\n        bytes memory data,\\n        Enum.Operation,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address,\\n        address payable,\\n        bytes memory,\\n        address\\n    ) external override {\\n        uint256 podId = safeToPodId[msg.sender];\\n\\n        if (podId == 0) {\\n            address safe = podIdToSafe[podId];\\n            // if safe is 0 its deregistered and we can skip check to allow cleanup\\n            if (safe == address(0)) return;\\n            // else require podId zero is calling from safe\\n            require(safe == msg.sender, \\\"Not Authorized\\\");\\n        }\\n\\n        if (data.length >= 4) {\\n            // if safe modules are locked perform safe check\\n            if (areModulesLocked[msg.sender]) {\\n                safeTellerCheck(data);\\n            }\\n            memberTellerCheck(podId, data);\\n        }\\n    }\\n\\n    function checkAfterExecution(bytes32, bool) external pure override {\\n        return;\\n    }\\n}\\n\",\"keccak256\":\"0xf99476a2c750b30fb88448cdfb159ee0c704db57580bc4db89eed34c93c1c96d\"},\"contracts/MemberTeller.sol\":{\"content\":\"pragma solidity ^0.8.7;\\nimport \\\"./interfaces/IMemberToken.sol\\\";\\n\\ncontract MemberTeller {\\n    IMemberToken public immutable memberToken;\\n\\n    bytes4 public constant ENCODED_SIG_ADD_OWNER =\\n        bytes4(keccak256(\\\"addOwnerWithThreshold(address,uint256)\\\"));\\n    bytes4 public constant ENCODED_SIG_REMOVE_OWNER =\\n        bytes4(keccak256(\\\"removeOwner(address,address,uint256)\\\"));\\n    bytes4 public constant ENCODED_SIG_SWAP_OWNER =\\n        bytes4(keccak256(\\\"swapOwner(address,address,address)\\\"));\\n\\n    uint8 internal constant SYNC_EVENT = 0x02;\\n\\n    constructor(address _memberToken) {\\n        memberToken = IMemberToken(_memberToken);\\n    }\\n\\n    function getSyncData() internal pure returns (bytes memory) {\\n        bytes memory data = new bytes(1);\\n        data[0] = bytes1(uint8(SYNC_EVENT));\\n        return data;\\n    }\\n\\n    // we use burn sync flag to let the controller know to skip side effects\\n    // controller will reset flag in beforeTokenTransfer\\n    bool internal BURN_SYNC_FLAG = false;\\n\\n    function setBurnSyncFlag(bool flag) internal {\\n        BURN_SYNC_FLAG = flag;\\n    }\\n\\n    function memberTellerCheck(uint256 podId, bytes memory data) internal {\\n        if (bytes4(data) == ENCODED_SIG_ADD_OWNER) {\\n            address mintMember;\\n            assembly {\\n                // shift 0x4 for the sig + 0x20 padding\\n                mintMember := mload(add(data, 0x24))\\n            }\\n            memberToken.mint(mintMember, podId, getSyncData());\\n        }\\n        if (bytes4(data) == ENCODED_SIG_REMOVE_OWNER) {\\n            address burnMember;\\n            assembly {\\n                // note: consecutive addresses are packed into a single memory slot\\n                // shift 0x4 for the sig, 0x40 for prev address and padding\\n                burnMember := mload(add(data, 0x44))\\n            }\\n            setBurnSyncFlag(true);\\n            memberToken.burn(burnMember, podId);\\n        }\\n        if (bytes4(data) == ENCODED_SIG_SWAP_OWNER) {\\n            address burnMember;\\n            address mintMember;\\n            assembly {\\n                // note: consecutive addresses are packed into a single memory slot\\n                // shift 0x4 for the sig + 0x40 for prev address and padding\\n                burnMember := mload(add(data, 0x44))\\n                // shift 0x4 for the sig + 0x40 for prev address and padding + 0x20 for the new address\\n                mintMember := mload(add(data, 0x64))\\n            }\\n            memberToken.mint(mintMember, podId, getSyncData());\\n            setBurnSyncFlag(true);\\n            memberToken.burn(burnMember, podId);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x92b5593d7dd120b62bfd4887bf79a23f86b7c06660d9084e4f5b5e15fee0d318\"},\"contracts/SafeTeller.sol\":{\"content\":\"pragma solidity ^0.8.7;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/IGnosisSafe.sol\\\";\\nimport \\\"./interfaces/IGnosisSafeProxyFactory.sol\\\";\\n\\ncontract SafeTeller {\\n    using Address for address;\\n\\n    // mainnet: 0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B;\\n    address public immutable proxyFactoryAddress;\\n\\n    // mainnet: 0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F;\\n    address public immutable gnosisMasterAddress;\\n    address public immutable fallbackHandlerAddress;\\n\\n    string public constant FUNCTION_SIG_SETUP =\\n        \\\"setup(address[],uint256,address,bytes,address,address,uint256,address)\\\";\\n    string public constant FUNCTION_SIG_EXEC =\\n        \\\"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)\\\";\\n\\n    string public constant FUNCTION_SIG_ENABLE = \\\"delegateSetup(address)\\\";\\n\\n    bytes4 public constant ENCODED_SIG_ENABLE_MOD =\\n        bytes4(keccak256(\\\"enableModule(address)\\\"));\\n    bytes4 public constant ENCODED_SIG_DISABLE_MOD =\\n        bytes4(keccak256(\\\"disableModule(address,address)\\\"));\\n    bytes4 public constant ENCODED_SIG_SET_GUARD =\\n        bytes4(keccak256(\\\"setGuard(address)\\\"));\\n\\n    address internal constant SENTINEL = address(0x1);\\n\\n    // pods with admin have modules locked by default\\n    mapping(address => bool) public areModulesLocked;\\n\\n    /**\\n     * @param _proxyFactoryAddress The proxy factory address\\n     * @param _gnosisMasterAddress The gnosis master address\\n     */\\n    constructor(\\n        address _proxyFactoryAddress,\\n        address _gnosisMasterAddress,\\n        address _fallbackHanderAddress\\n    ) {\\n        proxyFactoryAddress = _proxyFactoryAddress;\\n        gnosisMasterAddress = _gnosisMasterAddress;\\n        fallbackHandlerAddress = _fallbackHanderAddress;\\n    }\\n\\n    /**\\n     * @param _safe The address of the safe\\n     * @param _newSafeTeller The address of the new safe teller contract\\n     */\\n    function migrateSafeTeller(\\n        address _safe,\\n        address _newSafeTeller,\\n        address _prevModule\\n    ) internal {\\n        // add new safeTeller\\n        bytes memory enableData = abi.encodeWithSignature(\\n            \\\"enableModule(address)\\\",\\n            _newSafeTeller\\n        );\\n\\n        bool enableSuccess = IGnosisSafe(_safe).execTransactionFromModule(\\n            _safe,\\n            0,\\n            enableData,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(enableSuccess, \\\"Migration failed on enable\\\");\\n\\n        // validate prevModule of current safe teller\\n        (address[] memory moduleBuffer, ) = IGnosisSafe(_safe)\\n            .getModulesPaginated(_prevModule, 1);\\n        require(moduleBuffer[0] == address(this), \\\"incorrect prevModule\\\");\\n\\n        // disable current safeTeller\\n        bytes memory disableData = abi.encodeWithSignature(\\n            \\\"disableModule(address,address)\\\",\\n            _prevModule,\\n            address(this)\\n        );\\n\\n        bool disableSuccess = IGnosisSafe(_safe).execTransactionFromModule(\\n            _safe,\\n            0,\\n            disableData,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(disableSuccess, \\\"Migration failed on disable\\\");\\n    }\\n\\n    /**\\n     * @dev sets the safeteller as safe guard, called after migration\\n     * @param _safe The address of the safe\\n     */\\n    function setSafeGuard(address _safe, address guard) internal {\\n        bytes memory transferData = abi.encodeWithSignature(\\n            \\\"setGuard(address)\\\",\\n            guard\\n        );\\n\\n        bool guardSuccess = IGnosisSafe(_safe).execTransactionFromModule(\\n            _safe,\\n            0,\\n            transferData,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(guardSuccess, \\\"Could not set guard\\\");\\n    }\\n\\n    function getSafeMembers(address safe)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        return IGnosisSafe(safe).getOwners();\\n    }\\n\\n    function isSafeModuleEnabled(address safe) public view returns (bool) {\\n        return IGnosisSafe(safe).isModuleEnabled(address(this));\\n    }\\n\\n    function isSafeMember(address safe, address member)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return IGnosisSafe(safe).isOwner(member);\\n    }\\n\\n    /**\\n     * @param _owners The  addresses to be owners of the safe\\n     * @param _threshold The number of owners that are required to sign a transaciton\\n     * @return safeAddress The address of the new safe\\n     */\\n    function createSafe(\\n        address[] memory _owners,\\n        uint256 _threshold,\\n        uint256 _salt\\n    ) internal returns (address safeAddress) {\\n        bytes memory data = abi.encodeWithSignature(\\n            FUNCTION_SIG_ENABLE,\\n            address(this)\\n        );\\n\\n        // encode the setup call that will be called on the new proxy safe\\n        // from the proxy factory\\n        bytes memory setupData = abi.encodeWithSignature(\\n            FUNCTION_SIG_SETUP,\\n            _owners,\\n            _threshold,\\n            this,\\n            data,\\n            fallbackHandlerAddress,\\n            address(0),\\n            uint256(0),\\n            address(0)\\n        );\\n\\n        try\\n            IGnosisSafeProxyFactory(proxyFactoryAddress).createProxyWithNonce(\\n                gnosisMasterAddress,\\n                setupData,\\n                _salt\\n            )\\n        returns (address newSafeAddress) {\\n            return newSafeAddress;\\n        } catch (bytes memory) {\\n            revert(\\\"Create Proxy With Data Failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * Uses CREATE2 to replicate a given safe on a new network.\\n     * @param members The addresses of the members of the pod as it was originally created.\\n     * @param threshold The number of members that are required to sign a transaction\\n     * @param podId - Pod ID of safe you are trying to recreate\\n     */\\n    function recoverSafe(\\n        address[] calldata members,\\n        uint256 threshold,\\n        uint256 podId\\n    ) external returns (address) {\\n        return createSafe(members, threshold, podId);\\n    }\\n\\n    /**\\n     * @param to The account address to add as an owner\\n     * @param safe The address of the safe\\n     */\\n    function onMint(address to, address safe) internal {\\n        uint256 threshold = IGnosisSafe(safe).getThreshold();\\n\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"addOwnerWithThreshold(address,uint256)\\\",\\n            to,\\n            threshold\\n        );\\n\\n        bool success = IGnosisSafe(safe).execTransactionFromModule(\\n            safe,\\n            0,\\n            data,\\n            IGnosisSafe.Operation.Call\\n        );\\n\\n        require(success, \\\"Module Transaction Failed\\\");\\n    }\\n\\n    /**\\n     * @param from The address to be removed as an owner\\n     * @param safe The address of the safe\\n     */\\n    function onBurn(address from, address safe) internal {\\n        uint256 threshold = IGnosisSafe(safe).getThreshold();\\n        address[] memory owners = IGnosisSafe(safe).getOwners();\\n\\n        //look for the address pointing to address from\\n        address prevFrom = address(0);\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            if (owners[i] == from) {\\n                if (i == 0) {\\n                    prevFrom = SENTINEL;\\n                } else {\\n                    prevFrom = owners[i - 1];\\n                }\\n            }\\n        }\\n        if (owners.length - 1 < threshold) threshold -= 1;\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"removeOwner(address,address,uint256)\\\",\\n            prevFrom,\\n            from,\\n            threshold\\n        );\\n\\n        bool success = IGnosisSafe(safe).execTransactionFromModule(\\n            safe,\\n            0,\\n            data,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(success, \\\"Module Transaction Failed\\\");\\n    }\\n\\n    /**\\n     * @param from The address being removed as an owner\\n     * @param to The address being added as an owner\\n     * @param safe The address of the safe\\n     */\\n    function onTransfer(\\n        address from,\\n        address to,\\n        address safe\\n    ) internal {\\n        address[] memory owners = IGnosisSafe(safe).getOwners();\\n\\n        //look for the address pointing to address from\\n        address prevFrom;\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            if (owners[i] == from) {\\n                if (i == 0) {\\n                    prevFrom = SENTINEL;\\n                } else {\\n                    prevFrom = owners[i - 1];\\n                }\\n            }\\n        }\\n\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"swapOwner(address,address,address)\\\",\\n            prevFrom,\\n            from,\\n            to\\n        );\\n\\n        bool success = IGnosisSafe(safe).execTransactionFromModule(\\n            safe,\\n            0,\\n            data,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(success, \\\"Module Transaction Failed\\\");\\n    }\\n\\n    /**\\n     * @dev This will execute a tx from the safe that will update the safe's ENS in the reverse resolver\\n     * @param safe safe address\\n     * @param reverseRegistrar The ENS default reverseRegistar\\n     * @param _ensString string of pod ens name (i.e.'mypod.pod.xyz')\\n     */\\n    function setupSafeReverseResolver(\\n        address safe,\\n        address reverseRegistrar,\\n        string memory _ensString\\n    ) internal virtual {\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"setName(string)\\\",\\n            _ensString\\n        );\\n\\n        bool success = IGnosisSafe(safe).execTransactionFromModule(\\n            reverseRegistrar,\\n            0,\\n            data,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(success, \\\"Module Transaction Failed\\\");\\n    }\\n\\n    /**\\n     * @dev This will be called by the safe at tx time and prevent module disable on pods with admins\\n     * @param safe safe address\\n     * @param isLocked safe address\\n     */\\n    function setModuleLock(address safe, bool isLocked) internal {\\n        areModulesLocked[safe] = isLocked;\\n    }\\n\\n    function safeTellerCheck(bytes memory data) internal pure {\\n        require(\\n            bytes4(data) != ENCODED_SIG_ENABLE_MOD,\\n            \\\"Cannot Enable Modules\\\"\\n        );\\n        require(\\n            bytes4(data) != ENCODED_SIG_DISABLE_MOD,\\n            \\\"Cannot Disable Modules\\\"\\n        );\\n        require(bytes4(data) != ENCODED_SIG_SET_GUARD, \\\"Cannot Change Guard\\\");\\n    }\\n\\n    /**\\n     * Removes the reverse registrar entry and disables module.\\n     * Intended as clean up during the safe ejection process.\\n     * Note that an already ejected safe cannot clear the reverse registry entry.\\n     */\\n    function disableModule(\\n        address safe,\\n        address reverseRegistrar,\\n        address previousModule\\n    ) internal {\\n        IGnosisSafe safeContract = IGnosisSafe(safe);\\n\\n        // Note that you cannot clear the reverse registry entry of an already ejected safe.\\n        bytes memory nameData = abi.encodeWithSignature(\\\"setName(string)\\\", \\\"\\\");\\n        safeContract.execTransactionFromModule(\\n            reverseRegistrar,\\n            0,\\n            nameData,\\n            IGnosisSafe.Operation.Call\\n        );\\n\\n        // remove controller as guard\\n        bytes memory guardData = abi.encodeWithSignature(\\n            \\\"setGuard(address)\\\",\\n            address(0)\\n        );\\n\\n        safeContract.execTransactionFromModule(\\n            safe,\\n            0,\\n            guardData,\\n            IGnosisSafe.Operation.Call\\n        );\\n\\n        // disable module\\n        bytes memory moduleData = abi.encodeWithSignature(\\n            \\\"disableModule(address,address)\\\",\\n            previousModule,\\n            address(this)\\n        );\\n\\n        safeContract.execTransactionFromModule(\\n            safe,\\n            0,\\n            moduleData,\\n            IGnosisSafe.Operation.Call\\n        );\\n    }\\n\\n    // TODO: move to library\\n    // Used in a delegate call to enable module add on setup\\n    function enableModule(address module) external {\\n        require(module == address(0));\\n    }\\n\\n    function delegateSetup(address _context) external {\\n        this.enableModule(_context);\\n    }\\n}\\n\",\"keccak256\":\"0x058905dfbdc57601c6c8b49439dc81675488b6304f15141c47b887458abc2fd7\"},\"contracts/ens/IPodEnsRegistrar.sol\":{\"content\":\"pragma solidity ^0.8.7;\\n\\ninterface IPodEnsRegistrar {\\n    function ens() external view returns (address);\\n\\n    function resolver() external view returns (address);\\n\\n    function reverseRegistrar() external view returns (address);\\n\\n    function getRootNode() external view returns (bytes32);\\n\\n    function registerPod(\\n        bytes32 label,\\n        address podSafe,\\n        address podCreator\\n    ) external returns (address);\\n\\n    function register(bytes32 label, address owner) external;\\n\\n    function deregister(address safe, bytes32 label) external;\\n\\n    function setText(\\n        bytes32 node,\\n        string calldata key,\\n        string calldata value\\n    ) external;\\n\\n    function setAddr(bytes32 node, address newAddress) external;\\n\\n    function addressToNode(address input) external returns (bytes32);\\n\\n    function getEnsNode(bytes32 label) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x74e485a9d6508af2c8b8141c10adf6224b0edc8a78671584b222d18da40a70f9\"},\"contracts/interfaces/IControllerBase.sol\":{\"content\":\"pragma solidity ^0.8.7;\\n\\ninterface IControllerBase {\\n    /**\\n     * @param operator The account address that initiated the action\\n     * @param from The account address sending the membership token\\n     * @param to The account address recieving the membership token\\n     * @param ids An array of membership token ids to be transfered\\n     * @param amounts The amount of each membership token type to transfer\\n     * @param data Arbitrary data\\n     */\\n    function beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n\\n    function updatePodState(\\n        uint256 _podId,\\n        address _podAdmin,\\n        address _safeAddress\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe5742d76ed6922a5d1cae269adf46b2da542bbe54d34bb62af77d81f9ce512e0\"},\"contracts/interfaces/IControllerRegistry.sol\":{\"content\":\"pragma solidity ^0.8.7;\\n\\n\\ninterface IControllerRegistry{\\n\\n    /**\\n     * @param _controller Address to check if registered as a controller\\n     * @return Boolean representing if the address is a registered as a controller\\n     */\\n    function isRegistered(address _controller) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x040c34638ad2095660cb546d9821c52ac020372fedc9067ffc59e47fc3523924\"},\"contracts/interfaces/IControllerV1.sol\":{\"content\":\"pragma solidity ^0.8.7;\\n\\nimport \\\"./IControllerBase.sol\\\";\\n\\ninterface IControllerV1 is IControllerBase {\\n    function updatePodEnsRegistrar(address _podEnsRegistrar) external;\\n\\n    /**\\n     * @param _members The addresses of the members of the pod\\n     * @param threshold The number of members that are required to sign a transaction\\n     * @param _admin The address of the pod admin\\n     * @param _label label hash of pod name (i.e labelhash('mypod'))\\n     * @param _ensString string of pod ens name (i.e.'mypod.pod.xyz')\\n     */\\n    function createPod(\\n        address[] memory _members,\\n        uint256 threshold,\\n        address _admin,\\n        bytes32 _label,\\n        string memory _ensString,\\n        uint256 expectedPodId,\\n        string memory _imageUrl\\n    ) external;\\n\\n    /**\\n     * @dev Used to create a pod with an existing safe\\n     * @dev Will automatically distribute membership NFTs to current safe members\\n     * @param _admin The address of the pod admin\\n     * @param _safe The address of existing safe\\n     * @param _label label hash of pod name (i.e labelhash('mypod'))\\n     * @param _ensString string of pod ens name (i.e.'mypod.pod.xyz')\\n     */\\n    function createPodWithSafe(\\n        address _admin,\\n        address _safe,\\n        bytes32 _label,\\n        string memory _ensString,\\n        uint256 expectedPodId,\\n        string memory _imageUrl\\n    ) external;\\n\\n    function podIdToSafe(uint256 _podId) external view returns (address);\\n\\n    /**\\n     * @dev Allows admin to unlock the safe modules and allow them to be edited by members\\n     * @param _podId The id number of the pod\\n     * @param _isLocked true - pod modules cannot be added/removed\\n     */\\n    function setPodModuleLock(uint256 _podId, bool _isLocked) external;\\n\\n    /**\\n     * @param _podId The id number of the pod\\n     * @param _isTransferLocked The address of the new pod admin\\n     */\\n    function setPodTransferLock(uint256 _podId, bool _isTransferLocked)\\n        external;\\n\\n    /**\\n     * @param _podId The id number of the pod\\n     * @param _newAdmin The address of the new pod admin\\n     */\\n    function updatePodAdmin(uint256 _podId, address _newAdmin) external;\\n\\n    /**\\n     * @dev This will nullify all pod state on this controller\\n     * @dev Update state on _newController\\n     * @dev Update controller to _newController in Safe and MemberToken\\n     * @param _podId The id number of the pod\\n     * @param _newController The address of the new pod controller\\n     * @param _prevModule The module that points to the orca module in the safe's ModuleManager linked list\\n     */\\n    function migratePodController(\\n        uint256 _podId,\\n        address _newController,\\n        address _prevModule\\n    ) external;\\n\\n    function ejectSafe(\\n        uint256 podId,\\n        bytes32 label,\\n        address previousModule\\n    ) external;\\n}\\n\",\"keccak256\":\"0x04a6cd222810362108bec320004d9695ecaa8fea81d8df1e301b0d0d2a36a695\"},\"contracts/interfaces/IGnosisSafe.sol\":{\"content\":\"pragma solidity ^0.8.7;\\n\\ninterface IGnosisSafe {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Operation operation\\n    ) external returns (bool success);\\n\\n    /// @dev Returns array of owners.\\n    /// @return Array of Safe owners.\\n    function getOwners() external view returns (address[] memory);\\n\\n    function isOwner(address owner) external view returns (bool);\\n\\n    function getThreshold() external returns (uint256);\\n\\n    /// @dev Returns array of modules.\\n    /// @param start Start of the page.\\n    /// @param pageSize Maximum number of modules that should be returned.\\n    /// @return array Array of modules.\\n    /// @return next Start of the next page.\\n    function getModulesPaginated(address start, uint256 pageSize)\\n        external\\n        view\\n        returns (address[] memory array, address next);\\n\\n    /// @dev Returns if an module is enabled\\n    /// @return True if the module is enabled\\n    function isModuleEnabled(address module) external view returns (bool);\\n\\n    /// @dev Set a guard that checks transactions before execution\\n    /// @param guard The address of the guard to be used or the 0 address to disable the guard\\n    function setGuard(address guard) external;\\n\\n    function disableModule(address prevModule, address module) external;\\n}\\n\",\"keccak256\":\"0x57553ab3f120222c2451bc2740c1e682f575539225c9b4d348d505ae299302d0\"},\"contracts/interfaces/IGnosisSafeProxyFactory.sol\":{\"content\":\"pragma solidity ^0.8.7;\\n\\ninterface IGnosisSafeProxyFactory {\\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\\n    /// @param singleton Address of singleton contract.\\n    /// @param data Payload for message call sent to new proxy contract.\\n    function createProxy(address singleton, bytes memory data)\\n        external\\n        returns (address);\\n\\n    function createProxyWithNonce(\\n        address _singleton,\\n        bytes memory initializer,\\n        uint256 saltNonce\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xb79f0b1760238376e9a40dd70c889497b9d9e4a162d1fc405587164a72d47077\"},\"contracts/interfaces/IMemberToken.sol\":{\"content\":\"pragma solidity ^0.8.7;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface IMemberToken is IERC1155 {\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Indicates weither any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) external view returns (bool);\\n\\n    function getNextAvailablePodId() external view returns (uint256);\\n\\n    /**\\n     * @param _podId The pod id number\\n     * @param _newController The address of the new controller\\n     */\\n    function migrateMemberController(uint256 _podId, address _newController)\\n        external;\\n\\n    /**\\n     * @param _account The account address to transfer the membership token to\\n     * @param _id The membership token id to mint\\n     * @param data Arbitrary data\\n     */\\n    function mint(\\n        address _account,\\n        uint256 _id,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @param _accounts The account addresses to transfer the membership tokens to\\n     * @param _id The membership token id to mint\\n     * @param data Arbitrary data\\n     */\\n    function mintSingleBatch(\\n        address[] memory _accounts,\\n        uint256 _id,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @param _account The account address holding the membership token to destroy\\n     * @param _id The id of the membership token to destroy\\n     */\\n    function burn(address _account, uint256 _id) external;\\n\\n    function burnSingleBatch(address[] memory _accounts, uint256 _id) external;\\n\\n    function createPod(address[] memory _accounts, bytes memory data)\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xc84f47034f342b2ed8f777c06d746ce0d287c418bf1ee4c5ab8449de27dffebf\"},\"lib/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xf79be82c1a2eb0a77fba4e0972221912e803309081ca460fd2cf61653e55758a\"},\"lib/ens-contracts/contracts/registry/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(address owner, address resolver)\\n        external\\n        returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd6ba83973ffbab31dec17a716af3bb5703844d16dceb5078583fb2c509f8bcc2\"},\"lib/ens-contracts/contracts/registry/ReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./ENS.sol\\\";\\nimport \\\"./IReverseRegistrar.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport \\\"../root/Controllable.sol\\\";\\n\\nabstract contract NameResolver {\\n    function setName(bytes32 node, string memory name) public virtual;\\n}\\n\\nbytes32 constant lookup = 0x3031323334353637383961626364656600000000000000000000000000000000;\\n\\nbytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n// namehash('addr.reverse')\\n\\ncontract ReverseRegistrar is Ownable, Controllable, IReverseRegistrar {\\n    ENS public immutable ens;\\n    NameResolver public defaultResolver;\\n\\n    event ReverseClaimed(address indexed addr, bytes32 indexed node);\\n\\n    /**\\n     * @dev Constructor\\n     * @param ensAddr The address of the ENS registry.\\n     */\\n    constructor(ENS ensAddr) {\\n        ens = ensAddr;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(\\n            ensAddr.owner(ADDR_REVERSE_NODE)\\n        );\\n        if (address(oldRegistrar) != address(0x0)) {\\n            oldRegistrar.claim(msg.sender);\\n        }\\n    }\\n\\n    modifier authorised(address addr) {\\n        require(\\n            addr == msg.sender ||\\n                controllers[msg.sender] ||\\n                ens.isApprovedForAll(addr, msg.sender) ||\\n                ownsContract(addr),\\n            \\\"ReverseRegistrar: Caller is not a controller or authorised by address or the address itself\\\"\\n        );\\n        _;\\n    }\\n\\n    function setDefaultResolver(address resolver) public override onlyOwner {\\n        require(\\n            address(resolver) != address(0),\\n            \\\"ReverseRegistrar: Resolver address must not be 0\\\"\\n        );\\n        defaultResolver = NameResolver(resolver);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claim(address owner) public override returns (bytes32) {\\n        return claimForAddr(msg.sender, owner, address(defaultResolver));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param addr The reverse record to set\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) public override authorised(addr) returns (bytes32) {\\n        bytes32 labelHash = sha3HexAddress(addr);\\n        bytes32 reverseNode = keccak256(\\n            abi.encodePacked(ADDR_REVERSE_NODE, labelHash)\\n        );\\n        emit ReverseClaimed(addr, reverseNode);\\n        ens.setSubnodeRecord(ADDR_REVERSE_NODE, labelHash, owner, resolver, 0);\\n        return reverseNode;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimWithResolver(address owner, address resolver)\\n        public\\n        override\\n        returns (bytes32)\\n    {\\n        return claimForAddr(msg.sender, owner, resolver);\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the calling account. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setName(string memory name) public override returns (bytes32) {\\n        return\\n            setNameForAddr(\\n                msg.sender,\\n                msg.sender,\\n                address(defaultResolver),\\n                name\\n            );\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the account provided. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * Only callable by controllers and authorised users\\n     * @param addr The reverse record to set\\n     * @param owner The owner of the reverse node\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) public override returns (bytes32) {\\n        bytes32 node = claimForAddr(addr, owner, resolver);\\n        NameResolver(resolver).setName(node, name);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Returns the node hash for a given account's reverse records.\\n     * @param addr The address to hash\\n     * @return The ENS node hash.\\n     */\\n    function node(address addr) public pure override returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr))\\n            );\\n    }\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n        assembly {\\n            for {\\n                let i := 40\\n            } gt(i, 0) {\\n\\n            } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n\\n    function ownsContract(address addr) internal view returns (bool) {\\n        try Ownable(addr).owner() returns (address owner) {\\n            return owner == msg.sender;\\n        } catch {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xee1b81673ada526eac74312ba72bbde6140e07b49434e800e3fb1110eeb8a7d4\"},\"lib/ens-contracts/contracts/resolvers/Resolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./profiles/IABIResolver.sol\\\";\\nimport \\\"./profiles/IAddressResolver.sol\\\";\\nimport \\\"./profiles/IAddrResolver.sol\\\";\\nimport \\\"./profiles/IContentHashResolver.sol\\\";\\nimport \\\"./profiles/IDNSRecordResolver.sol\\\";\\nimport \\\"./profiles/IDNSZoneResolver.sol\\\";\\nimport \\\"./profiles/IInterfaceResolver.sol\\\";\\nimport \\\"./profiles/INameResolver.sol\\\";\\nimport \\\"./profiles/IPubkeyResolver.sol\\\";\\nimport \\\"./profiles/ITextResolver.sol\\\";\\nimport \\\"./profiles/IExtendedResolver.sol\\\";\\n\\n/**\\n * A generic resolver interface which includes all the functions including the ones deprecated\\n */\\ninterface Resolver is\\n    IERC165,\\n    IABIResolver,\\n    IAddressResolver,\\n    IAddrResolver,\\n    IContentHashResolver,\\n    IDNSRecordResolver,\\n    IDNSZoneResolver,\\n    IInterfaceResolver,\\n    INameResolver,\\n    IPubkeyResolver,\\n    ITextResolver,\\n    IExtendedResolver\\n{\\n    /* Deprecated events */\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n\\n    function setABI(\\n        bytes32 node,\\n        uint256 contentType,\\n        bytes calldata data\\n    ) external;\\n\\n    function setAddr(bytes32 node, address addr) external;\\n\\n    function setAddr(\\n        bytes32 node,\\n        uint256 coinType,\\n        bytes calldata a\\n    ) external;\\n\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\n\\n    function setDnsrr(bytes32 node, bytes calldata data) external;\\n\\n    function setName(bytes32 node, string calldata _name) external;\\n\\n    function setPubkey(\\n        bytes32 node,\\n        bytes32 x,\\n        bytes32 y\\n    ) external;\\n\\n    function setText(\\n        bytes32 node,\\n        string calldata key,\\n        string calldata value\\n    ) external;\\n\\n    function setInterface(\\n        bytes32 node,\\n        bytes4 interfaceID,\\n        address implementer\\n    ) external;\\n\\n    function multicall(bytes[] calldata data)\\n        external\\n        returns (bytes[] memory results);\\n\\n    /* Deprecated functions */\\n    function content(bytes32 node) external view returns (bytes32);\\n\\n    function multihash(bytes32 node) external view returns (bytes memory);\\n\\n    function setContent(bytes32 node, bytes32 hash) external;\\n\\n    function setMultihash(bytes32 node, bytes calldata hash) external;\\n}\\n\",\"keccak256\":\"0x52333f81a618c966f2983d23111f3fb7061ebaa0493e896b9868208dde06ffdf\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract ResolverBase is ERC165 {\\n    function isAuthorised(bytes32 node) internal virtual view returns(bool);\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node));\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xda95c503bb8d3ad8ebd5c77eac75487d732858c84678eda57e30c72e63d216bf\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./IABIResolver.sol\\\";\\nimport \\\"../ResolverBase.sol\\\";\\n\\ninterface IABIResolver {\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0x37d037dd1cb59d7406ccd07d69e7206470c0aa3331c0efb92001769389bf4f2d\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(bytes32 indexed node, uint coinType, bytes newAddress);\\n\\n    function addr(bytes32 node, uint coinType) external view returns(bytes memory);\\n}\\n\",\"keccak256\":\"0x20717682fa28eb1755a3b6ade738c8e0239c1cc393579058d4c3ffaca238c04b\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xd95cd77684ba5752c428d7dceb4ecc6506ac94f4fbb910489637eb68dcd8e366\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n    event DNSRecordChanged(bytes32 indexed node, bytes name, uint16 resource, bytes record);\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n    // DNSZoneCleared is emitted whenever a given node's zone information is cleared.\\n    event DNSZoneCleared(bytes32 indexed node);\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(bytes32 node, bytes32 name, uint16 resource) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x640992fd5ad915a67712e2343ea0b8c5c0b88ea2646ff6bb713d448bef6ebfb5\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n    event DNSZonehashChanged(bytes32 indexed node, bytes lastzonehash, bytes zonehash);\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x3b3ca51ab4dcc4eee417bf1ffa54e10d9cf6a30d8f0e3722915965b06355ecb4\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n    function resolve(bytes memory name, bytes memory data)\\n        external\\n        view\\n        returns (bytes memory, address);\\n}\\n\",\"keccak256\":\"0x0a586a1725cdc5f90f2e302c620a4a033adfc87e49bbcc5a43604ba579bce7a7\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IInterfaceResolver {\\n    event InterfaceChanged(bytes32 indexed node, bytes4 indexed interfaceID, address implementer);\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The ENS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc2673ebfb678b4c2730bff0434daf3a974d9ee0696c4adf533b41802f291745d\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IPubkeyResolver {\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x69748947093dd2fda9ddcebd0adf19a6d1e7600df1d4b1462a0417156caddca7\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(bytes32 node, string calldata key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x36a6602f2d76f373c5e1dcded0c87e1d3ab5180dbbbea7aa2a8d0e9a36273e38\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0x6b3f2e56e5ad1f72b32a0bd4edbfabe0c14160df307b2bb4a64e3af99623dc96\"},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x9ceac6c134cbbeac2d7c1e004f633bf1fefbb153038fe14528f333d0b274ec19\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2d8cce2900ea5e213b5728ac6d02c139a5be5a112b12b9a187e042fc1134f560\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x17cd2011df84b69e70740bbfe6f3a4a80850186782db26c8ffa701b0b50f2526\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xca92905e1626e8567483de21bc1208284865ed7be71d54ca320a140ac25fd290\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/safe-contracts/contracts/base/GuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\ninterface Guard is IERC165 {\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    function checkAfterExecution(bytes32 txHash, bool success) external;\\n}\\n\\nabstract contract BaseGuard is Guard {\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(Guard).interfaceId || // 0xe6d7a83a\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n}\\n\\n/// @title Fallback Manager - A contract that manages fallback calls made to this contract\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract GuardManager is SelfAuthorized {\\n    event ChangedGuard(address guard);\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    /// @dev Set a guard that checks transactions before execution\\n    /// @param guard The address of the guard to be used or the 0 address to disable the guard\\n    function setGuard(address guard) external authorized {\\n        if (guard != address(0)) {\\n            require(Guard(guard).supportsInterface(type(Guard).interfaceId), \\\"GS300\\\");\\n        }\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, guard)\\n        }\\n        emit ChangedGuard(guard);\\n    }\\n\\n    function getGuard() internal view returns (address guard) {\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            guard := sload(slot)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7496e28d7fb5b729f68f95db2ec9c54352ade263d51a3dcc7d2ac13edcae5508\",\"license\":\"LGPL-3.0-only\"},\"lib/safe-contracts/contracts/common/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Enum - Collection of enums\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Enum {\\n    enum Operation {Call, DelegateCall}\\n}\\n\",\"keccak256\":\"0x473e45b1a5cc47be494b0e123c9127f0c11c1e0992a321ae5a644c0bfdb2c14f\",\"license\":\"LGPL-3.0-only\"},\"lib/safe-contracts/contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title SelfAuthorized - authorizes current contract to perform actions\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract SelfAuthorized {\\n    function requireSelfCall() private view {\\n        require(msg.sender == address(this), \\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x59d36efca578b75541a776f62a0d0ef03712fc27b6647c3915c14b572106d7bc\",\"license\":\"LGPL-3.0-only\"},\"lib/safe-contracts/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5c64c2e071245db8fe3ea8b94f73c5a8de236933858ae240348d502433a9d178\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes)": {
        "params": {
          "data": "Passes a flag for an initial creation event",
          "from": "The address sending the membership token",
          "ids": "An array of membership token ids to be transfered",
          "operator": "The address that initiated the action",
          "to": "The address recieveing the membership token"
        }
      },
      "checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)": {
        "details": "This will be called by the safe at execution time time _param to Destination address of Safe transaction. _param value Ether value of Safe transaction.",
        "params": {
          "data": "Data payload of Safe transaction. _param operation Operation type of Safe transaction. _param safeTxGas Gas that should be used for the Safe transaction. _param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund) _param gasPrice Gas price that should be used for the payment calculation. _param gasToken Token address (or 0 if ETH) that is used for the payment. _param refundReceiver Address of receiver of gas payment (or 0 if tx.origin). _param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v}) _param msgSender Account executing safe transaction"
        }
      },
      "constructor": {
        "details": "Will instantiate safe teller with gnosis master and proxy addresses",
        "params": {
          "_controllerRegistry": "The address of the ControllerRegistry contract",
          "_gnosisMasterAddress": "The gnosis master address",
          "_memberToken": "The address of the MemberToken contract",
          "_proxyFactoryAddress": "The proxy factory address"
        }
      },
      "createPod(address[],uint256,address,bytes32,string,uint256,string)": {
        "params": {
          "_admin": "The address of the pod admin",
          "_ensString": "string of pod ens name (i.e.'mypod.pod.xyz')",
          "_label": "label hash of pod name (i.e labelhash('mypod'))",
          "_members": "The addresses of the members of the pod",
          "threshold": "The number of members that are required to sign a transaction"
        }
      },
      "createPodWithSafe(address,address,bytes32,string,uint256,string)": {
        "details": "Used to create a pod with an existing safeWill automatically distribute membership NFTs to current safe members",
        "params": {
          "_admin": "The address of the pod admin",
          "_ensString": "string of pod ens name (i.e.'mypod.pod.xyz')",
          "_label": "label hash of pod name (i.e labelhash('mypod'))",
          "_safe": "The address of existing safe"
        }
      },
      "ejectSafe(uint256,bytes32,address)": {
        "params": {
          "label": "- labelhash of pod ENS name, i.e., `labelhash(\"mypod\")`",
          "podId": "- ID of pod being ejected",
          "previousModule": "- previous module"
        }
      },
      "migratePodController(uint256,address,address)": {
        "details": "This will nullify all pod state on this controllerUpdate state on _newControllerUpdate controller to _newController in Safe and MemberToken",
        "params": {
          "_newController": "The address of the new pod controller",
          "_podId": "The id number of the pod",
          "_prevModule": "The module that points to the orca module in the safe's ModuleManager linked list"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverSafe(address[],uint256,uint256)": {
        "params": {
          "members": "The addresses of the members of the pod as it was originally created.",
          "podId": "- Pod ID of safe you are trying to recreate",
          "threshold": "The number of members that are required to sign a transaction"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setPodModuleLock(uint256,bool)": {
        "details": "Allows admin to unlock the safe modules and allow them to be edited by members",
        "params": {
          "_isLocked": "true - pod modules cannot be added/removed",
          "_podId": "The id number of the pod"
        }
      },
      "setPodTransferLock(uint256,bool)": {
        "params": {
          "_isTransferLocked": "The address of the new pod admin",
          "_podId": "The id number of the pod"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePodAdmin(uint256,address)": {
        "params": {
          "_newAdmin": "The address of the new pod admin",
          "_podId": "The id number of the pod"
        }
      },
      "updatePodState(uint256,address,address)": {
        "details": "This is called by another version of controller to migrate a pod to this versionWill only accept calls from registered controllersCan only be called once.",
        "params": {
          "_podAdmin": "The address of the pod admin",
          "_podId": "The id number of the pod",
          "_safeAddress": "The address of the safe"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ejectSafe(uint256,bytes32,address)": {
        "notice": "Ejects a safe from the Orca ecosystem. Also handles clean up for safes that have already been ejected. Note that the reverse registry entry cannot be cleaned up if the safe has already been ejected."
      },
      "recoverSafe(address[],uint256,uint256)": {
        "notice": "Uses CREATE2 to replicate a given safe on a new network."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2645,
        "contract": "contracts/ControllerV1.sol:ControllerV1",
        "label": "areModulesLocked",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1715,
        "contract": "contracts/ControllerV1.sol:ControllerV1",
        "label": "BURN_SYNC_FLAG",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 5752,
        "contract": "contracts/ControllerV1.sol:ControllerV1",
        "label": "_owner",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 144,
        "contract": "contracts/ControllerV1.sol:ControllerV1",
        "label": "podEnsRegistrar",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPodEnsRegistrar)3469"
      },
      {
        "astId": 151,
        "contract": "contracts/ControllerV1.sol:ControllerV1",
        "label": "safeToPodId",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 156,
        "contract": "contracts/ControllerV1.sol:ControllerV1",
        "label": "podIdToSafe",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 160,
        "contract": "contracts/ControllerV1.sol:ControllerV1",
        "label": "podAdmin",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 164,
        "contract": "contracts/ControllerV1.sol:ControllerV1",
        "label": "isTransferLocked",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPodEnsRegistrar)3469": {
        "encoding": "inplace",
        "label": "contract IPodEnsRegistrar",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}