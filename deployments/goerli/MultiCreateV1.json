{
  "address": "0x98133D3bCD36bd3212D5C8146d43a2d356a5c8C0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "contract IControllerV1",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address[][]",
          "name": "_members",
          "type": "address[][]"
        },
        {
          "internalType": "uint256[]",
          "name": "_thresholds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_admins",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_labels",
          "type": "bytes32[]"
        },
        {
          "internalType": "string[]",
          "name": "_ensStrings",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_imageUrls",
          "type": "string[]"
        }
      ],
      "name": "createPods",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb1ec1142d5d30b98077591c0ecfb0d2ad0ce15714c11624e5d38ff4e2116ab20",
  "receipt": {
    "to": null,
    "from": "0x3f4e2cFE11Aa607570E0Aee7AC74fbff9633fa8E",
    "contractAddress": "0x98133D3bCD36bd3212D5C8146d43a2d356a5c8C0",
    "transactionIndex": 0,
    "gasUsed": "869295",
    "logsBloom": "0x
    "blockHash": "0x2558d69a90f7e6858c838418ba7f949c1e0c2ec7d8b19984d255fffbfd0abf38",
    "transactionHash": "0xb1ec1142d5d30b98077591c0ecfb0d2ad0ce15714c11624e5d38ff4e2116ab20",
    "logs": [],
    "blockNumber": 7764142,
    "cumulativeGasUsed": "869295",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xeBA322a1EAb019fA66DE1aD5015bDa37734fdCbc"
  ],
  "numDeployments": 1,
  "solcInputHash": "6cd41270e885ec1d9e9690e88dbd3747",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IControllerV1\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address[][]\",\"name\":\"_members\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"_thresholds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_labels\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"_ensStrings\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_imageUrls\",\"type\":\"string[]\"}],\"name\":\"createPods\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultiCreateV1.sol\":\"MultiCreateV1\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363635363932303932353331\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/MultiCreateV1.sol\":{\"content\":\"pragma solidity ^0.8.7;\\nimport \\\"./interfaces/IControllerV1.sol\\\";\\nimport \\\"./interfaces/IMemberToken.sol\\\";\\n\\n/* solhint-disable indent */\\n\\ncontract MultiCreateV1 {\\n    IMemberToken immutable memberToken;\\n\\n    constructor(address _memberToken) {\\n        memberToken = IMemberToken(_memberToken);\\n    }\\n\\n    struct AdminPointer {\\n        uint256 podId;\\n        address pointer;\\n    }\\n\\n    function createPods(\\n        IControllerV1 _controller,\\n        address[][] memory _members,\\n        uint256[] calldata _thresholds,\\n        address[] memory _admins,\\n        bytes32[] memory _labels,\\n        string[] memory _ensStrings,\\n        string[] memory _imageUrls\\n    ) public returns (address[] memory) {\\n        uint256 numPods = _thresholds.length;\\n        require(_members.length == numPods, \\\"incorrect members array\\\");\\n        require(_labels.length == numPods, \\\"incorrect labels array\\\");\\n        require(_ensStrings.length == numPods, \\\"incorrect ensStrings array\\\");\\n        require(_imageUrls.length == numPods, \\\"incorrect imageUrls array\\\");\\n\\n        uint256 nextPodId = memberToken.getNextAvailablePodId();\\n\\n        /*\\n            When creating multiple pods at the same time, there is a case where one pod may be a dependancy of another\\n            createPods -> PodA, PodB, PodC\\n            PodB.members[address(0x1337), address(PodA) // doesn't exist yet]\\n            since PodA doesn't exist at create time we need a placeholder\\n            \\n            when deploying the array of pods we use newPods as a cache \\n            as each pod gets deployed we add the address to newPods\\n            newPods = [address(0), address(PodA)];\\n            PodB.members[address(0x1337), address(1) // we know to check the cache]\\n\\n            because we can't rely on address(0) we have to index the cache at 1\\n        */\\n\\n        // 1 indexing to avoid relying on address(0)\\n        address[] memory newPods = new address[](numPods + 1);\\n        AdminPointer[] memory tempAdmin = new AdminPointer[](numPods + 1);\\n\\n        for (uint256 i = 0; i < numPods; i++) {\\n            // if the numerical version of admin address is less than numPods + 1 and not address(0) its a pointer\\n            if (\\n                uint256(uint160(_admins[i])) <= numPods + 1 &&\\n                _admins[i] != address(0)\\n            ) {\\n                // store the admin pointer\\n                tempAdmin[i] = AdminPointer(nextPodId + i, _admins[i]);\\n                // temperarily overwrite admin with this address\\n                _admins[i] = address(this);\\n            }\\n\\n            for (uint256 j = 0; j < _members[i].length; j++) {\\n                // if the numerical version of member address is less than numPods + 1 its a pointer\\n                if (uint256(uint160(_members[i][j])) <= numPods + 1) {\\n                    // pointer must be under the current pod index\\n                    require(\\n                        uint256(uint160(_members[i][j])) < i + 1,\\n                        \\\"Member dependency bad ordering\\\"\\n                    );\\n                    // overwrite member with new pod address\\n                    _members[i][j] = newPods[uint256(uint160(_members[i][j]))];\\n                }\\n            }\\n\\n            _controller.createPod(\\n                _members[i],\\n                _thresholds[i],\\n                _admins[i],\\n                _labels[i],\\n                _ensStrings[i],\\n                nextPodId + i,\\n                _imageUrls[i]\\n            );\\n            // store new pods with 1 index\\n            newPods[i + 1] = _controller.podIdToSafe(nextPodId + (i));\\n        }\\n\\n        // iterate through all of the stored admin pointers and transfer admin to the destination pod\\n        for (uint256 i = 0; i < tempAdmin.length; i++) {\\n            AdminPointer memory adminPointer = tempAdmin[i];\\n            // if pointer is set\\n            if (adminPointer.pointer != address(0)) {\\n                _controller.updatePodAdmin(\\n                    adminPointer.podId,\\n                    newPods[uint256(uint160(adminPointer.pointer))]\\n                );\\n            }\\n        }\\n\\n        return newPods;\\n    }\\n}\\n\",\"keccak256\":\"0x95109899a5ebe90bfa870ff83f2cd4d56f3e8f1fac2455ff4d470dd481dca6df\"},\"contracts/interfaces/IControllerBase.sol\":{\"content\":\"pragma solidity ^0.8.7;\\n\\ninterface IControllerBase {\\n    /**\\n     * @param operator The account address that initiated the action\\n     * @param from The account address sending the membership token\\n     * @param to The account address recieving the membership token\\n     * @param ids An array of membership token ids to be transfered\\n     * @param amounts The amount of each membership token type to transfer\\n     * @param data Arbitrary data\\n     */\\n    function beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n\\n    function updatePodState(\\n        uint256 _podId,\\n        address _podAdmin,\\n        address _safeAddress\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe5742d76ed6922a5d1cae269adf46b2da542bbe54d34bb62af77d81f9ce512e0\"},\"contracts/interfaces/IControllerV1.sol\":{\"content\":\"pragma solidity ^0.8.7;\\n\\nimport \\\"./IControllerBase.sol\\\";\\n\\ninterface IControllerV1 is IControllerBase {\\n    function updatePodEnsRegistrar(address _podEnsRegistrar) external;\\n\\n    /**\\n     * @param _members The addresses of the members of the pod\\n     * @param threshold The number of members that are required to sign a transaction\\n     * @param _admin The address of the pod admin\\n     * @param _label label hash of pod name (i.e labelhash('mypod'))\\n     * @param _ensString string of pod ens name (i.e.'mypod.pod.xyz')\\n     */\\n    function createPod(\\n        address[] memory _members,\\n        uint256 threshold,\\n        address _admin,\\n        bytes32 _label,\\n        string memory _ensString,\\n        uint256 expectedPodId,\\n        string memory _imageUrl\\n    ) external;\\n\\n    /**\\n     * @dev Used to create a pod with an existing safe\\n     * @dev Will automatically distribute membership NFTs to current safe members\\n     * @param _admin The address of the pod admin\\n     * @param _safe The address of existing safe\\n     * @param _label label hash of pod name (i.e labelhash('mypod'))\\n     * @param _ensString string of pod ens name (i.e.'mypod.pod.xyz')\\n     */\\n    function createPodWithSafe(\\n        address _admin,\\n        address _safe,\\n        bytes32 _label,\\n        string memory _ensString,\\n        uint256 expectedPodId,\\n        string memory _imageUrl\\n    ) external;\\n\\n    function podIdToSafe(uint256 _podId) external view returns (address);\\n\\n    /**\\n     * @dev Allows admin to unlock the safe modules and allow them to be edited by members\\n     * @param _podId The id number of the pod\\n     * @param _isLocked true - pod modules cannot be added/removed\\n     */\\n    function setPodModuleLock(uint256 _podId, bool _isLocked) external;\\n\\n    /**\\n     * @param _podId The id number of the pod\\n     * @param _isTransferLocked The address of the new pod admin\\n     */\\n    function setPodTransferLock(uint256 _podId, bool _isTransferLocked)\\n        external;\\n\\n    /**\\n     * @param _podId The id number of the pod\\n     * @param _newAdmin The address of the new pod admin\\n     */\\n    function updatePodAdmin(uint256 _podId, address _newAdmin) external;\\n\\n    /**\\n     * @dev This will nullify all pod state on this controller\\n     * @dev Update state on _newController\\n     * @dev Update controller to _newController in Safe and MemberToken\\n     * @param _podId The id number of the pod\\n     * @param _newController The address of the new pod controller\\n     * @param _prevModule The module that points to the orca module in the safe's ModuleManager linked list\\n     */\\n    function migratePodController(\\n        uint256 _podId,\\n        address _newController,\\n        address _prevModule\\n    ) external;\\n\\n    function ejectSafe(\\n        uint256 podId,\\n        bytes32 label,\\n        address previousModule\\n    ) external;\\n}\\n\",\"keccak256\":\"0x04a6cd222810362108bec320004d9695ecaa8fea81d8df1e301b0d0d2a36a695\"},\"contracts/interfaces/IMemberToken.sol\":{\"content\":\"pragma solidity ^0.8.7;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface IMemberToken is IERC1155 {\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Indicates weither any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) external view returns (bool);\\n\\n    function getNextAvailablePodId() external view returns (uint256);\\n\\n    /**\\n     * @param _podId The pod id number\\n     * @param _newController The address of the new controller\\n     */\\n    function migrateMemberController(uint256 _podId, address _newController)\\n        external;\\n\\n    /**\\n     * @param _account The account address to transfer the membership token to\\n     * @param _id The membership token id to mint\\n     * @param data Arbitrary data\\n     */\\n    function mint(\\n        address _account,\\n        uint256 _id,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @param _accounts The account addresses to transfer the membership tokens to\\n     * @param _id The membership token id to mint\\n     * @param data Arbitrary data\\n     */\\n    function mintSingleBatch(\\n        address[] memory _accounts,\\n        uint256 _id,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @param _account The account address holding the membership token to destroy\\n     * @param _id The id of the membership token to destroy\\n     */\\n    function burn(address _account, uint256 _id) external;\\n\\n    function burnSingleBatch(address[] memory _accounts, uint256 _id) external;\\n\\n    function createPod(address[] memory _accounts, bytes memory data)\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xc84f47034f342b2ed8f777c06d746ce0d287c418bf1ee4c5ab8449de27dffebf\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2d8cce2900ea5e213b5728ac6d02c139a5be5a112b12b9a187e042fc1134f560\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610f4e380380610f4e83398101604081905261002f91610044565b60601b6001600160601b031916608052610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b60805160601c610ebc61009260003960006101a70152610ebc6000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80639c4773a514610030575b600080fd5b61004361003e366004610b73565b610059565b6040516100509190610d29565b60405180910390f35b8651606090869081146100b35760405162461bcd60e51b815260206004820152601760248201527f696e636f7272656374206d656d6265727320617272617900000000000000000060448201526064015b60405180910390fd5b808551146101035760405162461bcd60e51b815260206004820152601660248201527f696e636f7272656374206c6162656c732061727261790000000000000000000060448201526064016100aa565b808451146101535760405162461bcd60e51b815260206004820152601a60248201527f696e636f727265637420656e73537472696e677320617272617900000000000060448201526064016100aa565b808351146101a35760405162461bcd60e51b815260206004820152601960248201527f696e636f727265637420696d61676555726c732061727261790000000000000060448201526064016100aa565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635e9337026040518163ffffffff1660e01b815260040160206040518083038186803b1580156101fe57600080fd5b505afa158015610212573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102369190610c7f565b90506000610245836001610df9565b67ffffffffffffffff81111561025d5761025d610e58565b604051908082528060200260200182016040528015610286578160200160208202803683370190505b5090506000610296846001610df9565b67ffffffffffffffff8111156102ae576102ae610e58565b6040519080825280602002602001820160405280156102f357816020015b60408051808201909152600080825260208201528152602001906001900390816102cc5790505b50905060005b848110156107935761030c856001610df9565b8a828151811061031e5761031e610e42565b60200260200101516001600160a01b031611158015610369575060006001600160a01b03168a828151811061035557610355610e42565b60200260200101516001600160a01b031614155b1561040157604051806040016040528082866103859190610df9565b81526020018b838151811061039c5761039c610e42565b60200260200101516001600160a01b03168152508282815181106103c2576103c2610e42565b6020026020010181905250308a82815181106103e0576103e0610e42565b60200260200101906001600160a01b031690816001600160a01b0316815250505b60005b8d828151811061041657610416610e42565b6020026020010151518110156105b957610431866001610df9565b8e838151811061044357610443610e42565b6020026020010151828151811061045c5761045c610e42565b60200260200101516001600160a01b0316116105a75761047d826001610df9565b8e838151811061048f5761048f610e42565b602002602001015182815181106104a8576104a8610e42565b60200260200101516001600160a01b0316106105065760405162461bcd60e51b815260206004820152601e60248201527f4d656d62657220646570656e64656e637920626164206f72646572696e67000060448201526064016100aa565b838e838151811061051957610519610e42565b6020026020010151828151811061053257610532610e42565b60200260200101516001600160a01b03168151811061055357610553610e42565b60200260200101518e838151811061056d5761056d610e42565b6020026020010151828151811061058657610586610e42565b60200260200101906001600160a01b031690816001600160a01b0316815250505b806105b181610e11565b915050610404565b508d6001600160a01b0316637d49f1db8e83815181106105db576105db610e42565b60200260200101518e8e858181106105f5576105f5610e42565b905060200201358d858151811061060e5761060e610e42565b60200260200101518d868151811061062857610628610e42565b60200260200101518d878151811061064257610642610e42565b6020026020010151878b6106569190610df9565b8e898151811061066857610668610e42565b60200260200101516040518863ffffffff1660e01b81526004016106929796959493929190610d3c565b600060405180830381600087803b1580156106ac57600080fd5b505af11580156106c0573d6000803e3d6000fd5b505050508d6001600160a01b0316638d092f5d82866106df9190610df9565b6040518263ffffffff1660e01b81526004016106fd91815260200190565b60206040518083038186803b15801561071557600080fd5b505afa158015610729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074d9190610b4f565b83610759836001610df9565b8151811061076957610769610e42565b6001600160a01b03909216602092830291909101909101528061078b81610e11565b9150506102f9565b5060005b815181101561088c5760008282815181106107b4576107b4610e42565b6020026020010151905060006001600160a01b031681602001516001600160a01b031614610879578e6001600160a01b031663346e5c4882600001518684602001516001600160a01b03168151811061080f5761080f610e42565b60200260200101516040518363ffffffff1660e01b81526004016108469291909182526001600160a01b0316602082015260400190565b600060405180830381600087803b15801561086057600080fd5b505af1158015610874573d6000803e3d6000fd5b505050505b508061088481610e11565b915050610797565b50909c9b505050505050505050505050565b600082601f8301126108af57600080fd5b813560206108c46108bf83610dd5565b610da4565b80838252828201915082860187848660051b89010111156108e457600080fd5b60005b8581101561090c5781356108fa81610e6e565b845292840192908401906001016108e7565b5090979650505050505050565b600082601f83011261092a57600080fd5b8135602061093a6108bf83610dd5565b80838252828201915082860187848660051b890101111561095a57600080fd5b6000805b8681101561099d57823567ffffffffffffffff81111561097c578283fd5b61098a8b88838d010161089e565b865250938501939185019160010161095e565b509198975050505050505050565b600082601f8301126109bc57600080fd5b813560206109cc6108bf83610dd5565b80838252828201915082860187848660051b89010111156109ec57600080fd5b60005b8581101561090c578135845292840192908401906001016109ef565b6000601f8381840112610a1d57600080fd5b82356020610a2d6108bf83610dd5565b80838252828201915082870188848660051b8a01011115610a4d57600080fd5b60005b85811015610ae557813567ffffffffffffffff80821115610a7057600080fd5b818b0191508b603f830112610a8457600080fd5b86820135604082821115610a9a57610a9a610e58565b610aab828c01601f19168a01610da4565b92508183528d81838601011115610ac157600080fd5b818185018a8501375060009082018801528552509284019290840190600101610a50565b509098975050505050505050565b60008083601f840112610b0557600080fd5b50813567ffffffffffffffff811115610b1d57600080fd5b6020830191508360208260051b8501011115610b3857600080fd5b9250929050565b8035610b4a81610e6e565b919050565b600060208284031215610b6157600080fd5b8151610b6c81610e6e565b9392505050565b60008060008060008060008060e0898b031215610b8f57600080fd5b610b9889610b3f565b9750602089013567ffffffffffffffff80821115610bb557600080fd5b610bc18c838d01610919565b985060408b0135915080821115610bd757600080fd5b610be38c838d01610af3565b909850965060608b0135915080821115610bfc57600080fd5b610c088c838d0161089e565b955060808b0135915080821115610c1e57600080fd5b610c2a8c838d016109ab565b945060a08b0135915080821115610c4057600080fd5b610c4c8c838d01610a0b565b935060c08b0135915080821115610c6257600080fd5b50610c6f8b828c01610a0b565b9150509295985092959890939650565b600060208284031215610c9157600080fd5b5051919050565b600081518084526020808501945080840160005b83811015610cd15781516001600160a01b031687529582019590820190600101610cac565b509495945050505050565b6000815180845260005b81811015610d0257602081850181015186830182015201610ce6565b81811115610d14576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610b6c6020830184610c98565b60e081526000610d4f60e083018a610c98565b8860208401526001600160a01b03881660408401528660608401528281036080840152610d7c8187610cdc565b90508460a084015282810360c0840152610d968185610cdc565b9a9950505050505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610dcd57610dcd610e58565b604052919050565b600067ffffffffffffffff821115610def57610def610e58565b5060051b60200190565b60008219821115610e0c57610e0c610e2c565b500190565b6000600019821415610e2557610e25610e2c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e8357600080fd5b5056fea26469706673582212207e7cb3b35a2f955b94570e7cd955c379273c4a84db1ca00068f9db6ebd8ce83e64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80639c4773a514610030575b600080fd5b61004361003e366004610b73565b610059565b6040516100509190610d29565b60405180910390f35b8651606090869081146100b35760405162461bcd60e51b815260206004820152601760248201527f696e636f7272656374206d656d6265727320617272617900000000000000000060448201526064015b60405180910390fd5b808551146101035760405162461bcd60e51b815260206004820152601660248201527f696e636f7272656374206c6162656c732061727261790000000000000000000060448201526064016100aa565b808451146101535760405162461bcd60e51b815260206004820152601a60248201527f696e636f727265637420656e73537472696e677320617272617900000000000060448201526064016100aa565b808351146101a35760405162461bcd60e51b815260206004820152601960248201527f696e636f727265637420696d61676555726c732061727261790000000000000060448201526064016100aa565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635e9337026040518163ffffffff1660e01b815260040160206040518083038186803b1580156101fe57600080fd5b505afa158015610212573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102369190610c7f565b90506000610245836001610df9565b67ffffffffffffffff81111561025d5761025d610e58565b604051908082528060200260200182016040528015610286578160200160208202803683370190505b5090506000610296846001610df9565b67ffffffffffffffff8111156102ae576102ae610e58565b6040519080825280602002602001820160405280156102f357816020015b60408051808201909152600080825260208201528152602001906001900390816102cc5790505b50905060005b848110156107935761030c856001610df9565b8a828151811061031e5761031e610e42565b60200260200101516001600160a01b031611158015610369575060006001600160a01b03168a828151811061035557610355610e42565b60200260200101516001600160a01b031614155b1561040157604051806040016040528082866103859190610df9565b81526020018b838151811061039c5761039c610e42565b60200260200101516001600160a01b03168152508282815181106103c2576103c2610e42565b6020026020010181905250308a82815181106103e0576103e0610e42565b60200260200101906001600160a01b031690816001600160a01b0316815250505b60005b8d828151811061041657610416610e42565b6020026020010151518110156105b957610431866001610df9565b8e838151811061044357610443610e42565b6020026020010151828151811061045c5761045c610e42565b60200260200101516001600160a01b0316116105a75761047d826001610df9565b8e838151811061048f5761048f610e42565b602002602001015182815181106104a8576104a8610e42565b60200260200101516001600160a01b0316106105065760405162461bcd60e51b815260206004820152601e60248201527f4d656d62657220646570656e64656e637920626164206f72646572696e67000060448201526064016100aa565b838e838151811061051957610519610e42565b6020026020010151828151811061053257610532610e42565b60200260200101516001600160a01b03168151811061055357610553610e42565b60200260200101518e838151811061056d5761056d610e42565b6020026020010151828151811061058657610586610e42565b60200260200101906001600160a01b031690816001600160a01b0316815250505b806105b181610e11565b915050610404565b508d6001600160a01b0316637d49f1db8e83815181106105db576105db610e42565b60200260200101518e8e858181106105f5576105f5610e42565b905060200201358d858151811061060e5761060e610e42565b60200260200101518d868151811061062857610628610e42565b60200260200101518d878151811061064257610642610e42565b6020026020010151878b6106569190610df9565b8e898151811061066857610668610e42565b60200260200101516040518863ffffffff1660e01b81526004016106929796959493929190610d3c565b600060405180830381600087803b1580156106ac57600080fd5b505af11580156106c0573d6000803e3d6000fd5b505050508d6001600160a01b0316638d092f5d82866106df9190610df9565b6040518263ffffffff1660e01b81526004016106fd91815260200190565b60206040518083038186803b15801561071557600080fd5b505afa158015610729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074d9190610b4f565b83610759836001610df9565b8151811061076957610769610e42565b6001600160a01b03909216602092830291909101909101528061078b81610e11565b9150506102f9565b5060005b815181101561088c5760008282815181106107b4576107b4610e42565b6020026020010151905060006001600160a01b031681602001516001600160a01b031614610879578e6001600160a01b031663346e5c4882600001518684602001516001600160a01b03168151811061080f5761080f610e42565b60200260200101516040518363ffffffff1660e01b81526004016108469291909182526001600160a01b0316602082015260400190565b600060405180830381600087803b15801561086057600080fd5b505af1158015610874573d6000803e3d6000fd5b505050505b508061088481610e11565b915050610797565b50909c9b505050505050505050505050565b600082601f8301126108af57600080fd5b813560206108c46108bf83610dd5565b610da4565b80838252828201915082860187848660051b89010111156108e457600080fd5b60005b8581101561090c5781356108fa81610e6e565b845292840192908401906001016108e7565b5090979650505050505050565b600082601f83011261092a57600080fd5b8135602061093a6108bf83610dd5565b80838252828201915082860187848660051b890101111561095a57600080fd5b6000805b8681101561099d57823567ffffffffffffffff81111561097c578283fd5b61098a8b88838d010161089e565b865250938501939185019160010161095e565b509198975050505050505050565b600082601f8301126109bc57600080fd5b813560206109cc6108bf83610dd5565b80838252828201915082860187848660051b89010111156109ec57600080fd5b60005b8581101561090c578135845292840192908401906001016109ef565b6000601f8381840112610a1d57600080fd5b82356020610a2d6108bf83610dd5565b80838252828201915082870188848660051b8a01011115610a4d57600080fd5b60005b85811015610ae557813567ffffffffffffffff80821115610a7057600080fd5b818b0191508b603f830112610a8457600080fd5b86820135604082821115610a9a57610a9a610e58565b610aab828c01601f19168a01610da4565b92508183528d81838601011115610ac157600080fd5b818185018a8501375060009082018801528552509284019290840190600101610a50565b509098975050505050505050565b60008083601f840112610b0557600080fd5b50813567ffffffffffffffff811115610b1d57600080fd5b6020830191508360208260051b8501011115610b3857600080fd5b9250929050565b8035610b4a81610e6e565b919050565b600060208284031215610b6157600080fd5b8151610b6c81610e6e565b9392505050565b60008060008060008060008060e0898b031215610b8f57600080fd5b610b9889610b3f565b9750602089013567ffffffffffffffff80821115610bb557600080fd5b610bc18c838d01610919565b985060408b0135915080821115610bd757600080fd5b610be38c838d01610af3565b909850965060608b0135915080821115610bfc57600080fd5b610c088c838d0161089e565b955060808b0135915080821115610c1e57600080fd5b610c2a8c838d016109ab565b945060a08b0135915080821115610c4057600080fd5b610c4c8c838d01610a0b565b935060c08b0135915080821115610c6257600080fd5b50610c6f8b828c01610a0b565b9150509295985092959890939650565b600060208284031215610c9157600080fd5b5051919050565b600081518084526020808501945080840160005b83811015610cd15781516001600160a01b031687529582019590820190600101610cac565b509495945050505050565b6000815180845260005b81811015610d0257602081850181015186830182015201610ce6565b81811115610d14576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610b6c6020830184610c98565b60e081526000610d4f60e083018a610c98565b8860208401526001600160a01b03881660408401528660608401528281036080840152610d7c8187610cdc565b90508460a084015282810360c0840152610d968185610cdc565b9a9950505050505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610dcd57610dcd610e58565b604052919050565b600067ffffffffffffffff821115610def57610def610e58565b5060051b60200190565b60008219821115610e0c57610e0c610e2c565b500190565b6000600019821415610e2557610e25610e2c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e8357600080fd5b5056fea26469706673582212207e7cb3b35a2f955b94570e7cd955c379273c4a84db1ca00068f9db6ebd8ce83e64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}