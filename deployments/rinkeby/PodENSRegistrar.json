{
  "address": "0x5f9Eae977Abb26D34963Ab5B304D064aBE8CdB65",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "ensAddr",
          "type": "address"
        },
        {
          "internalType": "contract Resolver",
          "name": "resolverAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reverseRegistrar",
          "type": "address"
        },
        {
          "internalType": "contract IControllerRegistry",
          "name": "controllerRegistryAddr",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "podSafe",
          "type": "address"
        }
      ],
      "name": "registerPod",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "setAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "setText",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfb6b54a7f115ea11a20730002c953c176e6c4c01a818fae9bad8808f5cd36864",
  "receipt": {
    "to": null,
    "from": "0x3f4e2cFE11Aa607570E0Aee7AC74fbff9633fa8E",
    "contractAddress": "0x5f9Eae977Abb26D34963Ab5B304D064aBE8CdB65",
    "transactionIndex": 49,
    "gasUsed": "1134370",
    "logsBloom": "0x
    "blockHash": "0xfb7debcb08b0c4c471f29d6e5a20c74f0f89cf54fd8d58dd50084e94054b9542",
    "transactionHash": "0xfb6b54a7f115ea11a20730002c953c176e6c4c01a818fae9bad8808f5cd36864",
    "logs": [
      {
        "transactionIndex": 49,
        "blockNumber": 9424395,
        "transactionHash": "0xfb6b54a7f115ea11a20730002c953c176e6c4c01a818fae9bad8808f5cd36864",
        "address": "0x5f9Eae977Abb26D34963Ab5B304D064aBE8CdB65",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003f4e2cfe11aa607570e0aee7ac74fbff9633fa8e"
        ],
        "data": "0x",
        "logIndex": 85,
        "blockHash": "0xfb7debcb08b0c4c471f29d6e5a20c74f0f89cf54fd8d58dd50084e94054b9542"
      }
    ],
    "blockNumber": 9424395,
    "cumulativeGasUsed": "6549463",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    "0x6F628b68b30Dc3c17f345c9dbBb1E483c2b7aE5c",
    "0x6F628b68b30Dc3c17f345c9dbBb1E483c2b7aE5c",
    "0xCf80fE424555B75c5ce7eF03D00c59c05DDd340A",
    "0xa74c8b4e0e15dcc91024ac3999fc5df0e6669b98308ddf55dee349ca1e642d08"
  ],
  "solcInputHash": "78757493a29ceb6d610721ade959dff6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"ensAddr\",\"type\":\"address\"},{\"internalType\":\"contract Resolver\",\"name\":\"resolverAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reverseRegistrar\",\"type\":\"address\"},{\"internalType\":\"contract IControllerRegistry\",\"name\":\"controllerRegistryAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"podSafe\",\"type\":\"address\"}],\"name\":\"registerPod\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"ensAddr\":\"The address of the ENS registry.\",\"node\":\"The node that this registrar administers.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"register(bytes32,address)\":{\"params\":{\"label\":\"The hash of the label to register.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor.\"},\"register(bytes32,address)\":{\"notice\":\"Register a name, or change the owner of an existing registration.\"}},\"notice\":\"A registrar that allocates subdomains to the first person to claim them.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ens/PodENSRegistrar.sol\":\"PodENSRegistrar\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\\n    function setResolver(bytes32 node, address resolver) external virtual;\\n    function setOwner(bytes32 node, address owner) external virtual;\\n    function setTTL(bytes32 node, uint64 ttl) external virtual;\\n    function setApprovalForAll(address operator, bool approved) external virtual;\\n    function owner(bytes32 node) external virtual view returns (address);\\n    function resolver(bytes32 node) external virtual view returns (address);\\n    function ttl(bytes32 node) external virtual view returns (uint64);\\n    function recordExists(bytes32 node) external virtual view returns (bool);\\n    function isApprovedForAll(address owner, address operator) external virtual view returns (bool);\\n}\\n\",\"keccak256\":\"0x942ef29bd7c0f62228aeb91879ddd1ba101f52a2162970d3e48adffa498f4483\"},\"@ensdomains/ens-contracts/contracts/resolvers/Resolver.sol\":{\"content\":\"pragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * A generic resolver interface which includes all the functions including the ones deprecated\\n */\\ninterface Resolver{\\n    event AddrChanged(bytes32 indexed node, address a);\\n    event AddressChanged(bytes32 indexed node, uint coinType, bytes newAddress);\\n    event NameChanged(bytes32 indexed node, string name);\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n    /* Deprecated events */\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n\\n    function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\\n    function addr(bytes32 node) external view returns (address);\\n    function addr(bytes32 node, uint coinType) external view returns(bytes memory);\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n    function dnsrr(bytes32 node) external view returns (bytes memory);\\n    function name(bytes32 node) external view returns (string memory);\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n    function text(bytes32 node, string calldata key) external view returns (string memory);\\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\\n    function setAddr(bytes32 node, address addr) external;\\n    function setAddr(bytes32 node, uint coinType, bytes calldata a) external;\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\n    function setDnsrr(bytes32 node, bytes calldata data) external;\\n    function setName(bytes32 node, string calldata _name) external;\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\\n    function setText(bytes32 node, string calldata key, string calldata value) external;\\n    function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;\\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool);\\n    function multicall(bytes[] calldata data) external returns(bytes[] memory results);\\n\\n    /* Deprecated functions */\\n    function content(bytes32 node) external view returns (bytes32);\\n    function multihash(bytes32 node) external view returns (bytes memory);\\n    function setContent(bytes32 node, bytes32 hash) external;\\n    function setMultihash(bytes32 node, bytes calldata hash) external;\\n}\\n\",\"keccak256\":\"0x696c3b1e718aad7054ec75bc74b627c2bfea71b32fb1054ee021d0e079388275\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/ens/PodENSRegistrar.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/Resolver.sol\\\";\\nimport \\\"../interfaces/IControllerRegistry.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * A registrar that allocates subdomains to the first person to claim them.\\n */\\ncontract PodENSRegistrar is Ownable {\\n    ENS ens;\\n    Resolver resolver;\\n    address reverseRegistrar;\\n    IControllerRegistry controllerRegistry;\\n    bytes32 rootNode;\\n\\n    //TODO: add whitelist    \\n\\n    /**\\n     * Constructor.\\n     * @param ensAddr The address of the ENS registry.\\n     * @param node The node that this registrar administers.\\n     */\\n    constructor(ENS ensAddr, Resolver resolverAddr, address _reverseRegistrar, IControllerRegistry controllerRegistryAddr, bytes32 node) {\\n        ens = ensAddr;\\n        resolver = resolverAddr;\\n        controllerRegistry = controllerRegistryAddr;\\n        rootNode = node;\\n        reverseRegistrar = _reverseRegistrar;\\n    }\\n\\n    function registerPod(bytes32 label, address podSafe) public returns(address) {\\n\\n        bytes32 node = keccak256(abi.encodePacked(rootNode, label));\\n\\n        require(controllerRegistry.isRegistered(msg.sender), \\\"controller not registered\\\");\\n\\n        require(\\n            ens.owner(node) == address(0),\\n            \\\"label is already owned\\\"\\n        );\\n        \\n        _register(label, address(this));\\n\\n        resolver.setAddr(node, podSafe);\\n\\n        return address(reverseRegistrar);\\n    }\\n\\n\\n    /**\\n     * Register a name, or change the owner of an existing registration.\\n     * @param label The hash of the label to register.\\n     */\\n    function register(bytes32 label, address owner) public onlyOwner {\\n        _register(label, owner);\\n    }\\n\\n    /**\\n     * Register a name, or change the owner of an existing registration.\\n     * @param label The hash of the label to register.\\n     */\\n    function _register(bytes32 label, address owner) internal {\\n\\n        ens.setSubnodeRecord(\\n            rootNode,\\n            label,\\n            owner,\\n            address(resolver),\\n            0\\n        );\\n\\n    }\\n\\n    function setText(bytes32 node, string calldata key, string calldata value) public onlyOwner {\\n        resolver.setText(node, key, value);\\n    }\\n\\n    function setAddr(bytes32 node, address newAddress) public onlyOwner {\\n        resolver.setAddr(node, newAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x4b9639dbb8e68c8a888dc0419608cec936b50070a11e04eb38eb5134eb92e8bd\"},\"contracts/interfaces/IControllerRegistry.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\n\\ninterface IControllerRegistry{\\n\\n    /**\\n     * @param _controller Address to check if registered as a controller\\n     * @return Boolean representing if the address is a registered as a controller\\n     */\\n    function isRegistered(address _controller) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x02e7853f4677cafd67f4a486cea842929067ca7b764b468e54922180998d5c4c\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200151c3803806200151c8339818101604052810190620000379190620002ac565b620000576200004b6200016d60201b60201c565b6200017560201b60201c565b84600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060058190555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505062000435565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200024a81620003b3565b92915050565b6000815190506200026181620003cd565b92915050565b6000815190506200027881620003e7565b92915050565b6000815190506200028f8162000401565b92915050565b600081519050620002a6816200041b565b92915050565b600080600080600060a08688031215620002cb57620002ca620003ae565b5b6000620002db8882890162000267565b9550506020620002ee8882890162000295565b9450506040620003018882890162000239565b935050606062000314888289016200027e565b9250506080620003278882890162000250565b9150509295509295909350565b600062000341826200038e565b9050919050565b6000819050919050565b60006200035f8262000334565b9050919050565b6000620003738262000334565b9050919050565b6000620003878262000334565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b620003be8162000334565b8114620003ca57600080fd5b50565b620003d88162000348565b8114620003e457600080fd5b50565b620003f28162000352565b8114620003fe57600080fd5b50565b6200040c8162000366565b81146200041857600080fd5b50565b62000426816200037a565b81146200043257600080fd5b50565b6110d780620004456000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063ae3338591161005b578063ae333859146100c6578063d22057a9146100f6578063d5fa2b0014610112578063f2fde38b1461012e5761007d565b806310f13a8c14610082578063715018a61461009e5780638da5cb5b146100a8575b600080fd5b61009c60048036038101906100979190610b97565b61014a565b005b6100a6610262565b005b6100b06102ea565b6040516100bd9190610d55565b60405180910390f35b6100e060048036038101906100db9190610b57565b610313565b6040516100ed9190610d55565b60405180910390f35b610110600480360381019061010b9190610b57565b61060b565b005b61012c60048036038101906101279190610b57565b610695565b005b61014860048036038101906101439190610ad0565b6107a4565b005b61015261089c565b73ffffffffffffffffffffffffffffffffffffffff166101706102ea565b73ffffffffffffffffffffffffffffffffffffffff16146101c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101bd90610eb0565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166310f13a8c86868686866040518663ffffffff1660e01b8152600401610229959493929190610e07565b600060405180830381600087803b15801561024357600080fd5b505af1158015610257573d6000803e3d6000fd5b505050505050505050565b61026a61089c565b73ffffffffffffffffffffffffffffffffffffffff166102886102ea565b73ffffffffffffffffffffffffffffffffffffffff16146102de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d590610eb0565b60405180910390fd5b6102e860006108a4565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806005548460405160200161032b929190610d29565b604051602081830303815290604052805190602001209050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c3c5a547336040518263ffffffff1660e01b815260040161039e9190610d55565b60206040518083038186803b1580156103b657600080fd5b505afa1580156103ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ee9190610b2a565b61042d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042490610e50565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff1660e01b81526004016104a09190610d70565b60206040518083038186803b1580156104b857600080fd5b505afa1580156104cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f09190610afd565b73ffffffffffffffffffffffffffffffffffffffff1614610546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053d90610e90565b60405180910390fd5b6105508430610968565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5fa2b0082856040518363ffffffff1660e01b81526004016105ad929190610d8b565b600060405180830381600087803b1580156105c757600080fd5b505af11580156105db573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505092915050565b61061361089c565b73ffffffffffffffffffffffffffffffffffffffff166106316102ea565b73ffffffffffffffffffffffffffffffffffffffff1614610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e90610eb0565b60405180910390fd5b6106918282610968565b5050565b61069d61089c565b73ffffffffffffffffffffffffffffffffffffffff166106bb6102ea565b73ffffffffffffffffffffffffffffffffffffffff1614610711576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890610eb0565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5fa2b0083836040518363ffffffff1660e01b815260040161076e929190610d8b565b600060405180830381600087803b15801561078857600080fd5b505af115801561079c573d6000803e3d6000fd5b505050505050565b6107ac61089c565b73ffffffffffffffffffffffffffffffffffffffff166107ca6102ea565b73ffffffffffffffffffffffffffffffffffffffff1614610820576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081790610eb0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088790610e70565b60405180910390fd5b610899816108a4565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ef2c7f06005548484600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660006040518663ffffffff1660e01b81526004016109f0959493929190610db4565b600060405180830381600087803b158015610a0a57600080fd5b505af1158015610a1e573d6000803e3d6000fd5b505050505050565b600081359050610a358161105c565b92915050565b600081519050610a4a8161105c565b92915050565b600081519050610a5f81611073565b92915050565b600081359050610a748161108a565b92915050565b60008083601f840112610a9057610a8f610f6d565b5b8235905067ffffffffffffffff811115610aad57610aac610f68565b5b602083019150836001820283011115610ac957610ac8610f72565b5b9250929050565b600060208284031215610ae657610ae5610f7c565b5b6000610af484828501610a26565b91505092915050565b600060208284031215610b1357610b12610f7c565b5b6000610b2184828501610a3b565b91505092915050565b600060208284031215610b4057610b3f610f7c565b5b6000610b4e84828501610a50565b91505092915050565b60008060408385031215610b6e57610b6d610f7c565b5b6000610b7c85828601610a65565b9250506020610b8d85828601610a26565b9150509250929050565b600080600080600060608688031215610bb357610bb2610f7c565b5b6000610bc188828901610a65565b955050602086013567ffffffffffffffff811115610be257610be1610f77565b5b610bee88828901610a7a565b9450945050604086013567ffffffffffffffff811115610c1157610c10610f77565b5b610c1d88828901610a7a565b92509250509295509295909350565b610c3581610ee1565b82525050565b610c4481610eff565b82525050565b610c5b610c5682610eff565b610f5e565b82525050565b610c6a81610f3d565b82525050565b6000610c7c8385610ed0565b9350610c89838584610f4f565b610c9283610f81565b840190509392505050565b6000610caa601983610ed0565b9150610cb582610f92565b602082019050919050565b6000610ccd602683610ed0565b9150610cd882610fbb565b604082019050919050565b6000610cf0601683610ed0565b9150610cfb8261100a565b602082019050919050565b6000610d13602083610ed0565b9150610d1e82611033565b602082019050919050565b6000610d358285610c4a565b602082019150610d458284610c4a565b6020820191508190509392505050565b6000602082019050610d6a6000830184610c2c565b92915050565b6000602082019050610d856000830184610c3b565b92915050565b6000604082019050610da06000830185610c3b565b610dad6020830184610c2c565b9392505050565b600060a082019050610dc96000830188610c3b565b610dd66020830187610c3b565b610de36040830186610c2c565b610df06060830185610c2c565b610dfd6080830184610c61565b9695505050505050565b6000606082019050610e1c6000830188610c3b565b8181036020830152610e2f818688610c70565b90508181036040830152610e44818486610c70565b90509695505050505050565b60006020820190508181036000830152610e6981610c9d565b9050919050565b60006020820190508181036000830152610e8981610cc0565b9050919050565b60006020820190508181036000830152610ea981610ce3565b9050919050565b60006020820190508181036000830152610ec981610d06565b9050919050565b600082825260208201905092915050565b6000610eec82610f09565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000610f4882610f29565b9050919050565b82818337600083830152505050565b6000819050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f636f6e74726f6c6c6572206e6f74207265676973746572656400000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f6c6162656c20697320616c7265616479206f776e656400000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b61106581610ee1565b811461107057600080fd5b50565b61107c81610ef3565b811461108757600080fd5b50565b61109381610eff565b811461109e57600080fd5b5056fea264697066735822122088bbc7a427bded41edaa644b5da11f1350ff3cd035837c565ddf1ce3dbfb56af64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063ae3338591161005b578063ae333859146100c6578063d22057a9146100f6578063d5fa2b0014610112578063f2fde38b1461012e5761007d565b806310f13a8c14610082578063715018a61461009e5780638da5cb5b146100a8575b600080fd5b61009c60048036038101906100979190610b97565b61014a565b005b6100a6610262565b005b6100b06102ea565b6040516100bd9190610d55565b60405180910390f35b6100e060048036038101906100db9190610b57565b610313565b6040516100ed9190610d55565b60405180910390f35b610110600480360381019061010b9190610b57565b61060b565b005b61012c60048036038101906101279190610b57565b610695565b005b61014860048036038101906101439190610ad0565b6107a4565b005b61015261089c565b73ffffffffffffffffffffffffffffffffffffffff166101706102ea565b73ffffffffffffffffffffffffffffffffffffffff16146101c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101bd90610eb0565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166310f13a8c86868686866040518663ffffffff1660e01b8152600401610229959493929190610e07565b600060405180830381600087803b15801561024357600080fd5b505af1158015610257573d6000803e3d6000fd5b505050505050505050565b61026a61089c565b73ffffffffffffffffffffffffffffffffffffffff166102886102ea565b73ffffffffffffffffffffffffffffffffffffffff16146102de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d590610eb0565b60405180910390fd5b6102e860006108a4565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806005548460405160200161032b929190610d29565b604051602081830303815290604052805190602001209050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c3c5a547336040518263ffffffff1660e01b815260040161039e9190610d55565b60206040518083038186803b1580156103b657600080fd5b505afa1580156103ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ee9190610b2a565b61042d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042490610e50565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff1660e01b81526004016104a09190610d70565b60206040518083038186803b1580156104b857600080fd5b505afa1580156104cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f09190610afd565b73ffffffffffffffffffffffffffffffffffffffff1614610546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053d90610e90565b60405180910390fd5b6105508430610968565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5fa2b0082856040518363ffffffff1660e01b81526004016105ad929190610d8b565b600060405180830381600087803b1580156105c757600080fd5b505af11580156105db573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505092915050565b61061361089c565b73ffffffffffffffffffffffffffffffffffffffff166106316102ea565b73ffffffffffffffffffffffffffffffffffffffff1614610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e90610eb0565b60405180910390fd5b6106918282610968565b5050565b61069d61089c565b73ffffffffffffffffffffffffffffffffffffffff166106bb6102ea565b73ffffffffffffffffffffffffffffffffffffffff1614610711576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890610eb0565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5fa2b0083836040518363ffffffff1660e01b815260040161076e929190610d8b565b600060405180830381600087803b15801561078857600080fd5b505af115801561079c573d6000803e3d6000fd5b505050505050565b6107ac61089c565b73ffffffffffffffffffffffffffffffffffffffff166107ca6102ea565b73ffffffffffffffffffffffffffffffffffffffff1614610820576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081790610eb0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088790610e70565b60405180910390fd5b610899816108a4565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ef2c7f06005548484600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660006040518663ffffffff1660e01b81526004016109f0959493929190610db4565b600060405180830381600087803b158015610a0a57600080fd5b505af1158015610a1e573d6000803e3d6000fd5b505050505050565b600081359050610a358161105c565b92915050565b600081519050610a4a8161105c565b92915050565b600081519050610a5f81611073565b92915050565b600081359050610a748161108a565b92915050565b60008083601f840112610a9057610a8f610f6d565b5b8235905067ffffffffffffffff811115610aad57610aac610f68565b5b602083019150836001820283011115610ac957610ac8610f72565b5b9250929050565b600060208284031215610ae657610ae5610f7c565b5b6000610af484828501610a26565b91505092915050565b600060208284031215610b1357610b12610f7c565b5b6000610b2184828501610a3b565b91505092915050565b600060208284031215610b4057610b3f610f7c565b5b6000610b4e84828501610a50565b91505092915050565b60008060408385031215610b6e57610b6d610f7c565b5b6000610b7c85828601610a65565b9250506020610b8d85828601610a26565b9150509250929050565b600080600080600060608688031215610bb357610bb2610f7c565b5b6000610bc188828901610a65565b955050602086013567ffffffffffffffff811115610be257610be1610f77565b5b610bee88828901610a7a565b9450945050604086013567ffffffffffffffff811115610c1157610c10610f77565b5b610c1d88828901610a7a565b92509250509295509295909350565b610c3581610ee1565b82525050565b610c4481610eff565b82525050565b610c5b610c5682610eff565b610f5e565b82525050565b610c6a81610f3d565b82525050565b6000610c7c8385610ed0565b9350610c89838584610f4f565b610c9283610f81565b840190509392505050565b6000610caa601983610ed0565b9150610cb582610f92565b602082019050919050565b6000610ccd602683610ed0565b9150610cd882610fbb565b604082019050919050565b6000610cf0601683610ed0565b9150610cfb8261100a565b602082019050919050565b6000610d13602083610ed0565b9150610d1e82611033565b602082019050919050565b6000610d358285610c4a565b602082019150610d458284610c4a565b6020820191508190509392505050565b6000602082019050610d6a6000830184610c2c565b92915050565b6000602082019050610d856000830184610c3b565b92915050565b6000604082019050610da06000830185610c3b565b610dad6020830184610c2c565b9392505050565b600060a082019050610dc96000830188610c3b565b610dd66020830187610c3b565b610de36040830186610c2c565b610df06060830185610c2c565b610dfd6080830184610c61565b9695505050505050565b6000606082019050610e1c6000830188610c3b565b8181036020830152610e2f818688610c70565b90508181036040830152610e44818486610c70565b90509695505050505050565b60006020820190508181036000830152610e6981610c9d565b9050919050565b60006020820190508181036000830152610e8981610cc0565b9050919050565b60006020820190508181036000830152610ea981610ce3565b9050919050565b60006020820190508181036000830152610ec981610d06565b9050919050565b600082825260208201905092915050565b6000610eec82610f09565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000610f4882610f29565b9050919050565b82818337600083830152505050565b6000819050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f636f6e74726f6c6c6572206e6f74207265676973746572656400000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f6c6162656c20697320616c7265616479206f776e656400000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b61106581610ee1565b811461107057600080fd5b50565b61107c81610ef3565b811461108757600080fd5b50565b61109381610eff565b811461109e57600080fd5b5056fea264697066735822122088bbc7a427bded41edaa644b5da11f1350ff3cd035837c565ddf1ce3dbfb56af64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "ensAddr": "The address of the ENS registry.",
          "node": "The node that this registrar administers."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "register(bytes32,address)": {
        "params": {
          "label": "The hash of the label to register."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor."
      },
      "register(bytes32,address)": {
        "notice": "Register a name, or change the owner of an existing registration."
      }
    },
    "notice": "A registrar that allocates subdomains to the first person to claim them.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 395,
        "contract": "contracts/ens/PodENSRegistrar.sol:PodENSRegistrar",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4051,
        "contract": "contracts/ens/PodENSRegistrar.sol:PodENSRegistrar",
        "label": "ens",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ENS)136"
      },
      {
        "astId": 4054,
        "contract": "contracts/ens/PodENSRegistrar.sol:PodENSRegistrar",
        "label": "resolver",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Resolver)387"
      },
      {
        "astId": 4056,
        "contract": "contracts/ens/PodENSRegistrar.sol:PodENSRegistrar",
        "label": "reverseRegistrar",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4059,
        "contract": "contracts/ens/PodENSRegistrar.sol:PodENSRegistrar",
        "label": "controllerRegistry",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IControllerRegistry)4269"
      },
      {
        "astId": 4061,
        "contract": "contracts/ens/PodENSRegistrar.sol:PodENSRegistrar",
        "label": "rootNode",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENS)136": {
        "encoding": "inplace",
        "label": "contract ENS",
        "numberOfBytes": "20"
      },
      "t_contract(IControllerRegistry)4269": {
        "encoding": "inplace",
        "label": "contract IControllerRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(Resolver)387": {
        "encoding": "inplace",
        "label": "contract Resolver",
        "numberOfBytes": "20"
      }
    }
  }
}