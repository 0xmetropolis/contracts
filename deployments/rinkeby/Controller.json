{
  "address": "0x8532CeC262110baB9CE79429eac92F5f7334B54f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_controllerRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_proxyFactoryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gnosisMasterAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_podENSRegisrar",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "podId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "safe",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "CreatePod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "podId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "UpdatePodAdmin",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FUNCTION_SIG_ENABLE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUNCTION_SIG_EXEC",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUNCTION_SIG_SETUP",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "beforeTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controllerRegistry",
      "outputs": [
        {
          "internalType": "contract IControllerRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_label",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_ensString",
          "type": "string"
        }
      ],
      "name": "createPod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_safe",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_label",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_ensString",
          "type": "string"
        }
      ],
      "name": "createPodWithSafe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_context",
          "type": "address"
        }
      ],
      "name": "delegateSetup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "enableModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        }
      ],
      "name": "getSafeMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gnosisMasterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "isSafeMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        }
      ],
      "name": "isSafeModuleEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "memberToken",
      "outputs": [
        {
          "internalType": "contract IMemberToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_podId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_prevModule",
          "type": "address"
        }
      ],
      "name": "migratePodController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "podAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "podENSRegistrar",
      "outputs": [
        {
          "internalType": "contract IPodENSRegistrar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "podIdToSafe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "safeToPodId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_podId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "updatePodAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_podId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_podAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_safeAddress",
          "type": "address"
        }
      ],
      "name": "updatePodState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x30a6a77c61e19baf0d8f7b142925287b4907eafb31dbf442d417abe43ddd8e96",
  "receipt": {
    "to": null,
    "from": "0x3f4e2cFE11Aa607570E0Aee7AC74fbff9633fa8E",
    "contractAddress": "0x8532CeC262110baB9CE79429eac92F5f7334B54f",
    "transactionIndex": 35,
    "gasUsed": "4018425",
    "logsBloom": "0x
    "blockHash": "0x85d7348e433d7037c7d9ab2d8d4c8e96c5223b730828eb4fdc2ad873461bde91",
    "transactionHash": "0x30a6a77c61e19baf0d8f7b142925287b4907eafb31dbf442d417abe43ddd8e96",
    "logs": [],
    "blockNumber": 9424397,
    "cumulativeGasUsed": "13209075",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf11a8D9D3FeEdEAFd8857Acdd39728a48a5D9610",
    "0xCf80fE424555B75c5ce7eF03D00c59c05DDd340A",
    "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
    "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
    "0x5f9Eae977Abb26D34963Ab5B304D064aBE8CdB65"
  ],
  "solcInputHash": "78757493a29ceb6d610721ade959dff6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controllerRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxyFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gnosisMasterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_podENSRegisrar\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"podId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"CreatePod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"podId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"UpdatePodAdmin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FUNCTION_SIG_ENABLE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNCTION_SIG_EXEC\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNCTION_SIG_SETUP\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"beforeTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerRegistry\",\"outputs\":[{\"internalType\":\"contract IControllerRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_ensString\",\"type\":\"string\"}],\"name\":\"createPod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safe\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_ensString\",\"type\":\"string\"}],\"name\":\"createPodWithSafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_context\",\"type\":\"address\"}],\"name\":\"delegateSetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"enableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"}],\"name\":\"getSafeMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gnosisMasterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"isSafeMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"}],\"name\":\"isSafeModuleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"memberToken\",\"outputs\":[{\"internalType\":\"contract IMemberToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_podId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prevModule\",\"type\":\"address\"}],\"name\":\"migratePodController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"podAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"podENSRegistrar\",\"outputs\":[{\"internalType\":\"contract IPodENSRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"podIdToSafe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"safeToPodId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_podId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"updatePodAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_podId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_podAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safeAddress\",\"type\":\"address\"}],\"name\":\"updatePodState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes)\":{\"params\":{\"data\":\"Passes a flag for an initial creation event\",\"from\":\"The address sending the membership token\",\"ids\":\"An array of membership token ids to be transfered\",\"operator\":\"The address that initiated the action\",\"to\":\"The address recieveing the membership token\"}},\"constructor\":{\"details\":\"Will instantiate safe teller with gnosis master and proxy addresses\",\"params\":{\"_controllerRegistry\":\"The address of the ControllerRegistry contract\",\"_gnosisMasterAddress\":\"The gnosis master address\",\"_memberToken\":\"The address of the MemberToken contract\",\"_proxyFactoryAddress\":\"The proxy factory address\"}},\"createPod(address[],uint256,address,bytes32,string)\":{\"params\":{\"_admin\":\"The address of the pod admin\",\"_ensString\":\"string of pod ens name (i.e.'mypod.pod.xyz')\",\"_label\":\"label hash of pod name (i.e labelhash('mypod'))\",\"_members\":\"The addresses of the members of the pod\",\"threshold\":\"The number of members that are required to sign a transaction\"}},\"createPodWithSafe(address,address,bytes32,string)\":{\"details\":\"Used to create a pod with an existing safeWill automatically distribute membership NFTs to current safe members\",\"params\":{\"_admin\":\"The address of the pod admin\",\"_ensString\":\"string of pod ens name (i.e.'mypod.pod.xyz')\",\"_label\":\"label hash of pod name (i.e labelhash('mypod'))\",\"_safe\":\"The address of existing safe\"}},\"migratePodController(uint256,address,address)\":{\"details\":\"This will nullify all pod state on this controllerUpdate state on _newControllerUpdate controller to _newController in Safe and MemberToken\",\"params\":{\"_newController\":\"The address of the new pod controller\",\"_podId\":\"The id number of the pod\",\"_prevModule\":\"The module that points to the orca module in the safe's ModuleManager linked list\"}},\"updatePodAdmin(uint256,address)\":{\"params\":{\"_newAdmin\":\"The address of the new pod admin\",\"_podId\":\"The id number of the pod\"}},\"updatePodState(uint256,address,address)\":{\"details\":\"This is called by another version of controller to migrate a pod to this versionWill only accept calls from registered controllersCan only be called once.\",\"params\":{\"_podAdmin\":\"The address of the pod admin\",\"_podId\":\"The id number of the pod\",\"_safeAddress\":\"The address of the safe\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Controller.sol\":\"Controller\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Controller.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\n/* solhint-disable indent */\\n\\nimport \\\"./interfaces/IController.sol\\\";\\nimport \\\"./interfaces/IMemberToken.sol\\\";\\nimport \\\"./interfaces/IControllerRegistry.sol\\\";\\nimport \\\"./SafeTeller.sol\\\";\\nimport \\\"./ens/IPodENSRegistrar.sol\\\";\\n\\ncontract Controller is IController, SafeTeller {\\n    event CreatePod(uint256 podId, address safe, address admin);\\n    event UpdatePodAdmin(uint256 podId, address admin);\\n\\n    IMemberToken public immutable memberToken;\\n    IControllerRegistry public immutable controllerRegistry;\\n    IPodENSRegistrar public podENSRegistrar;\\n\\n    mapping(address => uint256) public safeToPodId;\\n    mapping(uint256 => address) public podIdToSafe;\\n    mapping(uint256 => address) public podAdmin;\\n\\n    uint8 internal constant CREATE_EVENT = 0x01;\\n\\n    /**\\n     * @dev Will instantiate safe teller with gnosis master and proxy addresses\\n     * @param _memberToken The address of the MemberToken contract\\n     * @param _controllerRegistry The address of the ControllerRegistry contract\\n     * @param _proxyFactoryAddress The proxy factory address\\n     * @param _gnosisMasterAddress The gnosis master address\\n     */\\n    constructor(\\n        address _memberToken,\\n        address _controllerRegistry,\\n        address _proxyFactoryAddress,\\n        address _gnosisMasterAddress,\\n        address _podENSRegisrar\\n    ) SafeTeller(_proxyFactoryAddress, _gnosisMasterAddress) {\\n        require(_memberToken != address(0), \\\"Invalid address\\\");\\n        require(_controllerRegistry != address(0), \\\"Invalid address\\\");\\n        require(_proxyFactoryAddress != address(0), \\\"Invalid address\\\");\\n        require(_gnosisMasterAddress != address(0), \\\"Invalid address\\\");\\n        require(_podENSRegisrar != address(0), \\\"Invalid address\\\");\\n\\n        memberToken = IMemberToken(_memberToken);\\n        controllerRegistry = IControllerRegistry(_controllerRegistry);\\n        podENSRegistrar = IPodENSRegistrar(_podENSRegisrar);\\n    }\\n\\n    /**\\n     * @param _members The addresses of the members of the pod\\n     * @param threshold The number of members that are required to sign a transaction\\n     * @param _admin The address of the pod admin\\n     * @param _label label hash of pod name (i.e labelhash('mypod'))\\n     * @param _ensString string of pod ens name (i.e.'mypod.pod.xyz')\\n     */\\n    function createPod(\\n        address[] memory _members,\\n        uint256 threshold,\\n        address _admin,\\n        bytes32 _label,\\n        string memory _ensString\\n    ) external {\\n        address safe = createSafe(_members, threshold);\\n\\n        _createPod(_members, safe, _admin, _label, _ensString);\\n    }\\n\\n    /**\\n     * @dev Used to create a pod with an existing safe\\n     * @dev Will automatically distribute membership NFTs to current safe members\\n     * @param _admin The address of the pod admin\\n     * @param _safe The address of existing safe\\n     * @param _label label hash of pod name (i.e labelhash('mypod'))\\n     * @param _ensString string of pod ens name (i.e.'mypod.pod.xyz')\\n     */\\n    function createPodWithSafe(\\n        address _admin,\\n        address _safe,\\n        bytes32 _label,\\n        string memory _ensString\\n    ) external {\\n        require(_safe != address(0), \\\"invalid safe address\\\");\\n        require(safeToPodId[_safe] == 0, \\\"safe already in use\\\");\\n        require(isSafeModuleEnabled(_safe), \\\"safe module must be enabled\\\");\\n        require(\\n            isSafeMember(_safe, msg.sender) || msg.sender == _safe,\\n            \\\"caller must be safe or member\\\"\\n        );\\n\\n        address[] memory members = getSafeMembers(_safe);\\n\\n        _createPod(members, _safe, _admin, _label, _ensString);\\n    }\\n\\n    /**\\n     * @param _members The addresses of the members of the pod\\n     * @param _admin The address of the pod admin\\n     * @param _safe The address of existing safe\\n     * @param _label label hash of pod name (i.e labelhash('mypod'))\\n     * @param _ensString string of pod ens name (i.e.'mypod.pod.xyz')\\n     */\\n    function _createPod(\\n        address[] memory _members,\\n        address _safe,\\n        address _admin,\\n        bytes32 _label,\\n        string memory _ensString\\n    ) private {\\n        // add create event flag to token data\\n        bytes memory data = new bytes(1);\\n        data[0] = bytes1(uint8(CREATE_EVENT));\\n\\n        uint256 podId = memberToken.createPod(_members, data);\\n\\n        emit CreatePod(podId, _safe, _admin);\\n        emit UpdatePodAdmin(podId, _admin);\\n\\n        if (_admin != address(0)) podAdmin[podId] = _admin;\\n        podIdToSafe[podId] = _safe;\\n        safeToPodId[_safe] = podId;\\n\\n        // setup pod ENS\\n        address reverseRegistrar = podENSRegistrar.registerPod(_label, _safe);\\n        setupSafeReverseResolver(_safe, reverseRegistrar, _ensString);\\n    }\\n\\n    /**\\n     * @param _podId The id number of the pod\\n     * @param _newAdmin The address of the new pod admin\\n     */\\n    function updatePodAdmin(uint256 _podId, address _newAdmin) external {\\n        address admin = podAdmin[_podId];\\n        address safe = podIdToSafe[_podId];\\n\\n        require(safe != address(0), \\\"Pod doesn't exist\\\");\\n\\n        // if there is no admin it can only be added by safe\\n        if (admin == address(0)) {\\n            require(msg.sender == safe, \\\"Only safe can add new admin\\\");\\n        } else {\\n            require(msg.sender == admin, \\\"Only admin can update admin\\\");\\n        }\\n        podAdmin[_podId] = _newAdmin;\\n\\n        emit UpdatePodAdmin(_podId, _newAdmin);\\n    }\\n\\n    /**\\n     * @dev This will nullify all pod state on this controller\\n     * @dev Update state on _newController\\n     * @dev Update controller to _newController in Safe and MemberToken\\n     * @param _podId The id number of the pod\\n     * @param _newController The address of the new pod controller\\n     * @param _prevModule The module that points to the orca module in the safe's ModuleManager linked list\\n     */\\n    function migratePodController(\\n        uint256 _podId,\\n        address _newController,\\n        address _prevModule\\n    ) external {\\n        require(_newController != address(0), \\\"Invalid address\\\");\\n        require(\\n            controllerRegistry.isRegistered(_newController),\\n            \\\"Controller not registered\\\"\\n        );\\n\\n        address admin = podAdmin[_podId];\\n        address safe = podIdToSafe[_podId];\\n\\n        require(\\n            msg.sender == admin || msg.sender == safe,\\n            \\\"User not authorized\\\"\\n        );\\n\\n        Controller newController = Controller(_newController);\\n\\n        // nullify current pod state\\n        podAdmin[_podId] = address(0);\\n        podIdToSafe[_podId] = address(0);\\n        safeToPodId[safe] = 0;\\n        // update controller in MemberToken\\n        memberToken.migrateMemberController(_podId, _newController);\\n        // update safe module to _newController\\n        migrateSafeTeller(safe, _newController, _prevModule);\\n        // update pod state in _newController\\n        newController.updatePodState(_podId, admin, safe);\\n    }\\n\\n    /**\\n     * @dev This is called by another version of controller to migrate a pod to this version\\n     * @dev Will only accept calls from registered controllers\\n     * @dev Can only be called once.\\n     * @param _podId The id number of the pod\\n     * @param _podAdmin The address of the pod admin\\n     * @param _safeAddress The address of the safe\\n     */\\n    function updatePodState(\\n        uint256 _podId,\\n        address _podAdmin,\\n        address _safeAddress\\n    ) external {\\n        require(_safeAddress != address(0), \\\"Invalid address\\\");\\n        require(\\n            controllerRegistry.isRegistered(msg.sender),\\n            \\\"Controller not registered\\\"\\n        );\\n        require(\\n            podAdmin[_podId] == address(0) &&\\n                podIdToSafe[_podId] == address(0) &&\\n                safeToPodId[_safeAddress] == 0,\\n            \\\"Pod already exists\\\"\\n        );\\n        podAdmin[_podId] = _podAdmin;\\n        podIdToSafe[_podId] = _safeAddress;\\n        safeToPodId[_safeAddress] = _podId;\\n\\n        emit UpdatePodAdmin(_podId, _podAdmin);\\n    }\\n\\n    /**\\n     * @param operator The address that initiated the action\\n     * @param from The address sending the membership token\\n     * @param to The address recieveing the membership token\\n     * @param ids An array of membership token ids to be transfered\\n     * @param data Passes a flag for an initial creation event\\n     */\\n    function beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory,\\n        bytes memory data\\n    ) external override {\\n        require(msg.sender == address(memberToken), \\\"Not Authorized\\\");\\n\\n        // if create event than side effects have been pre-handled\\n        // only recognise data flags from this controller\\n        if (operator == address(this) && uint8(data[0]) == CREATE_EVENT) return;\\n\\n        for (uint256 i = 0; i < ids.length; i += 1) {\\n            uint256 podId = ids[i];\\n            address safe = podIdToSafe[podId];\\n            address admin = podAdmin[podId];\\n\\n            if (from == address(0)) {\\n                // mint event\\n\\n                // there are no rules operator must be admin, safe or controller\\n                require(\\n                    operator == safe ||\\n                        operator == admin ||\\n                        operator == address(this),\\n                    \\\"No Rules Set\\\"\\n                );\\n\\n                onMint(to, safe);\\n            } else if (to == address(0)) {\\n                // burn event\\n\\n                // there are no rules  operator must be admin, safe or controller\\n                require(\\n                    operator == safe ||\\n                        operator == admin ||\\n                        operator == address(this),\\n                    \\\"No Rules Set\\\"\\n                );\\n\\n                onBurn(from, safe);\\n            } else {\\n                // transfer event\\n                onTransfer(from, to, safe);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb52924f411f18332b340990968f6702095c49789c927f019b304a29f6bbf0ef6\"},\"contracts/SafeTeller.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/IGnosisSafe.sol\\\";\\nimport \\\"./interfaces/IGnosisSafeProxyFactory.sol\\\";\\n\\ncontract SafeTeller {\\n    using Address for address;\\n\\n    // mainnet: 0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B;\\n    address public immutable proxyFactoryAddress;\\n\\n    // mainnet: 0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F;\\n    address public immutable gnosisMasterAddress;\\n\\n    string public constant FUNCTION_SIG_SETUP =\\n        \\\"setup(address[],uint256,address,bytes,address,address,uint256,address)\\\";\\n    string public constant FUNCTION_SIG_EXEC =\\n        \\\"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)\\\";\\n\\n    string public constant FUNCTION_SIG_ENABLE = \\\"delegateSetup(address)\\\";\\n\\n    address internal constant SENTINEL = address(0x1);\\n\\n    /**\\n     * @param _proxyFactoryAddress The proxy factory address\\n     * @param _gnosisMasterAddress The gnosis master address\\n     */\\n    constructor(address _proxyFactoryAddress, address _gnosisMasterAddress) {\\n        proxyFactoryAddress = _proxyFactoryAddress;\\n        gnosisMasterAddress = _gnosisMasterAddress;\\n    }\\n\\n    /**\\n     * @param _safe The address of the safe\\n     * @param _newSafeTeller The address of the new safe teller contract\\n     */\\n    function migrateSafeTeller(\\n        address _safe,\\n        address _newSafeTeller,\\n        address _prevModule\\n    ) internal {\\n        // add new safeTeller\\n        bytes memory enableData = abi.encodeWithSignature(\\n            \\\"enableModule(address)\\\",\\n            _newSafeTeller\\n        );\\n\\n        bool enableSuccess = IGnosisSafe(_safe).execTransactionFromModule(\\n            _safe,\\n            0,\\n            enableData,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(enableSuccess, \\\"Migration failed on enable\\\");\\n\\n        // validate prevModule of current safe teller\\n        (address[] memory moduleBuffer, ) = IGnosisSafe(_safe)\\n            .getModulesPaginated(_prevModule, 1);\\n        require(moduleBuffer[0] == address(this), \\\"incorrect prevModule\\\");\\n\\n        // disable current safeTeller\\n        bytes memory disableData = abi.encodeWithSignature(\\n            \\\"disableModule(address,address)\\\",\\n            _prevModule,\\n            address(this)\\n        );\\n\\n        bool disableSuccess = IGnosisSafe(_safe).execTransactionFromModule(\\n            _safe,\\n            0,\\n            disableData,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(disableSuccess, \\\"Migration failed on disable\\\");\\n    }\\n\\n    function getSafeMembers(address safe)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        return IGnosisSafe(safe).getOwners();\\n    }\\n\\n    function isSafeModuleEnabled(address safe) public view returns (bool) {\\n        return IGnosisSafe(safe).isModuleEnabled(address(this));\\n    }\\n\\n    function isSafeMember(address safe, address member)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return IGnosisSafe(safe).isOwner(member);\\n    }\\n\\n    /**\\n     * @param _owners The  addresses to be owners of the safe\\n     * @param _threshold The number of owners that are required to sign a transaciton\\n     * @return safeAddress The address of the new safe\\n     */\\n    function createSafe(address[] memory _owners, uint256 _threshold)\\n        internal\\n        returns (address safeAddress)\\n    {\\n        bytes memory data = abi.encodeWithSignature(\\n            FUNCTION_SIG_ENABLE,\\n            address(this)\\n        );\\n\\n        // encode the setup call that will be called on the new proxy safe\\n        // from the proxy factory\\n        bytes memory setupData = abi.encodeWithSignature(\\n            FUNCTION_SIG_SETUP,\\n            _owners,\\n            _threshold,\\n            this,\\n            data,\\n            address(0),\\n            address(0),\\n            uint256(0),\\n            address(0)\\n        );\\n\\n        try\\n            IGnosisSafeProxyFactory(proxyFactoryAddress).createProxy(\\n                gnosisMasterAddress,\\n                setupData\\n            )\\n        returns (address newSafeAddress) {\\n            return newSafeAddress;\\n        } catch (bytes memory) {\\n            revert(\\\"Create Proxy With Data Failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @param to The account address to add as an owner\\n     * @param safe The address of the safe\\n     */\\n    function onMint(address to, address safe) internal {\\n        uint256 threshold = IGnosisSafe(safe).getThreshold();\\n\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"addOwnerWithThreshold(address,uint256)\\\",\\n            to,\\n            threshold\\n        );\\n\\n        bool success = IGnosisSafe(safe).execTransactionFromModule(\\n            safe,\\n            0,\\n            data,\\n            IGnosisSafe.Operation.Call\\n        );\\n\\n        require(success, \\\"Module Transaction Failed\\\");\\n    }\\n\\n    /**\\n     * @param from The address to be removed as an owner\\n     * @param safe The address of the safe\\n     */\\n    function onBurn(address from, address safe) internal {\\n        uint256 threshold = IGnosisSafe(safe).getThreshold();\\n        address[] memory owners = IGnosisSafe(safe).getOwners();\\n\\n        //look for the address pointing to address from\\n        address prevFrom = address(0);\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            if (owners[i] == from) {\\n                if (i == 0) {\\n                    prevFrom = SENTINEL;\\n                } else {\\n                    prevFrom = owners[i - 1];\\n                }\\n            }\\n        }\\n        if (owners.length - 1 < threshold) threshold -= 1;\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"removeOwner(address,address,uint256)\\\",\\n            prevFrom,\\n            from,\\n            threshold\\n        );\\n\\n        bool success = IGnosisSafe(safe).execTransactionFromModule(\\n            safe,\\n            0,\\n            data,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(success, \\\"Module Transaction Failed\\\");\\n    }\\n\\n    /**\\n     * @param from The address being removed as an owner\\n     * @param to The address being added as an owner\\n     * @param safe The address of the safe\\n     */\\n    function onTransfer(\\n        address from,\\n        address to,\\n        address safe\\n    ) internal {\\n        address[] memory owners = IGnosisSafe(safe).getOwners();\\n\\n        //look for the address pointing to address from\\n        address prevFrom;\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            if (owners[i] == from) {\\n                if (i == 0) {\\n                    prevFrom = SENTINEL;\\n                } else {\\n                    prevFrom = owners[i - 1];\\n                }\\n            }\\n        }\\n\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"swapOwner(address,address,address)\\\",\\n            prevFrom,\\n            from,\\n            to\\n        );\\n\\n        bool success = IGnosisSafe(safe).execTransactionFromModule(\\n            safe,\\n            0,\\n            data,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(success, \\\"Module Transaction Failed\\\");\\n    }\\n\\n\\n    /**\\n     * @dev This will execute a tx from the safe that will update the safe's ENS in the reverse resolver\\n     * @param safe safe address\\n     * @param reverseRegistrar The ENS default reverseRegistar \\n     * @param _ensString string of pod ens name (i.e.'mypod.pod.xyz')\\n     */\\n    function setupSafeReverseResolver(\\n        address safe,\\n        address reverseRegistrar,\\n        string memory _ensString\\n    ) internal {\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"setName(string)\\\",\\n            _ensString\\n        );\\n\\n        bool success = IGnosisSafe(safe).execTransactionFromModule(\\n            reverseRegistrar,\\n            0,\\n            data,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(success, \\\"Module Transaction Failed\\\");\\n    }\\n\\n    // TODO: move to library\\n    // Used in a delegate call to enable module add on setup\\n    function enableModule(address module) external {\\n        require(module == address(0));\\n    }\\n\\n    function delegateSetup(address _context) external {\\n        this.enableModule(_context);\\n    }\\n}\\n\",\"keccak256\":\"0xb061772f50d6f52534ca9ecb05ee6c7d1754db65d3cbd7ddbc40d38e00ed6c57\"},\"contracts/ens/IPodENSRegistrar.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\ninterface IPodENSRegistrar { \\n\\n    function registerPod(bytes32 label, address podSafe) external returns (address);\\n\\n    function register(bytes32 label, address owner) external;\\n}\\n\",\"keccak256\":\"0x364f5c0b7b6add825fe1dad8523fa0fa4758a0860f8a51e777f1dac7b5e8682c\"},\"contracts/interfaces/IController.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\ninterface IController{\\n\\n    /**\\n     * @param operator The account address that initiated the action\\n     * @param from The account address sending the membership token\\n     * @param to The account address recieving the membership token\\n     * @param ids An array of membership token ids to be transfered\\n     * @param amounts The amount of each membership token type to transfer\\n     * @param data Arbitrary data\\n     */\\n    function beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n\\n}\\n\",\"keccak256\":\"0x49c623fd7b83f04db221bf69af147566ecfba5a7d76d5241d4e453b86449e478\"},\"contracts/interfaces/IControllerRegistry.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\n\\ninterface IControllerRegistry{\\n\\n    /**\\n     * @param _controller Address to check if registered as a controller\\n     * @return Boolean representing if the address is a registered as a controller\\n     */\\n    function isRegistered(address _controller) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x02e7853f4677cafd67f4a486cea842929067ca7b764b468e54922180998d5c4c\"},\"contracts/interfaces/IGnosisSafe.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\ninterface IGnosisSafe {\\n\\n    enum Operation {Call, DelegateCall}\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Operation operation\\n    ) external returns (bool success);\\n\\n    /// @dev Returns array of owners.\\n    /// @return Array of Safe owners.\\n    function getOwners() external view returns (address[] memory);\\n\\n    function isOwner(address owner) external view returns (bool);\\n\\n    function getThreshold() external returns (uint256);\\n\\n    /// @dev Returns array of modules.\\n    /// @param start Start of the page.\\n    /// @param pageSize Maximum number of modules that should be returned.\\n    /// @return array Array of modules.\\n    /// @return next Start of the next page.\\n    function getModulesPaginated(address start, uint256 pageSize)\\n        external \\n        view\\n        returns (address[] memory array, address next);\\n\\n    /// @dev Returns if an module is enabled\\n    /// @return True if the module is enabled\\n    function isModuleEnabled(address module) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x337ab03fe75425112f380a2a6d4a150da49b5fcf5eb7aa1808e5f24429f37ed5\"},\"contracts/interfaces/IGnosisSafeProxyFactory.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\ninterface IGnosisSafeProxyFactory {\\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\\n    /// @param singleton Address of singleton contract.\\n    /// @param data Payload for message call sent to new proxy contract.\\n    function createProxy(address singleton, bytes memory data)\\n        external\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x1bddd6110ad627fda30e8735f689e46496069633f27bc0c29ecab5043fb33b20\"},\"contracts/interfaces/IMemberToken.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface IMemberToken is IERC1155 {\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Indicates weither any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) external view returns (bool);\\n\\n    function getNextAvailablePodId() external view returns (uint256);\\n\\n    /**\\n     * @param _podId The pod id number \\n     * @param _newController The address of the new controller\\n     */\\n    function migrateMemberController(uint256 _podId, address _newController)\\n        external;\\n\\n    /**\\n     * @param _account The account address to transfer the membership token to\\n     * @param _id The membership token id to mint\\n     * @param data Arbitrary data\\n     */\\n    function mint(\\n        address _account,\\n        uint256 _id,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @param _accounts The account addresses to transfer the membership tokens to\\n     * @param _id The membership token id to mint\\n     * @param data Arbitrary data\\n     */\\n    function mintSingleBatch(\\n        address[] memory _accounts,\\n        uint256 _id,\\n        bytes memory data\\n    ) external;\\n\\n    function createPod(address[] memory _accounts, bytes memory data) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xc597ff76776d203c80fcd6b90440f617858bdd3103f9ad33500919781e9404a0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c8063827be3cc116100b8578063c50bb1641161007c578063c50bb16414610351578063c7e2a4fc1461036f578063cf00cec91461039f578063e1fc2cc1146103cf578063f0f39f5d146103eb578063fe258da71461040757610142565b8063827be3cc146102a95780638d092f5d146102c7578063b06a4120146102f7578063bbc4541b14610315578063be5405d21461033357610142565b80634a9b5db71161010a5780634a9b5db7146101fd578063514648bb1461021b5780635cb5438414610237578063610b59251461025557806362067cd11461027157806374d4f6d01461028d57610142565b806326a13d30146101475780632c8cde8214610165578063346e5c481461018157806337c591fa1461019d578063436f8d03146101cd575b600080fd5b61014f610437565b60405161015c9190613bac565b60405180910390f35b61017f600480360381019061017a919061328b565b610470565b005b61019b600480360381019061019691906133c5565b610493565b005b6101b760048036038101906101b29190612fe8565b61071b565b6040516101c49190613e0e565b60405180910390f35b6101e760048036038101906101e2919061336b565b610733565b6040516101f491906138b2565b60405180910390f35b610205610766565b6040516102129190613bac565b60405180910390f35b61023560048036038101906102309190613163565b610782565b005b61023f61095c565b60405161024c9190613b76565b60405180910390f35b61026f600480360381019061026a9190612fe8565b610980565b005b61028b60048036038101906102869190613405565b6109bc565b005b6102a760048036038101906102a29190612fe8565b610d92565b005b6102b1610e00565b6040516102be9190613bac565b60405180910390f35b6102e160048036038101906102dc919061336b565b610e1c565b6040516102ee91906138b2565b60405180910390f35b6102ff610e4f565b60405161030c91906138b2565b60405180910390f35b61031d610e73565b60405161032a9190613b5b565b60405180910390f35b61033b610e97565b60405161034891906138b2565b60405180910390f35b610359610ebb565b6040516103669190613b91565b60405180910390f35b61038960048036038101906103849190612fe8565b610edf565b6040516103969190613b17565b60405180910390f35b6103b960048036038101906103b49190612fe8565b610f71565b6040516103c69190613a32565b60405180910390f35b6103e960048036038101906103e49190613405565b610ffd565b005b61040560048036038101906104009190613082565b611468565b005b610421600480360381019061041c9190613042565b611867565b60405161042e9190613b17565b60405180910390f35b6040518060400160405280601681526020017f64656c656761746553657475702861646472657373290000000000000000000081525081565b600061047c86866118fa565b905061048b8682868686611bab565b505050505050565b60006003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006002600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056a90613dae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561061b578073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060d90613d4e565b60405180910390fd5b61068a565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610689576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068090613d6e565b60405180910390fd5b5b826003600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ffef38cfc44da305e6203142455e0a2b129109e8fd7b40914acff6874f170e3df848460405161070d929190613e29565b60405180910390a150505050565b60016020528060005260406000206000915090505481565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060800160405280605a815260200161466a605a913981565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e990613c4e565b60405180910390fd5b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086b90613c0e565b60405180910390fd5b61087d83610edf565b6108bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b390613cee565b60405180910390fd5b6108c68333611867565b806108fc57508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61093b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093290613cce565b60405180910390fd5b600061094684610f71565b90506109558185878686611bab565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146109b957600080fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2390613bee565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c3c5a547336040518263ffffffff1660e01b8152600401610a8591906138b2565b60206040518083038186803b158015610a9d57600080fd5b505afa158015610ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad5919061333e565b610b14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0b90613d0e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015610be25750600073ffffffffffffffffffffffffffffffffffffffff166002600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b8015610c2d57506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b610c6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6390613d8e565b60405180910390fd5b816003600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806002600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507ffef38cfc44da305e6203142455e0a2b129109e8fd7b40914acff6874f170e3df8383604051610d85929190613e29565b60405180910390a1505050565b3073ffffffffffffffffffffffffffffffffffffffff1663610b5925826040518263ffffffff1660e01b8152600401610dcb91906138b2565b600060405180830381600087803b158015610de557600080fd5b505af1158015610df9573d6000803e3d6000fd5b5050505050565b6040518060800160405280604681526020016146c46046913981565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff16632d9ad53d306040518263ffffffff1660e01b8152600401610f1a91906138b2565b60206040518083038186803b158015610f3257600080fd5b505afa158015610f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6a919061333e565b9050919050565b60608173ffffffffffffffffffffffffffffffffffffffff1663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b158015610fb957600080fd5b505afa158015610fcd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ff691906131e6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561106d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106490613bee565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c3c5a547836040518263ffffffff1660e01b81526004016110c691906138b2565b60206040518083038186803b1580156110de57600080fd5b505afa1580156110f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611116919061333e565b611155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114c90613d0e565b60405180910390fd5b60006003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006002600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061122a57508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611269576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126090613dee565b60405180910390fd5b600084905060006003600088815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006002600088815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638278665487876040518363ffffffff1660e01b81526004016113b4929190613e29565b600060405180830381600087803b1580156113ce57600080fd5b505af11580156113e2573d6000803e3d6000fd5b505050506113f1828686611f4e565b8073ffffffffffffffffffffffffffffffffffffffff166362067cd18785856040518463ffffffff1660e01b815260040161142e93929190613e52565b600060405180830381600087803b15801561144857600080fd5b505af115801561145c573d6000803e3d6000fd5b50505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ed90613c8e565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161480156115585750600160ff16816000815181106115455761154461428f565b5b602001015160f81c60f81b60f81c60ff16145b156115625761185f565b60005b835181101561185d5760008482815181106115835761158261428f565b5b6020026020010151905060006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16141561171b578173ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16148061169757508073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16145b806116cd57503073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16145b61170c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170390613bce565b60405180910390fd5b611716888361234b565b611846565b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161415611839578173ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614806117b557508073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16145b806117eb57503073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16145b61182a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182190613bce565b60405180910390fd5b6118348983612541565b611845565b611844898984612893565b5b5b5050506001816118569190613fe4565b9050611565565b505b505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff16632f54bf6e836040518263ffffffff1660e01b81526004016118a291906138b2565b60206040518083038186803b1580156118ba57600080fd5b505afa1580156118ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f2919061333e565b905092915050565b6000806040518060400160405280601681526020017f64656c65676174655365747570286164647265737329000000000000000000008152503060405160240161194491906138b2565b60405160208183030381529060405290604051611961919061389b565b60405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060006040518060800160405280604681526020016146c460469139858530856000806000806040516024016119f4989796959493929190613a8b565b60405160208183030381529060405290604051611a11919061389b565b60405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166361b69abd7f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b8152600401611ae3929190613964565b602060405180830381600087803b158015611afd57600080fd5b505af1925050508015611b2e57506040513d601f19601f82011682018060405250810190611b2b9190613015565b60015b611b9f573d8060008114611b5e576040519150601f19603f3d011682016040523d82523d6000602084013e611b63565b606091505b506040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9690613cae565b60405180910390fd5b80935050505092915050565b6000600167ffffffffffffffff811115611bc857611bc76142be565b5b6040519080825280601f01601f191660200182016040528015611bfa5781602001600182028036833780820191505090505b509050600160f81b81600081518110611c1657611c1561428f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639aa0055e88846040518363ffffffff1660e01b8152600401611ca2929190613a54565b602060405180830381600087803b158015611cbc57600080fd5b505af1158015611cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf49190613398565b90507fd04d9c55c49ed7b3098ec7ff52a43f347e36f88ba52ff5c27cf6ee33e2dde622818787604051611d2993929190613e52565b60405180910390a17ffef38cfc44da305e6203142455e0a2b129109e8fd7b40914acff6874f170e3df8186604051611d62929190613e29565b60405180910390a1600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611df157846003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b856002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ae33385986896040518363ffffffff1660e01b8152600401611ee5929190613b32565b602060405180830381600087803b158015611eff57600080fd5b505af1158015611f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f379190613015565b9050611f44878286612b40565b5050505050505050565b600082604051602401611f6191906138b2565b6040516020818303038152906040527f610b5925000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008473ffffffffffffffffffffffffffffffffffffffff1663468721a78660008560006040518563ffffffff1660e01b81526004016120239493929190613994565b602060405180830381600087803b15801561203d57600080fd5b505af1158015612051573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612075919061333e565b9050806120b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ae90613c6e565b60405180910390fd5b60008573ffffffffffffffffffffffffffffffffffffffff1663cc2f84528560016040518363ffffffff1660e01b81526004016120f59291906139e0565b60006040518083038186803b15801561210d57600080fd5b505afa158015612121573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061214a919061322f565b5090503073ffffffffffffffffffffffffffffffffffffffff16816000815181106121785761217761428f565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146121d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121cd90613dce565b60405180910390fd5b600084306040516024016121eb9291906138cd565b6040516020818303038152906040527fe009cfde000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008773ffffffffffffffffffffffffffffffffffffffff1663468721a78960008560006040518563ffffffff1660e01b81526004016122ad9493929190613994565b602060405180830381600087803b1580156122c757600080fd5b505af11580156122db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ff919061333e565b905080612341576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233890613c2e565b60405180910390fd5b5050505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff1663e75235b86040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561239557600080fd5b505af11580156123a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123cd9190613398565b9050600083826040516024016123e4929190613a09565b6040516020818303038152906040527f0d582f13000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008373ffffffffffffffffffffffffffffffffffffffff1663468721a78560008560006040518563ffffffff1660e01b81526004016124a69493929190613994565b602060405180830381600087803b1580156124c057600080fd5b505af11580156124d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f8919061333e565b90508061253a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253190613d2e565b60405180910390fd5b5050505050565b60008173ffffffffffffffffffffffffffffffffffffffff1663e75235b86040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561258b57600080fd5b505af115801561259f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c39190613398565b905060008273ffffffffffffffffffffffffffffffffffffffff1663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561260d57600080fd5b505afa158015612621573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061264a91906131e6565b90506000805b82518110156126f7578573ffffffffffffffffffffffffffffffffffffffff168382815181106126835761268261428f565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156126e45760008114156126b957600191506126e3565b826001826126c7919061403a565b815181106126d8576126d761428f565b5b602002602001015191505b5b80806126ef906141e8565b915050612650565b508260018351612707919061403a565b101561271d5760018361271a919061403a565b92505b60008186856040516024016127349392919061392d565b6040516020818303038152906040527ff8dc5dd9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008573ffffffffffffffffffffffffffffffffffffffff1663468721a78760008560006040518563ffffffff1660e01b81526004016127f69493929190613994565b602060405180830381600087803b15801561281057600080fd5b505af1158015612824573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612848919061333e565b90508061288a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161288190613d2e565b60405180910390fd5b50505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff1663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156128db57600080fd5b505afa1580156128ef573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061291891906131e6565b9050600080600090505b82518110156129c9578573ffffffffffffffffffffffffffffffffffffffff168382815181106129555761295461428f565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156129b657600081141561298b57600191506129b5565b82600182612999919061403a565b815181106129aa576129a961428f565b5b602002602001015191505b5b80806129c1906141e8565b915050612922565b5060008186866040516024016129e1939291906138f6565b6040516020818303038152906040527fe318b52b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008473ffffffffffffffffffffffffffffffffffffffff1663468721a78660008560006040518563ffffffff1660e01b8152600401612aa39493929190613994565b602060405180830381600087803b158015612abd57600080fd5b505af1158015612ad1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af5919061333e565b905080612b37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2e90613d2e565b60405180910390fd5b50505050505050565b600081604051602401612b539190613bac565b6040516020818303038152906040527fc47f0027000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008473ffffffffffffffffffffffffffffffffffffffff1663468721a78560008560006040518563ffffffff1660e01b8152600401612c159493929190613994565b602060405180830381600087803b158015612c2f57600080fd5b505af1158015612c43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c67919061333e565b905080612ca9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ca090613d2e565b60405180910390fd5b5050505050565b6000612cc3612cbe84613eae565b613e89565b90508083825260208201905082856020860282011115612ce657612ce56142f2565b5b60005b85811015612d165781612cfc8882612e84565b845260208401935060208301925050600181019050612ce9565b5050509392505050565b6000612d33612d2e84613eae565b613e89565b90508083825260208201905082856020860282011115612d5657612d556142f2565b5b60005b85811015612d865781612d6c8882612e99565b845260208401935060208301925050600181019050612d59565b5050509392505050565b6000612da3612d9e84613eda565b613e89565b90508083825260208201905082856020860282011115612dc657612dc56142f2565b5b60005b85811015612df65781612ddc8882612fbe565b845260208401935060208301925050600181019050612dc9565b5050509392505050565b6000612e13612e0e84613f06565b613e89565b905082815260208101848484011115612e2f57612e2e6142f7565b5b612e3a848285614175565b509392505050565b6000612e55612e5084613f37565b613e89565b905082815260208101848484011115612e7157612e706142f7565b5b612e7c848285614175565b509392505050565b600081359050612e938161460d565b92915050565b600081519050612ea88161460d565b92915050565b600082601f830112612ec357612ec26142ed565b5b8135612ed3848260208601612cb0565b91505092915050565b600082601f830112612ef157612ef06142ed565b5b8151612f01848260208601612d20565b91505092915050565b600082601f830112612f1f57612f1e6142ed565b5b8135612f2f848260208601612d90565b91505092915050565b600081519050612f4781614624565b92915050565b600081359050612f5c8161463b565b92915050565b600082601f830112612f7757612f766142ed565b5b8135612f87848260208601612e00565b91505092915050565b600082601f830112612fa557612fa46142ed565b5b8135612fb5848260208601612e42565b91505092915050565b600081359050612fcd81614652565b92915050565b600081519050612fe281614652565b92915050565b600060208284031215612ffe57612ffd614301565b5b600061300c84828501612e84565b91505092915050565b60006020828403121561302b5761302a614301565b5b600061303984828501612e99565b91505092915050565b6000806040838503121561305957613058614301565b5b600061306785828601612e84565b925050602061307885828601612e84565b9150509250929050565b60008060008060008060c0878903121561309f5761309e614301565b5b60006130ad89828a01612e84565b96505060206130be89828a01612e84565b95505060406130cf89828a01612e84565b945050606087013567ffffffffffffffff8111156130f0576130ef6142fc565b5b6130fc89828a01612f0a565b935050608087013567ffffffffffffffff81111561311d5761311c6142fc565b5b61312989828a01612f0a565b92505060a087013567ffffffffffffffff81111561314a576131496142fc565b5b61315689828a01612f62565b9150509295509295509295565b6000806000806080858703121561317d5761317c614301565b5b600061318b87828801612e84565b945050602061319c87828801612e84565b93505060406131ad87828801612f4d565b925050606085013567ffffffffffffffff8111156131ce576131cd6142fc565b5b6131da87828801612f90565b91505092959194509250565b6000602082840312156131fc576131fb614301565b5b600082015167ffffffffffffffff81111561321a576132196142fc565b5b61322684828501612edc565b91505092915050565b6000806040838503121561324657613245614301565b5b600083015167ffffffffffffffff811115613264576132636142fc565b5b61327085828601612edc565b925050602061328185828601612e99565b9150509250929050565b600080600080600060a086880312156132a7576132a6614301565b5b600086013567ffffffffffffffff8111156132c5576132c46142fc565b5b6132d188828901612eae565b95505060206132e288828901612fbe565b94505060406132f388828901612e84565b935050606061330488828901612f4d565b925050608086013567ffffffffffffffff811115613325576133246142fc565b5b61333188828901612f90565b9150509295509295909350565b60006020828403121561335457613353614301565b5b600061336284828501612f38565b91505092915050565b60006020828403121561338157613380614301565b5b600061338f84828501612fbe565b91505092915050565b6000602082840312156133ae576133ad614301565b5b60006133bc84828501612fd3565b91505092915050565b600080604083850312156133dc576133db614301565b5b60006133ea85828601612fbe565b92505060206133fb85828601612e84565b9150509250929050565b60008060006060848603121561341e5761341d614301565b5b600061342c86828701612fbe565b935050602061343d86828701612e84565b925050604061344e86828701612e84565b9150509250925092565b60006134648383613470565b60208301905092915050565b6134798161406e565b82525050565b6134888161406e565b82525050565b600061349982613f78565b6134a38185613fa6565b93506134ae83613f68565b8060005b838110156134df5781516134c68882613458565b97506134d183613f99565b9250506001810190506134b2565b5085935050505092915050565b6134f581614080565b82525050565b6135048161408c565b82525050565b600061351582613f83565b61351f8185613fb7565b935061352f818560208601614184565b61353881614306565b840191505092915050565b61354c816140d3565b82525050565b61355b816140e5565b82525050565b61356a816140f7565b82525050565b61357981614109565b82525050565b6135888161411b565b82525050565b6135978161412d565b82525050565b6135a68161413f565b82525050565b60006135b782613f8e565b6135c18185613fc8565b93506135d1818560208601614184565b6135da81614306565b840191505092915050565b60006135f082613f8e565b6135fa8185613fd9565b935061360a818560208601614184565b80840191505092915050565b6000613623600c83613fc8565b915061362e82614317565b602082019050919050565b6000613646600f83613fc8565b915061365182614340565b602082019050919050565b6000613669601383613fc8565b915061367482614369565b602082019050919050565b600061368c601b83613fc8565b915061369782614392565b602082019050919050565b60006136af601483613fc8565b91506136ba826143bb565b602082019050919050565b60006136d2601a83613fc8565b91506136dd826143e4565b602082019050919050565b60006136f5600e83613fc8565b91506137008261440d565b602082019050919050565b6000613718601d83613fc8565b915061372382614436565b602082019050919050565b600061373b601d83613fc8565b91506137468261445f565b602082019050919050565b600061375e601b83613fc8565b915061376982614488565b602082019050919050565b6000613781601983613fc8565b915061378c826144b1565b602082019050919050565b60006137a4601983613fc8565b91506137af826144da565b602082019050919050565b60006137c7601b83613fc8565b91506137d282614503565b602082019050919050565b60006137ea601b83613fc8565b91506137f58261452c565b602082019050919050565b600061380d601283613fc8565b915061381882614555565b602082019050919050565b6000613830601183613fc8565b915061383b8261457e565b602082019050919050565b6000613853601483613fc8565b915061385e826145a7565b602082019050919050565b6000613876601383613fc8565b9150613881826145d0565b602082019050919050565b613895816140c9565b82525050565b60006138a782846135e5565b915081905092915050565b60006020820190506138c7600083018461347f565b92915050565b60006040820190506138e2600083018561347f565b6138ef602083018461347f565b9392505050565b600060608201905061390b600083018661347f565b613918602083018561347f565b613925604083018461347f565b949350505050565b6000606082019050613942600083018661347f565b61394f602083018561347f565b61395c604083018461388c565b949350505050565b6000604082019050613979600083018561347f565b818103602083015261398b818461350a565b90509392505050565b60006080820190506139a9600083018761347f565b6139b6602083018661358e565b81810360408301526139c8818561350a565b90506139d7606083018461357f565b95945050505050565b60006040820190506139f5600083018561347f565b613a02602083018461359d565b9392505050565b6000604082019050613a1e600083018561347f565b613a2b602083018461388c565b9392505050565b60006020820190508181036000830152613a4c818461348e565b905092915050565b60006040820190508181036000830152613a6e818561348e565b90508181036020830152613a82818461350a565b90509392505050565b6000610100820190508181036000830152613aa6818b61348e565b9050613ab5602083018a61388c565b613ac26040830189613570565b8181036060830152613ad4818861350a565b9050613ae3608083018761347f565b613af060a083018661347f565b613afd60c083018561388c565b613b0a60e083018461347f565b9998505050505050505050565b6000602082019050613b2c60008301846134ec565b92915050565b6000604082019050613b4760008301856134fb565b613b54602083018461347f565b9392505050565b6000602082019050613b706000830184613543565b92915050565b6000602082019050613b8b6000830184613552565b92915050565b6000602082019050613ba66000830184613561565b92915050565b60006020820190508181036000830152613bc681846135ac565b905092915050565b60006020820190508181036000830152613be781613616565b9050919050565b60006020820190508181036000830152613c0781613639565b9050919050565b60006020820190508181036000830152613c278161365c565b9050919050565b60006020820190508181036000830152613c478161367f565b9050919050565b60006020820190508181036000830152613c67816136a2565b9050919050565b60006020820190508181036000830152613c87816136c5565b9050919050565b60006020820190508181036000830152613ca7816136e8565b9050919050565b60006020820190508181036000830152613cc78161370b565b9050919050565b60006020820190508181036000830152613ce78161372e565b9050919050565b60006020820190508181036000830152613d0781613751565b9050919050565b60006020820190508181036000830152613d2781613774565b9050919050565b60006020820190508181036000830152613d4781613797565b9050919050565b60006020820190508181036000830152613d67816137ba565b9050919050565b60006020820190508181036000830152613d87816137dd565b9050919050565b60006020820190508181036000830152613da781613800565b9050919050565b60006020820190508181036000830152613dc781613823565b9050919050565b60006020820190508181036000830152613de781613846565b9050919050565b60006020820190508181036000830152613e0781613869565b9050919050565b6000602082019050613e23600083018461388c565b92915050565b6000604082019050613e3e600083018561388c565b613e4b602083018461347f565b9392505050565b6000606082019050613e67600083018661388c565b613e74602083018561347f565b613e81604083018461347f565b949350505050565b6000613e93613ea4565b9050613e9f82826141b7565b919050565b6000604051905090565b600067ffffffffffffffff821115613ec957613ec86142be565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613ef557613ef46142be565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613f2157613f206142be565b5b613f2a82614306565b9050602081019050919050565b600067ffffffffffffffff821115613f5257613f516142be565b5b613f5b82614306565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613fef826140c9565b9150613ffa836140c9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561402f5761402e614231565b5b828201905092915050565b6000614045826140c9565b9150614050836140c9565b92508282101561406357614062614231565b5b828203905092915050565b6000614079826140a9565b9050919050565b60008115159050919050565b6000819050919050565b60008190506140a4826145f9565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006140de82614151565b9050919050565b60006140f082614151565b9050919050565b600061410282614151565b9050919050565b600061411482614151565b9050919050565b600061412682614096565b9050919050565b6000614138826140c9565b9050919050565b600061414a826140c9565b9050919050565b600061415c82614163565b9050919050565b600061416e826140a9565b9050919050565b82818337600083830152505050565b60005b838110156141a2578082015181840152602081019050614187565b838111156141b1576000848401525b50505050565b6141c082614306565b810181811067ffffffffffffffff821117156141df576141de6142be565b5b80604052505050565b60006141f3826140c9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561422657614225614231565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e6f2052756c6573205365740000000000000000000000000000000000000000600082015250565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b7f7361666520616c726561647920696e2075736500000000000000000000000000600082015250565b7f4d6967726174696f6e206661696c6564206f6e2064697361626c650000000000600082015250565b7f696e76616c696420736166652061646472657373000000000000000000000000600082015250565b7f4d6967726174696f6e206661696c6564206f6e20656e61626c65000000000000600082015250565b7f4e6f7420417574686f72697a6564000000000000000000000000000000000000600082015250565b7f4372656174652050726f787920576974682044617461204661696c6564000000600082015250565b7f63616c6c6572206d7573742062652073616665206f72206d656d626572000000600082015250565b7f73616665206d6f64756c65206d75737420626520656e61626c65640000000000600082015250565b7f436f6e74726f6c6c6572206e6f74207265676973746572656400000000000000600082015250565b7f4d6f64756c65205472616e73616374696f6e204661696c656400000000000000600082015250565b7f4f6e6c7920736166652063616e20616464206e65772061646d696e0000000000600082015250565b7f4f6e6c792061646d696e2063616e207570646174652061646d696e0000000000600082015250565b7f506f6420616c7265616479206578697374730000000000000000000000000000600082015250565b7f506f6420646f65736e2774206578697374000000000000000000000000000000600082015250565b7f696e636f727265637420707265764d6f64756c65000000000000000000000000600082015250565b7f55736572206e6f7420617574686f72697a656400000000000000000000000000600082015250565b6002811061460a57614609614260565b5b50565b6146168161406e565b811461462157600080fd5b50565b61462d81614080565b811461463857600080fd5b50565b6146448161408c565b811461464f57600080fd5b50565b61465b816140c9565b811461466657600080fd5b5056fe657865635472616e73616374696f6e28616464726573732c75696e743235362c62797465732c75696e74382c75696e743235362c75696e743235362c75696e743235362c616464726573732c616464726573732c627974657329736574757028616464726573735b5d2c75696e743235362c616464726573732c62797465732c616464726573732c616464726573732c75696e743235362c6164647265737329a26469706673582212202c0a23271960f2b0d6d48d3a5aefa2411b8dea8fd8f8ada421bbdf68b5cfbe3664736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes)": {
        "params": {
          "data": "Passes a flag for an initial creation event",
          "from": "The address sending the membership token",
          "ids": "An array of membership token ids to be transfered",
          "operator": "The address that initiated the action",
          "to": "The address recieveing the membership token"
        }
      },
      "constructor": {
        "details": "Will instantiate safe teller with gnosis master and proxy addresses",
        "params": {
          "_controllerRegistry": "The address of the ControllerRegistry contract",
          "_gnosisMasterAddress": "The gnosis master address",
          "_memberToken": "The address of the MemberToken contract",
          "_proxyFactoryAddress": "The proxy factory address"
        }
      },
      "createPod(address[],uint256,address,bytes32,string)": {
        "params": {
          "_admin": "The address of the pod admin",
          "_ensString": "string of pod ens name (i.e.'mypod.pod.xyz')",
          "_label": "label hash of pod name (i.e labelhash('mypod'))",
          "_members": "The addresses of the members of the pod",
          "threshold": "The number of members that are required to sign a transaction"
        }
      },
      "createPodWithSafe(address,address,bytes32,string)": {
        "details": "Used to create a pod with an existing safeWill automatically distribute membership NFTs to current safe members",
        "params": {
          "_admin": "The address of the pod admin",
          "_ensString": "string of pod ens name (i.e.'mypod.pod.xyz')",
          "_label": "label hash of pod name (i.e labelhash('mypod'))",
          "_safe": "The address of existing safe"
        }
      },
      "migratePodController(uint256,address,address)": {
        "details": "This will nullify all pod state on this controllerUpdate state on _newControllerUpdate controller to _newController in Safe and MemberToken",
        "params": {
          "_newController": "The address of the new pod controller",
          "_podId": "The id number of the pod",
          "_prevModule": "The module that points to the orca module in the safe's ModuleManager linked list"
        }
      },
      "updatePodAdmin(uint256,address)": {
        "params": {
          "_newAdmin": "The address of the new pod admin",
          "_podId": "The id number of the pod"
        }
      },
      "updatePodState(uint256,address,address)": {
        "details": "This is called by another version of controller to migrate a pod to this versionWill only accept calls from registered controllersCan only be called once.",
        "params": {
          "_podAdmin": "The address of the pod admin",
          "_podId": "The id number of the pod",
          "_safeAddress": "The address of the safe"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2327,
        "contract": "contracts/Controller.sol:Controller",
        "label": "podENSRegistrar",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IPodENSRegistrar)4039"
      },
      {
        "astId": 2331,
        "contract": "contracts/Controller.sol:Controller",
        "label": "safeToPodId",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2335,
        "contract": "contracts/Controller.sol:Controller",
        "label": "podIdToSafe",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2339,
        "contract": "contracts/Controller.sol:Controller",
        "label": "podAdmin",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IPodENSRegistrar)4039": {
        "encoding": "inplace",
        "label": "contract IPodENSRegistrar",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}