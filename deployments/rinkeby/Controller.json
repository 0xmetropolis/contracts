{
  "address": "0x8CDc5D32347c4f635Eaa55B1A8cFf17914950dad",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ruleManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_safeTeller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_controllerRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "podId",
          "type": "uint256"
        }
      ],
      "name": "CreatePod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "MemberTokenAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "RuleManagerAddress",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "beforeTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controllerRegistry",
      "outputs": [
        {
          "internalType": "contract IControllerRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "createPod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_safe",
          "type": "address"
        }
      ],
      "name": "createPodWithSafe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_podId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_functionSignature",
          "type": "bytes4"
        },
        {
          "internalType": "bytes32[5]",
          "name": "_functionParams",
          "type": "bytes32[5]"
        },
        {
          "internalType": "uint256",
          "name": "_comparisonLogic",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_comparisonValue",
          "type": "uint256"
        }
      ],
      "name": "createRule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSafeTeller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "memberToken",
      "outputs": [
        {
          "internalType": "contract IMemberToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_podId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newController",
          "type": "address"
        }
      ],
      "name": "migratePodController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "podAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ruleManager",
      "outputs": [
        {
          "internalType": "contract RuleManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "safeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeTeller",
      "outputs": [
        {
          "internalType": "contract SafeTeller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_podId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_podAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_safeAddress",
          "type": "address"
        }
      ],
      "name": "updatePodState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x57395ec34841f2f74d7b08c4cbf5540a066829693dad52c2ba223605eacf134e",
  "receipt": {
    "to": null,
    "from": "0x3f4e2cFE11Aa607570E0Aee7AC74fbff9633fa8E",
    "contractAddress": "0x8CDc5D32347c4f635Eaa55B1A8cFf17914950dad",
    "transactionIndex": 11,
    "gasUsed": "2484857",
    "logsBloom": "0x
    "blockHash": "0xd54b0cf72755a6f18a4cb46e2136b18559c71252a031b8eedf2986a2efb655f5",
    "transactionHash": "0x57395ec34841f2f74d7b08c4cbf5540a066829693dad52c2ba223605eacf134e",
    "logs": [],
    "blockNumber": 9183187,
    "cumulativeGasUsed": "3613087",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7f21F7150913154fd40ba10499c0b9c0F7315C1e",
    "0x36A8AAf241aEA48afF49E345b9493d73BF087319",
    "0x1023cd01f90c388A2A66E631993b7b988AE742cA",
    "0xCfC3dB1fA42AfFc0245615b851dcdA32cd01D54D"
  ],
  "solcInputHash": "f278c53c595dedb9df3ec0dcc47e5d93",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ruleManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safeTeller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controllerRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"podId\",\"type\":\"uint256\"}],\"name\":\"CreatePod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"MemberTokenAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"RuleManagerAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"beforeTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerRegistry\",\"outputs\":[{\"internalType\":\"contract IControllerRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"createPod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safe\",\"type\":\"address\"}],\"name\":\"createPodWithSafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_podId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_functionSignature\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32[5]\",\"name\":\"_functionParams\",\"type\":\"bytes32[5]\"},{\"internalType\":\"uint256\",\"name\":\"_comparisonLogic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_comparisonValue\",\"type\":\"uint256\"}],\"name\":\"createRule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSafeTeller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"memberToken\",\"outputs\":[{\"internalType\":\"contract IMemberToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_podId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"migratePodController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"podAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ruleManager\",\"outputs\":[{\"internalType\":\"contract RuleManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"safeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeTeller\",\"outputs\":[{\"internalType\":\"contract SafeTeller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_podId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_podAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safeAddress\",\"type\":\"address\"}],\"name\":\"updatePodState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes)\":{\"params\":{\"data\":\"Passes a flag for an initial creation event\",\"from\":\"The address sending the membership token\",\"ids\":\"An array of membership token ids to be transfered\",\"operator\":\"The address that initiated the action\",\"to\":\"The address recieveing the membership token\"}},\"constructor\":{\"params\":{\"_controllerRegistry\":\"The address of the ControllerRegistry contract\",\"_memberToken\":\"The address of the MemberToken contract\",\"_ruleManager\":\"The address of the RuleManager contract\",\"_safeTeller\":\"The address of the SafeTeller contract\"}},\"createPod(address[],uint256,address)\":{\"params\":{\"_admin\":\"The address of the pod admin\",\"_members\":\"The addresses of the members of the pod\",\"threshold\":\"The number of members that are required to sign a transaction\"}},\"createPodWithSafe(address,address)\":{\"details\":\"Used to create a pod with an existing safeWill automatically distribute membership NFTs to current safe members\",\"params\":{\"_admin\":\"The address of the pod admin\",\"_safe\":\"The address of existing safe\"}},\"getSafeTeller()\":{\"returns\":{\"_0\":\"The address of the safe teller contract\"}},\"migratePodController(uint256,address)\":{\"params\":{\"_newController\":\"The address of the new pod controller\",\"_podId\":\"The id number of the pod\"}},\"updatePodState(uint256,address,address)\":{\"params\":{\"_podAdmin\":\"The address of the pod admin\",\"_podId\":\"The id number of the pod\",\"_safeAddress\":\"The address of the safe\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Controller.sol\":\"Controller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x61321d2c86346045bf394885ee3afeecc65f9daad2694bc19110967588fd7b5d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/Controller.sol\":{\"content\":\"pragma solidity 0.7.4;\\n\\n/* solhint-disable indent */\\n\\nimport \\\"./interfaces/IController.sol\\\";\\nimport \\\"./interfaces/IMemberToken.sol\\\";\\nimport \\\"./RuleManager.sol\\\";\\nimport \\\"./SafeTeller.sol\\\";\\nimport \\\"./interfaces/IControllerRegistry.sol\\\";\\n\\n// TODO: consider  order of contract  deployment. May not want to deploy all together\\n// this will impact the modifiers that are important for securiy\\n// for not deploying supporting contracts as part of main contract\\n\\ncontract Controller is IController {\\n    event RuleManagerAddress(address contractAddress);\\n    event MemberTokenAddress(address contractAddress);\\n    event CreatePod(uint256 podId);\\n\\n    IMemberToken public memberToken;\\n    RuleManager public ruleManager;\\n    SafeTeller public safeTeller;\\n    IControllerRegistry public controllerRegistry;\\n\\n    mapping(uint256 => address) public safeAddress;\\n    mapping(uint256 => address) public podAdmin;\\n\\n    uint8 internal constant CREATE_EVENT = 0x01;\\n\\n    /**\\n     * @param _memberToken The address of the MemberToken contract\\n     * @param _ruleManager The address of the RuleManager contract\\n     * @param _safeTeller The address of the SafeTeller contract\\n     * @param _controllerRegistry The address of the ControllerRegistry contract\\n     */\\n    constructor(\\n        address _memberToken,\\n        address _ruleManager,\\n        address _safeTeller,\\n        address _controllerRegistry\\n    ) {\\n        memberToken = IMemberToken(_memberToken);\\n        ruleManager = RuleManager(_ruleManager);\\n        safeTeller = SafeTeller(_safeTeller);\\n        controllerRegistry = IControllerRegistry(_controllerRegistry);\\n    }\\n\\n    /**\\n     * @param _members The addresses of the members of the pod\\n     * @param threshold The number of members that are required to sign a transaction\\n     * @param _admin The address of the pod admin\\n     */\\n    function createPod(\\n        address[] memory _members,\\n        uint256 threshold,\\n        address _admin\\n    ) external {\\n        // add create event flag to token data\\n        bytes memory data = new bytes(1);\\n        data[0] = bytes1(uint8(CREATE_EVENT));\\n\\n        uint256 podId = memberToken.createPod(_members, data);\\n\\n        if (_admin != address(0)) podAdmin[podId] = _admin;\\n\\n        emit CreatePod(podId);\\n\\n        safeAddress[podId] = safeTeller.createSafe(podId, _members, threshold);\\n    }\\n\\n    /**\\n     * @dev Used to create a pod with an existing safe\\n     * @dev Will automatically distribute membership NFTs to current safe members\\n     * @param _admin The address of the pod admin\\n     * @param _safe The address of existing safe\\n     */\\n    function createPodWithSafe(address _admin, address _safe) external {\\n        uint256 podId = memberToken.getNextAvailablePodId();\\n        require(_safe != address(0), \\\"invalid safe address\\\");\\n        require(\\n            safeTeller.isModuleEnabled(_safe),\\n            \\\"safe module must be enabled\\\"\\n        );\\n\\n        if (_admin != address(0)) podAdmin[podId] = _admin;\\n\\n        emit CreatePod(podId);\\n\\n        safeAddress[podId] = _safe;\\n\\n        address[] memory members = safeTeller.getMembers(_safe);\\n\\n        // add create event flag to token data\\n        bytes memory data = new bytes(1);\\n        data[0] = bytes1(uint8(CREATE_EVENT));\\n\\n        memberToken.createPod(members, data);\\n    }\\n\\n    function createRule(\\n        uint256 _podId,\\n        address _contractAddress,\\n        bytes4 _functionSignature,\\n        bytes32[5] memory _functionParams,\\n        uint256 _comparisonLogic,\\n        uint256 _comparisonValue\\n    ) external {\\n        //TODO: executable id\\n        require(\\n            msg.sender == podAdmin[_podId] || msg.sender == safeAddress[_podId],\\n            \\\"User not authorized\\\"\\n        );\\n\\n        ruleManager.setPodRule(\\n            _podId,\\n            _contractAddress,\\n            _functionSignature,\\n            _functionParams,\\n            _comparisonLogic,\\n            _comparisonValue\\n        );\\n\\n        ruleManager.finalizeRule(_podId);\\n    }\\n\\n    /**\\n     * @return The address of the safe teller contract\\n     */\\n    function getSafeTeller() external view returns (address) {\\n        return address(safeTeller);\\n    }\\n\\n    /**\\n     * @param _podId The id number of the pod\\n     * @param _newController The address of the new pod controller\\n     */\\n    function migratePodController(uint256 _podId, address _newController)\\n        external\\n    {\\n        require(\\n            controllerRegistry.isRegistered(_newController),\\n            \\\"Controller not registered\\\"\\n        );\\n\\n        address admin = podAdmin[_podId];\\n        address safe = safeAddress[_podId];\\n\\n        require(\\n            msg.sender == admin || msg.sender == safe,\\n            \\\"User not authorized\\\"\\n        );\\n\\n        Controller newController = Controller(_newController);\\n\\n        podAdmin[_podId] = address(0);\\n        safeAddress[_podId] = address(0);\\n\\n        memberToken.migrateMemberController(_podId, _newController);\\n        safeTeller.migrateSafeTeller(safe, newController.getSafeTeller());\\n        newController.updatePodState(_podId, admin, safe);\\n    }\\n\\n    /**\\n     * @param _podId The id number of the pod\\n     * @param _podAdmin The address of the pod admin\\n     * @param _safeAddress The address of the safe\\n     */\\n    function updatePodState(\\n        uint256 _podId,\\n        address _podAdmin,\\n        address _safeAddress\\n    ) external {\\n        require(\\n            controllerRegistry.isRegistered(msg.sender),\\n            \\\"Controller not registered\\\"\\n        );\\n        podAdmin[_podId] = _podAdmin;\\n        safeAddress[_podId] = _safeAddress;\\n    }\\n\\n    /**\\n     * @param operator The address that initiated the action\\n     * @param from The address sending the membership token\\n     * @param to The address recieveing the membership token\\n     * @param ids An array of membership token ids to be transfered\\n     * @param data Passes a flag for an initial creation event\\n     */\\n    function beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory,\\n        bytes memory data\\n    ) external override {\\n        require(msg.sender == address(memberToken), \\\"Not Authorized\\\");\\n\\n        // if create event than side effects have been pre-handled\\n        // no data field on burn\\n        if (to != address(0) && uint8(data[0]) == CREATE_EVENT) return;\\n\\n        for (uint256 i = 0; i < ids.length; i += 1) {\\n            uint256 podId = ids[i];\\n            address safe = safeAddress[podId];\\n            address admin = podAdmin[podId];\\n\\n            // mint event\\n            if (from == address(0)) {\\n                // if there are rules recipient must be rule compliant\\n                if (ruleManager.hasRules(podId)) {\\n                    require(\\n                        ruleManager.isRuleCompliant(podId, to),\\n                        \\\"Not Rule Compliant\\\"\\n                    );\\n                    // if there are no rules operator must be admin, safe or controller\\n                } else {\\n                    require(\\n                        operator == safe ||\\n                            operator == admin ||\\n                            operator == address(this),\\n                        \\\"No Rules Set\\\"\\n                    );\\n                }\\n                safeTeller.onMint(to, safe);\\n\\n                // burn event\\n            } else if (to == address(0)) {\\n                // if there are rules terminee must not be rule compliant\\n                if (ruleManager.hasRules(podId)) {\\n                    require(\\n                        ruleManager.isRuleCompliant(podId, from) == false,\\n                        \\\"Rule Compliant\\\"\\n                    );\\n                    // if there are no rules operator must be admin, safe or controller\\n                } else {\\n                    require(\\n                        operator == safe ||\\n                            operator == admin ||\\n                            operator == address(this),\\n                        \\\"No Rules Set\\\"\\n                    );\\n                }\\n\\n                safeTeller.onBurn(from, safe);\\n\\n                // transfer event\\n            } else {\\n                require(\\n                    ruleManager.isRuleCompliant(podId, to),\\n                    \\\"Not Rule Compliant\\\"\\n                );\\n\\n                safeTeller.onTransfer(from, to, safe);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88cc754076141857a6649faca42b7c764608e35fcbadd1e7816ecca9bffc98cc\"},\"contracts/RuleManager.sol\":{\"content\":\"pragma solidity 0.7.4;\\n\\n/* solhint-disable indent */\\n\\n// This contract manages the membership rules\\n// it is responsible for storing pod rules, and validating rule compliance\\n\\ncontract RuleManager {\\n    // Rules\\n    struct Rule {\\n        address contractAddress;\\n        bytes4 functionSignature;\\n        bytes32[5] functionParams;\\n        uint256 comparisonLogic;\\n        uint256 comparisonValue;\\n        bool isFinalized;\\n    }\\n\\n    address controller;\\n    mapping(uint256 => Rule) public rulesByPod;\\n\\n    event UpdateRule(\\n        uint256 podId,\\n        address contractAddress,\\n        bytes4 functionSignature,\\n        bytes32[5] functionParams,\\n        uint256 comparisonLogic,\\n        uint256 comparisonValue\\n    );\\n\\n    constructor() {\\n        controller = msg.sender;\\n    }\\n\\n    /**\\n     * @param _controller The account address to be assigned as controller\\n     */\\n    function updateController(address _controller) external {\\n        require(_controller != address(0), \\\"Invalid gnosisMaster address\\\");\\n        require(controller == msg.sender, \\\"!controller\\\");\\n        controller = _controller;\\n    }\\n\\n    function setPodRule(\\n        uint256 _podId,\\n        address _contractAddress,\\n        bytes4 _functionSignature,\\n        bytes32[5] memory _functionParams,\\n        uint256 _comparisonLogic,\\n        uint256 _comparisonValue\\n    ) external {\\n        require(controller == msg.sender, \\\"!controller\\\");\\n        rulesByPod[_podId] = Rule(\\n            _contractAddress,\\n            _functionSignature,\\n            _functionParams,\\n            _comparisonLogic,\\n            _comparisonValue,\\n            false\\n        );\\n    }\\n\\n    /**\\n     * @param _podId The id number of the pod\\n     */\\n    function finalizeRule(uint256 _podId) external {\\n        require(controller == msg.sender, \\\"!controller\\\");\\n        rulesByPod[_podId].isFinalized = true;\\n\\n        emit UpdateRule(\\n            _podId,\\n            rulesByPod[_podId].contractAddress,\\n            rulesByPod[_podId].functionSignature,\\n            rulesByPod[_podId].functionParams,\\n            rulesByPod[_podId].comparisonLogic,\\n            rulesByPod[_podId].comparisonValue\\n        );\\n    }\\n\\n    /**\\n     * @param _podId The id number of the pod\\n     */\\n    function hasRules(uint256 _podId) external view returns (bool) {\\n        Rule memory currentRule = rulesByPod[_podId];\\n        return (currentRule.contractAddress != address(0));\\n    }\\n\\n    /**\\n     * @param _podId The id number of the pod\\n     * @param _user The account address of a pod member\\n     */\\n    function isRuleCompliant(uint256 _podId, address _user)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        Rule memory currentRule = rulesByPod[_podId];\\n\\n        // if there are no rules return true\\n        if (currentRule.contractAddress != address(0)) return true;\\n\\n        // check function params for keywords\\n        for (uint256 i = 0; i < currentRule.functionParams.length; i++) {\\n            if (currentRule.functionParams[i] == bytes32(\\\"MEMBER\\\")) {\\n                currentRule.functionParams[i] = bytes32(uint256(_user));\\n            }\\n        }\\n\\n        (bool success, bytes memory result) = currentRule\\n            .contractAddress\\n            .staticcall(\\n                abi.encodePacked(\\n                    currentRule.functionSignature,\\n                    currentRule.functionParams[0],\\n                    currentRule.functionParams[1],\\n                    currentRule.functionParams[2],\\n                    currentRule.functionParams[3],\\n                    currentRule.functionParams[4]\\n                )\\n            );\\n        require(success, \\\"Rule Transaction Failed\\\");\\n\\n        if (currentRule.comparisonLogic == 0) {\\n            return toUint256(result) == currentRule.comparisonValue;\\n        }\\n        if (currentRule.comparisonLogic == 1) {\\n            return toUint256(result) > currentRule.comparisonValue;\\n        }\\n        if (currentRule.comparisonLogic == 2) {\\n            return toUint256(result) < currentRule.comparisonValue;\\n        }\\n        // if invalid rule it is impossible to be compliant\\n        return false;\\n    }\\n\\n    function toUint256(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (uint256 value)\\n    {\\n        assembly {\\n            value := mload(add(_bytes, 0x20))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x726efa2d776b0ec177979b93ea7fceff02c4a4b40f6f307b2ea55dc982832da9\"},\"contracts/SafeTeller.sol\":{\"content\":\"pragma solidity 0.7.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/IGnosisSafe.sol\\\";\\nimport \\\"./interfaces/IGnosisSafeProxyFactory.sol\\\";\\n\\ncontract SafeTeller {\\n    using Address for address;\\n\\n    // mainnet: 0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B;\\n    address public proxyFactoryAddress;\\n\\n    // mainnet: 0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F;\\n    address public gnosisMasterAddress;\\n\\n    string public constant FUNCTION_SIG_SETUP =\\n        \\\"setup(address[],uint256,address,bytes,address,address,uint256,address)\\\";\\n    string public constant FUNCTION_SIG_EXEC =\\n        \\\"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)\\\";\\n\\n    string public constant FUNCTION_SIG_ENABLE = \\\"delegateSetup(address)\\\";\\n\\n    address internal constant SENTINEL = address(0x1);\\n\\n    address public controller;\\n    address public context;\\n\\n    event CreateSafe(uint256 indexed podId, address safeAddress);\\n\\n    /**\\n     * @param _proxyFactoryAddress The proxy factory address\\n     * @param _gnosisMasterAddress The gnosis master address\\n     */\\n    constructor(address _proxyFactoryAddress, address _gnosisMasterAddress) {\\n        require(\\n            _proxyFactoryAddress != address(0),\\n            \\\"Invalid proxyFactory address\\\"\\n        );\\n        require(\\n            _gnosisMasterAddress != address(0),\\n            \\\"Invalid gnosisMaster address\\\"\\n        );\\n        controller = msg.sender;\\n        proxyFactoryAddress = _proxyFactoryAddress;\\n        gnosisMasterAddress = _gnosisMasterAddress;\\n        context = address(this);\\n    }\\n\\n    /**\\n     * @param _controller The address to set as controller\\n     */\\n    function updateController(address _controller) external {\\n        require(_controller != address(0), \\\"Invalid controller address\\\");\\n        require(controller == msg.sender, \\\"!controller\\\");\\n        controller = _controller;\\n    }\\n\\n    /**\\n     * @param safe The address of the safe\\n     * @param _newSafeTeller The address of the new safe teller contract\\n     */\\n    function migrateSafeTeller(address safe, address _newSafeTeller) external {\\n        require(controller == msg.sender, \\\"!controller\\\");\\n        bytes memory enableData = abi.encodeWithSignature(\\n            \\\"enableModule(address)\\\",\\n            _newSafeTeller\\n        );\\n\\n        bool enableSuccess = IGnosisSafe(safe).execTransactionFromModule(\\n            safe,\\n            0,\\n            enableData,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(enableSuccess, \\\"Migration failed on enable\\\");\\n\\n        // find current safe teller in module array\\n        uint256 pageSize = 10;\\n        address index = SENTINEL;\\n        address prevModule = address(0);\\n\\n        while (prevModule == address(0)) {\\n            (address[] memory moduleBuffer, address next) = IGnosisSafe(safe)\\n                .getModulesPaginated(index, pageSize);\\n            require(moduleBuffer[0] != address(0), \\\"module not found\\\");\\n            index = next;\\n\\n            for (uint256 i = 0; i < moduleBuffer.length; i++) {\\n                if (moduleBuffer[i] == address(this))\\n                    prevModule = i > 0 ? moduleBuffer[i - 1] : moduleBuffer[0];\\n            }\\n        }\\n\\n        // disable current safeTeller\\n        bytes memory disableData = abi.encodeWithSignature(\\n            \\\"disableModule(address,address)\\\",\\n            prevModule,\\n            address(this)\\n        );\\n\\n        bool disableSuccess = IGnosisSafe(safe).execTransactionFromModule(\\n            safe,\\n            0,\\n            disableData,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(disableSuccess, \\\"Migration failed on disable\\\");\\n    }\\n\\n    function getMembers(address safe) external returns (address[] memory) {\\n        return IGnosisSafe(safe).getOwners();\\n    }\\n\\n    function isModuleEnabled(address safe) external view returns (bool) {\\n        return IGnosisSafe(safe).isModuleEnabled(address(this));\\n    }\\n\\n    /**\\n     * @param _podId The id number of the pod\\n     * @param _owners The  addresses to be owners of the safe\\n     * @param _threshold The number of owners that are required to sign a transaciton\\n     * @return safeAddress The address of the new safe\\n     */\\n    function createSafe(\\n        uint256 _podId,\\n        address[] memory _owners,\\n        uint256 _threshold\\n    ) external returns (address safeAddress) {\\n        require(controller == msg.sender, \\\"!controller\\\");\\n        bytes memory data = abi.encodeWithSignature(\\n            FUNCTION_SIG_ENABLE,\\n            context\\n        );\\n\\n        // encode the setup call that will be called on the new proxy safe\\n        // from the proxy factory\\n        bytes memory setupData = abi.encodeWithSignature(\\n            FUNCTION_SIG_SETUP,\\n            _owners,\\n            _threshold,\\n            this,\\n            data,\\n            address(0),\\n            address(0),\\n            uint256(0),\\n            address(0)\\n        );\\n\\n        try\\n            IGnosisSafeProxyFactory(proxyFactoryAddress).createProxy(\\n                gnosisMasterAddress,\\n                setupData\\n            )\\n        returns (address newSafeAddress) {\\n            emit CreateSafe(_podId, newSafeAddress);\\n            return newSafeAddress;\\n        } catch (bytes memory) {\\n            revert(\\\"Create Proxy With Data Failed\\\");\\n        }\\n    }\\n\\n    //TODO: could probably do all this as a delegate call\\n    /**\\n     * @param to The account address to add as an owner\\n     * @param safe The address of the safe\\n     */\\n    function onMint(address to, address safe) external {\\n        require(controller == msg.sender, \\\"!controller\\\");\\n        uint256 threshold = IGnosisSafe(safe).getThreshold();\\n\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"addOwnerWithThreshold(address,uint256)\\\",\\n            to,\\n            threshold\\n        );\\n\\n        bool success = IGnosisSafe(safe).execTransactionFromModule(\\n            safe,\\n            0,\\n            data,\\n            IGnosisSafe.Operation.Call\\n        );\\n\\n        require(success, \\\"Module Transaction Failed\\\");\\n    }\\n\\n    /**\\n     * @param from The address to be removed as an owner\\n     * @param safe The address of the safe\\n     */\\n    function onBurn(address from, address safe) external {\\n        require(controller == msg.sender, \\\"!controller\\\");\\n        uint256 threshold = IGnosisSafe(safe).getThreshold();\\n        address[] memory owners = IGnosisSafe(safe).getOwners();\\n\\n        //look for the address pointing to address from\\n        address prevFrom = address(0);\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            if (owners[i] == from) {\\n                if (i == 0) {\\n                    prevFrom = SENTINEL;\\n                } else {\\n                    prevFrom = owners[i - 1];\\n                }\\n            }\\n        }\\n        if (owners.length - 1 < threshold) threshold -= 1;\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"removeOwner(address,address,uint256)\\\",\\n            prevFrom,\\n            from,\\n            threshold\\n        );\\n\\n        bool success = IGnosisSafe(safe).execTransactionFromModule(\\n            safe,\\n            0,\\n            data,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(success, \\\"Module Transaction Failed\\\");\\n    }\\n\\n    /**\\n     * @param from The address being removed as an owner\\n     * @param to The address being added as an owner\\n     * @param safe The address of the safe\\n     */\\n    function onTransfer(\\n        address from,\\n        address to,\\n        address safe\\n    ) external {\\n        require(controller == msg.sender, \\\"!controller\\\");\\n        address[] memory owners = IGnosisSafe(safe).getOwners();\\n\\n        //look for the address pointing to address from\\n        address prevFrom;\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            if (owners[i] == from) {\\n                if (i == 0) {\\n                    prevFrom = SENTINEL;\\n                } else {\\n                    prevFrom = owners[i - 1];\\n                }\\n            }\\n        }\\n\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"swapOwner(address,address,address)\\\",\\n            prevFrom,\\n            from,\\n            to\\n        );\\n\\n        bool success = IGnosisSafe(safe).execTransactionFromModule(\\n            safe,\\n            0,\\n            data,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(success, \\\"Module Transaction Failed\\\");\\n    }\\n\\n    // TODO: move to library\\n    // Used in a delegate call to enable module add on setup\\n    function enableModule(address module) external {\\n        require(module == address(0));\\n    }\\n\\n    function delegateSetup(address _context) external {\\n        this.enableModule(_context);\\n    }\\n}\\n\",\"keccak256\":\"0xde41351ee80902077197ee379ab12a8bdd7fb742fe0b4894c769d251a5c6a6ca\"},\"contracts/interfaces/IController.sol\":{\"content\":\"pragma solidity 0.7.4;\\n\\ninterface IController{\\n\\n    /**\\n     * @param operator The account address that initiated the action\\n     * @param from The account address sending the membership token\\n     * @param to The account address recieving the membership token\\n     * @param ids An array of membership token ids to be transfered\\n     * @param amounts The amount of each membership token type to transfer\\n     * @param data Arbitrary data\\n     */\\n    function beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n\\n}\\n\",\"keccak256\":\"0xf67f65740f1809d373653dd342926cc9c9c2f5dfb08c37000a401506890f85e3\"},\"contracts/interfaces/IControllerRegistry.sol\":{\"content\":\"pragma solidity 0.7.4;\\n\\n\\ninterface IControllerRegistry{\\n\\n    /**\\n     * @param _controller Address to check if registered as a controller\\n     * @return Boolean representing if the address is a registered as a controller\\n     */\\n    function isRegistered(address _controller) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x311e5e52e75bad0f93233c09b605a27116cbb3f7851749b586c5b15a786206b1\"},\"contracts/interfaces/IGnosisSafe.sol\":{\"content\":\"pragma solidity 0.7.4;\\n\\ninterface IGnosisSafe {\\n\\n    enum Operation {Call, DelegateCall}\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Operation operation\\n    ) external returns (bool success);\\n\\n    /// @dev Returns array of owners.\\n    /// @return Array of Safe owners.\\n    function getOwners() external returns (address[] memory);\\n\\n    function getThreshold() external returns (uint256);\\n\\n    /// @dev Returns array of modules.\\n    /// @param start Start of the page.\\n    /// @param pageSize Maximum number of modules that should be returned.\\n    /// @return array Array of modules.\\n    /// @return next Start of the next page.\\n    function getModulesPaginated(address start, uint256 pageSize)\\n        external\\n        returns (address[] memory array, address next);\\n\\n    /// @dev Returns if an module is enabled\\n    /// @return True if the module is enabled\\n    function isModuleEnabled(address module) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfddcf9ea4fe167b6a309820720ad93545203678265ddc6a7efc6421015d31ed7\"},\"contracts/interfaces/IGnosisSafeProxyFactory.sol\":{\"content\":\"pragma solidity 0.7.4;\\n\\ninterface IGnosisSafeProxyFactory {\\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\\n    /// @param singleton Address of singleton contract.\\n    /// @param data Payload for message call sent to new proxy contract.\\n    function createProxy(address singleton, bytes memory data)\\n        external\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x4199e8d9c05fc0089897d216a21f9ed624850cc387661e197d08308bef045fb8\"},\"contracts/interfaces/IMemberToken.sol\":{\"content\":\"pragma solidity 0.7.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface IMemberToken is IERC1155 {\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Indicates weither any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) external view returns (bool);\\n\\n    function getNextAvailablePodId() external view returns (uint256);\\n\\n    /**\\n     * @param _podId The pod id number \\n     * @param _newController The address of the new controller\\n     */\\n    function migrateMemberController(uint256 _podId, address _newController)\\n        external;\\n\\n    /**\\n     * @param _account The account address to transfer the membership token to\\n     * @param _id The membership token id to mint\\n     * @param data Arbitrary data\\n     */\\n    function mint(\\n        address _account,\\n        uint256 _id,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @param _accounts The account addresses to transfer the membership tokens to\\n     * @param _id The membership token id to mint\\n     * @param data Arbitrary data\\n     */\\n    function mintSingleBatch(\\n        address[] memory _accounts,\\n        uint256 _id,\\n        bytes memory data\\n    ) external;\\n\\n    function createPod(address[] memory _accounts, bytes memory data) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x88e28e624f8da2dafc831ebd967761c210bc991c8244c19f08b031eafe675413\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes)": {
        "params": {
          "data": "Passes a flag for an initial creation event",
          "from": "The address sending the membership token",
          "ids": "An array of membership token ids to be transfered",
          "operator": "The address that initiated the action",
          "to": "The address recieveing the membership token"
        }
      },
      "constructor": {
        "params": {
          "_controllerRegistry": "The address of the ControllerRegistry contract",
          "_memberToken": "The address of the MemberToken contract",
          "_ruleManager": "The address of the RuleManager contract",
          "_safeTeller": "The address of the SafeTeller contract"
        }
      },
      "createPod(address[],uint256,address)": {
        "params": {
          "_admin": "The address of the pod admin",
          "_members": "The addresses of the members of the pod",
          "threshold": "The number of members that are required to sign a transaction"
        }
      },
      "createPodWithSafe(address,address)": {
        "details": "Used to create a pod with an existing safeWill automatically distribute membership NFTs to current safe members",
        "params": {
          "_admin": "The address of the pod admin",
          "_safe": "The address of existing safe"
        }
      },
      "getSafeTeller()": {
        "returns": {
          "_0": "The address of the safe teller contract"
        }
      },
      "migratePodController(uint256,address)": {
        "params": {
          "_newController": "The address of the new pod controller",
          "_podId": "The id number of the pod"
        }
      },
      "updatePodState(uint256,address,address)": {
        "params": {
          "_podAdmin": "The address of the pod admin",
          "_podId": "The id number of the pod",
          "_safeAddress": "The address of the safe"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2061,
        "contract": "contracts/Controller.sol:Controller",
        "label": "memberToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IMemberToken)4469"
      },
      {
        "astId": 2063,
        "contract": "contracts/Controller.sol:Controller",
        "label": "ruleManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(RuleManager)3603"
      },
      {
        "astId": 2065,
        "contract": "contracts/Controller.sol:Controller",
        "label": "safeTeller",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(SafeTeller)4305"
      },
      {
        "astId": 2067,
        "contract": "contracts/Controller.sol:Controller",
        "label": "controllerRegistry",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IControllerRegistry)4337"
      },
      {
        "astId": 2071,
        "contract": "contracts/Controller.sol:Controller",
        "label": "safeAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2075,
        "contract": "contracts/Controller.sol:Controller",
        "label": "podAdmin",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IControllerRegistry)4337": {
        "encoding": "inplace",
        "label": "contract IControllerRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IMemberToken)4469": {
        "encoding": "inplace",
        "label": "contract IMemberToken",
        "numberOfBytes": "20"
      },
      "t_contract(RuleManager)3603": {
        "encoding": "inplace",
        "label": "contract RuleManager",
        "numberOfBytes": "20"
      },
      "t_contract(SafeTeller)4305": {
        "encoding": "inplace",
        "label": "contract SafeTeller",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}