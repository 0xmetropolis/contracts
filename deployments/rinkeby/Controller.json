{
  "address": "0x5c558eAf704d5c77EeDa7AFAcD4CcB398631A9aa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_controllerRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_proxyFactoryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gnosisMasterAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "podId",
          "type": "uint256"
        }
      ],
      "name": "CreatePod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "podId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "safeAddress",
          "type": "address"
        }
      ],
      "name": "CreateSafe",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FUNCTION_SIG_ENABLE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUNCTION_SIG_EXEC",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUNCTION_SIG_SETUP",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "beforeTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "context",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controllerRegistry",
      "outputs": [
        {
          "internalType": "contract IControllerRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "createPod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_safe",
          "type": "address"
        }
      ],
      "name": "createPodWithSafe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_context",
          "type": "address"
        }
      ],
      "name": "delegateSetup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "enableModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        }
      ],
      "name": "getSafeMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gnosisMasterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "isSafeMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        }
      ],
      "name": "isSafeModuleEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "memberToken",
      "outputs": [
        {
          "internalType": "contract IMemberToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_podId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_prevModule",
          "type": "address"
        }
      ],
      "name": "migratePodController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "podAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "safeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_podId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "updatePodAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_podId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_podAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_safeAddress",
          "type": "address"
        }
      ],
      "name": "updatePodState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc00b9417ba76737023716509ef726fefe6f3d04d6db6d630702d24f1f127d6e1",
  "receipt": {
    "to": null,
    "from": "0x3f4e2cFE11Aa607570E0Aee7AC74fbff9633fa8E",
    "contractAddress": "0x5c558eAf704d5c77EeDa7AFAcD4CcB398631A9aa",
    "transactionIndex": 11,
    "gasUsed": "3929916",
    "logsBloom": "0x
    "blockHash": "0xce5f2badbe0e84167e33ee00e9acfd111b9807d3df5e745a46f1e137053bf5aa",
    "transactionHash": "0xc00b9417ba76737023716509ef726fefe6f3d04d6db6d630702d24f1f127d6e1",
    "logs": [],
    "blockNumber": 9414928,
    "cumulativeGasUsed": "5835760",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbC45A0dc497f15FD31cA81fa7D24FFc48E9c9454",
    "0xCf80fE424555B75c5ce7eF03D00c59c05DDd340A",
    "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
    "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"
  ],
  "solcInputHash": "cb4e690d2b594a600f25425a38e6572f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controllerRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxyFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gnosisMasterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"podId\",\"type\":\"uint256\"}],\"name\":\"CreatePod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"podId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"safeAddress\",\"type\":\"address\"}],\"name\":\"CreateSafe\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FUNCTION_SIG_ENABLE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNCTION_SIG_EXEC\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNCTION_SIG_SETUP\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"beforeTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"context\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerRegistry\",\"outputs\":[{\"internalType\":\"contract IControllerRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"createPod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safe\",\"type\":\"address\"}],\"name\":\"createPodWithSafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_context\",\"type\":\"address\"}],\"name\":\"delegateSetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"enableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"}],\"name\":\"getSafeMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gnosisMasterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"isSafeMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"}],\"name\":\"isSafeModuleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"memberToken\",\"outputs\":[{\"internalType\":\"contract IMemberToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_podId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prevModule\",\"type\":\"address\"}],\"name\":\"migratePodController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"podAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"safeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_podId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"updatePodAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_podId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_podAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safeAddress\",\"type\":\"address\"}],\"name\":\"updatePodState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes)\":{\"params\":{\"data\":\"Passes a flag for an initial creation event\",\"from\":\"The address sending the membership token\",\"ids\":\"An array of membership token ids to be transfered\",\"operator\":\"The address that initiated the action\",\"to\":\"The address recieveing the membership token\"}},\"constructor\":{\"params\":{\"_controllerRegistry\":\"The address of the ControllerRegistry contract\",\"_gnosisMasterAddress\":\"The gnosis master address\",\"_memberToken\":\"The address of the MemberToken contract\",\"_proxyFactoryAddress\":\"The proxy factory address\"}},\"createPod(address[],uint256,address)\":{\"params\":{\"_admin\":\"The address of the pod admin\",\"_members\":\"The addresses of the members of the pod\",\"threshold\":\"The number of members that are required to sign a transaction\"}},\"createPodWithSafe(address,address)\":{\"details\":\"Used to create a pod with an existing safeWill automatically distribute membership NFTs to current safe members\",\"params\":{\"_admin\":\"The address of the pod admin\",\"_safe\":\"The address of existing safe\"}},\"migratePodController(uint256,address,address)\":{\"params\":{\"_newController\":\"The address of the new pod controller\",\"_podId\":\"The id number of the pod\"}},\"updatePodAdmin(uint256,address)\":{\"params\":{\"_newAdmin\":\"The address of the new pod admin\",\"_podId\":\"The id number of the pod\"}},\"updatePodState(uint256,address,address)\":{\"details\":\"This is called by another version of controller to migrate a pod to this versionWill only accept calls from registered controllersCan only be called once.\",\"params\":{\"_podAdmin\":\"The address of the pod admin\",\"_podId\":\"The id number of the pod\",\"_safeAddress\":\"The address of the safe\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Controller.sol\":\"Controller\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Controller.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\n/* solhint-disable indent */\\n\\nimport \\\"./interfaces/IController.sol\\\";\\nimport \\\"./interfaces/IMemberToken.sol\\\";\\nimport \\\"./interfaces/IControllerRegistry.sol\\\";\\nimport \\\"./SafeTeller.sol\\\";\\n\\ncontract Controller is IController, SafeTeller {\\n    event CreatePod(uint256 podId);\\n\\n    IMemberToken public memberToken;\\n    IControllerRegistry public controllerRegistry;\\n\\n    mapping(uint256 => address) public safeAddress;\\n    mapping(uint256 => address) public podAdmin;\\n\\n    uint8 internal constant CREATE_EVENT = 0x01;\\n\\n    /**\\n     * @param _memberToken The address of the MemberToken contract\\n     * @param _controllerRegistry The address of the ControllerRegistry contract\\n     * @param _proxyFactoryAddress The proxy factory address\\n     * @param _gnosisMasterAddress The gnosis master address\\n     */\\n    constructor(\\n        address _memberToken,\\n        address _controllerRegistry,\\n        address _proxyFactoryAddress,\\n        address _gnosisMasterAddress\\n    ) {\\n        require(_memberToken != address(0), \\\"Invalid address\\\");\\n        require(_controllerRegistry != address(0), \\\"Invalid address\\\");\\n        require(_proxyFactoryAddress != address(0), \\\"Invalid address\\\");\\n        require(_gnosisMasterAddress != address(0), \\\"Invalid address\\\");\\n\\n        memberToken = IMemberToken(_memberToken);\\n        controllerRegistry = IControllerRegistry(_controllerRegistry);\\n        setupSafeTeller(_proxyFactoryAddress, _gnosisMasterAddress);\\n    }\\n\\n    /**\\n     * @param _members The addresses of the members of the pod\\n     * @param threshold The number of members that are required to sign a transaction\\n     * @param _admin The address of the pod admin\\n     */\\n    function createPod(\\n        address[] memory _members,\\n        uint256 threshold,\\n        address _admin\\n    ) external {\\n        // add create event flag to token data\\n        bytes memory data = new bytes(1);\\n        data[0] = bytes1(uint8(CREATE_EVENT));\\n\\n        uint256 podId = memberToken.createPod(_members, data);\\n\\n        if (_admin != address(0)) podAdmin[podId] = _admin;\\n\\n        emit CreatePod(podId);\\n\\n        safeAddress[podId] = createSafe(podId, _members, threshold);\\n    }\\n\\n    /**\\n     * @dev Used to create a pod with an existing safe\\n     * @dev Will automatically distribute membership NFTs to current safe members\\n     * @param _admin The address of the pod admin\\n     * @param _safe The address of existing safe\\n     */\\n    function createPodWithSafe(address _admin, address _safe) external {\\n        uint256 podId = memberToken.getNextAvailablePodId();\\n        require(_safe != address(0), \\\"invalid safe address\\\");\\n        require(isSafeModuleEnabled(_safe), \\\"safe module must be enabled\\\");\\n        require(\\n            isSafeMember(_safe, msg.sender) || msg.sender == _safe,\\n            \\\"caller must be safe or member\\\"\\n        );\\n\\n        if (_admin != address(0)) podAdmin[podId] = _admin;\\n\\n        emit CreatePod(podId);\\n\\n        safeAddress[podId] = _safe;\\n\\n        address[] memory members = getSafeMembers(_safe);\\n\\n        // add create event flag to token data\\n        bytes memory data = new bytes(1);\\n        data[0] = bytes1(uint8(CREATE_EVENT));\\n\\n        require(\\n            podId == memberToken.createPod(members, data),\\n            \\\"Mismatched podId on create\\\"\\n        );\\n    }\\n\\n    /**\\n     * @param _podId The id number of the pod\\n     * @param _newAdmin The address of the new pod admin\\n     */\\n    function updatePodAdmin(uint256 _podId, address _newAdmin) external {\\n        address admin = podAdmin[_podId];\\n        address safe = safeAddress[_podId];\\n\\n        require(safe != address(0), \\\"Pod doesn't exist\\\");\\n\\n        // if there is no admin it can only be added by safe\\n        if (admin == address(0)) {\\n            require(msg.sender == safe, \\\"Only safe can add new admin\\\");\\n        } else {\\n            require(msg.sender == admin, \\\"Only admin can update admin\\\");\\n        }\\n        safeAddress[_podId] = _newAdmin;\\n    }\\n\\n    /**\\n     * @param _podId The id number of the pod\\n     * @param _newController The address of the new pod controller\\n     */\\n    function migratePodController(\\n        uint256 _podId,\\n        address _newController,\\n        address _prevModule\\n    ) external {\\n        require(_newController != address(0), \\\"Invalid address\\\");\\n        require(\\n            controllerRegistry.isRegistered(_newController),\\n            \\\"Controller not registered\\\"\\n        );\\n\\n        address admin = podAdmin[_podId];\\n        address safe = safeAddress[_podId];\\n\\n        require(\\n            msg.sender == admin || msg.sender == safe,\\n            \\\"User not authorized\\\"\\n        );\\n\\n        Controller newController = Controller(_newController);\\n\\n        podAdmin[_podId] = address(0);\\n        safeAddress[_podId] = address(0);\\n\\n        memberToken.migrateMemberController(_podId, _newController);\\n        migrateSafeTeller(safe, _newController, _prevModule);\\n        newController.updatePodState(_podId, admin, safe);\\n    }\\n\\n    /**\\n     * @dev This is called by another version of controller to migrate a pod to this version\\n     * @dev Will only accept calls from registered controllers\\n     * @dev Can only be called once.\\n     * @param _podId The id number of the pod\\n     * @param _podAdmin The address of the pod admin\\n     * @param _safeAddress The address of the safe\\n     */\\n    function updatePodState(\\n        uint256 _podId,\\n        address _podAdmin,\\n        address _safeAddress\\n    ) external {\\n        require(_safeAddress != address(0), \\\"Invalid address\\\");\\n        require(\\n            controllerRegistry.isRegistered(msg.sender),\\n            \\\"Controller not registered\\\"\\n        );\\n        require(\\n            podAdmin[_podId] == address(0) && safeAddress[_podId] == address(0),\\n            \\\"Pod already exists\\\"\\n        );\\n        podAdmin[_podId] = _podAdmin;\\n        safeAddress[_podId] = _safeAddress;\\n    }\\n\\n    /**\\n     * @param operator The address that initiated the action\\n     * @param from The address sending the membership token\\n     * @param to The address recieveing the membership token\\n     * @param ids An array of membership token ids to be transfered\\n     * @param data Passes a flag for an initial creation event\\n     */\\n    function beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory,\\n        bytes memory data\\n    ) external override {\\n        require(msg.sender == address(memberToken), \\\"Not Authorized\\\");\\n\\n        // if create event than side effects have been pre-handled\\n        // only recognise data flags from this controller\\n        if (operator == address(this) && uint8(data[0]) == CREATE_EVENT) return;\\n\\n        for (uint256 i = 0; i < ids.length; i += 1) {\\n            uint256 podId = ids[i];\\n            address safe = safeAddress[podId];\\n            address admin = podAdmin[podId];\\n\\n            if (from == address(0)) {\\n                // mint event\\n\\n                // there are no rules operator must be admin, safe or controller\\n                require(\\n                    operator == safe ||\\n                        operator == admin ||\\n                        operator == address(this),\\n                    \\\"No Rules Set\\\"\\n                );\\n\\n                onMint(to, safe);\\n            } else if (to == address(0)) {\\n                // burn event\\n\\n                // there are no rules  operator must be admin, safe or controller\\n                require(\\n                    operator == safe ||\\n                        operator == admin ||\\n                        operator == address(this),\\n                    \\\"No Rules Set\\\"\\n                );\\n\\n                onBurn(from, safe);\\n            } else {\\n                // transfer event\\n                onTransfer(from, to, safe);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e667a093939e18ac8c8b0d4e7adaf8dda36c16f8293258df3fffea215e084e8\"},\"contracts/SafeTeller.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/IGnosisSafe.sol\\\";\\nimport \\\"./interfaces/IGnosisSafeProxyFactory.sol\\\";\\n\\ncontract SafeTeller {\\n    using Address for address;\\n\\n    // mainnet: 0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B;\\n    address public proxyFactoryAddress;\\n\\n    // mainnet: 0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F;\\n    address public gnosisMasterAddress;\\n\\n    string public constant FUNCTION_SIG_SETUP =\\n        \\\"setup(address[],uint256,address,bytes,address,address,uint256,address)\\\";\\n    string public constant FUNCTION_SIG_EXEC =\\n        \\\"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)\\\";\\n\\n    string public constant FUNCTION_SIG_ENABLE = \\\"delegateSetup(address)\\\";\\n\\n    address internal constant SENTINEL = address(0x1);\\n\\n    address public context;\\n\\n    event CreateSafe(uint256 indexed podId, address safeAddress);\\n\\n    /**\\n     * @param _proxyFactoryAddress The proxy factory address\\n     * @param _gnosisMasterAddress The gnosis master address\\n     */\\n    function setupSafeTeller(\\n        address _proxyFactoryAddress,\\n        address _gnosisMasterAddress\\n    ) internal {\\n        require(\\n            _proxyFactoryAddress != address(0),\\n            \\\"Invalid proxyFactory address\\\"\\n        );\\n        require(\\n            _gnosisMasterAddress != address(0),\\n            \\\"Invalid gnosisMaster address\\\"\\n        );\\n        proxyFactoryAddress = _proxyFactoryAddress;\\n        gnosisMasterAddress = _gnosisMasterAddress;\\n        context = address(this);\\n    }\\n\\n    /**\\n     * @param _safe The address of the safe\\n     * @param _newSafeTeller The address of the new safe teller contract\\n     */\\n    function migrateSafeTeller(\\n        address _safe,\\n        address _newSafeTeller,\\n        address _prevModule\\n    ) internal {\\n        // add new safeTeller\\n        bytes memory enableData = abi.encodeWithSignature(\\n            \\\"enableModule(address)\\\",\\n            _newSafeTeller\\n        );\\n\\n        bool enableSuccess = IGnosisSafe(_safe).execTransactionFromModule(\\n            _safe,\\n            0,\\n            enableData,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(enableSuccess, \\\"Migration failed on enable\\\");\\n\\n        // validate prevModule of current safe teller\\n        (address[] memory moduleBuffer, ) = IGnosisSafe(_safe)\\n            .getModulesPaginated(_prevModule, 1);\\n        require(moduleBuffer[0] == address(this), \\\"incorrect prevModule\\\");\\n\\n        // disable current safeTeller\\n        bytes memory disableData = abi.encodeWithSignature(\\n            \\\"disableModule(address,address)\\\",\\n            _prevModule,\\n            address(this)\\n        );\\n\\n        bool disableSuccess = IGnosisSafe(_safe).execTransactionFromModule(\\n            _safe,\\n            0,\\n            disableData,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(disableSuccess, \\\"Migration failed on disable\\\");\\n    }\\n\\n    function getSafeMembers(address safe)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        return IGnosisSafe(safe).getOwners();\\n    }\\n\\n    function isSafeModuleEnabled(address safe) public view returns (bool) {\\n        return IGnosisSafe(safe).isModuleEnabled(address(this));\\n    }\\n\\n    function isSafeMember(address safe, address member)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return IGnosisSafe(safe).isOwner(member);\\n    }\\n\\n    /**\\n     * @param _podId The id number of the pod\\n     * @param _owners The  addresses to be owners of the safe\\n     * @param _threshold The number of owners that are required to sign a transaciton\\n     * @return safeAddress The address of the new safe\\n     */\\n    function createSafe(\\n        uint256 _podId,\\n        address[] memory _owners,\\n        uint256 _threshold\\n    ) internal returns (address safeAddress) {\\n        bytes memory data = abi.encodeWithSignature(\\n            FUNCTION_SIG_ENABLE,\\n            context\\n        );\\n\\n        // encode the setup call that will be called on the new proxy safe\\n        // from the proxy factory\\n        bytes memory setupData = abi.encodeWithSignature(\\n            FUNCTION_SIG_SETUP,\\n            _owners,\\n            _threshold,\\n            this,\\n            data,\\n            address(0),\\n            address(0),\\n            uint256(0),\\n            address(0)\\n        );\\n\\n        try\\n            IGnosisSafeProxyFactory(proxyFactoryAddress).createProxy(\\n                gnosisMasterAddress,\\n                setupData\\n            )\\n        returns (address newSafeAddress) {\\n            emit CreateSafe(_podId, newSafeAddress);\\n            return newSafeAddress;\\n        } catch (bytes memory) {\\n            revert(\\\"Create Proxy With Data Failed\\\");\\n        }\\n    }\\n\\n    //TODO: could probably do all this as a delegate call\\n    /**\\n     * @param to The account address to add as an owner\\n     * @param safe The address of the safe\\n     */\\n    function onMint(address to, address safe) internal {\\n        uint256 threshold = IGnosisSafe(safe).getThreshold();\\n\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"addOwnerWithThreshold(address,uint256)\\\",\\n            to,\\n            threshold\\n        );\\n\\n        bool success = IGnosisSafe(safe).execTransactionFromModule(\\n            safe,\\n            0,\\n            data,\\n            IGnosisSafe.Operation.Call\\n        );\\n\\n        require(success, \\\"Module Transaction Failed\\\");\\n    }\\n\\n    /**\\n     * @param from The address to be removed as an owner\\n     * @param safe The address of the safe\\n     */\\n    function onBurn(address from, address safe) internal {\\n        uint256 threshold = IGnosisSafe(safe).getThreshold();\\n        address[] memory owners = IGnosisSafe(safe).getOwners();\\n\\n        //look for the address pointing to address from\\n        address prevFrom = address(0);\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            if (owners[i] == from) {\\n                if (i == 0) {\\n                    prevFrom = SENTINEL;\\n                } else {\\n                    prevFrom = owners[i - 1];\\n                }\\n            }\\n        }\\n        if (owners.length - 1 < threshold) threshold -= 1;\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"removeOwner(address,address,uint256)\\\",\\n            prevFrom,\\n            from,\\n            threshold\\n        );\\n\\n        bool success = IGnosisSafe(safe).execTransactionFromModule(\\n            safe,\\n            0,\\n            data,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(success, \\\"Module Transaction Failed\\\");\\n    }\\n\\n    /**\\n     * @param from The address being removed as an owner\\n     * @param to The address being added as an owner\\n     * @param safe The address of the safe\\n     */\\n    function onTransfer(\\n        address from,\\n        address to,\\n        address safe\\n    ) internal {\\n        address[] memory owners = IGnosisSafe(safe).getOwners();\\n\\n        //look for the address pointing to address from\\n        address prevFrom;\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            if (owners[i] == from) {\\n                if (i == 0) {\\n                    prevFrom = SENTINEL;\\n                } else {\\n                    prevFrom = owners[i - 1];\\n                }\\n            }\\n        }\\n\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"swapOwner(address,address,address)\\\",\\n            prevFrom,\\n            from,\\n            to\\n        );\\n\\n        bool success = IGnosisSafe(safe).execTransactionFromModule(\\n            safe,\\n            0,\\n            data,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(success, \\\"Module Transaction Failed\\\");\\n    }\\n\\n    // TODO: move to library\\n    // Used in a delegate call to enable module add on setup\\n    function enableModule(address module) external {\\n        require(module == address(0));\\n    }\\n\\n    function delegateSetup(address _context) external {\\n        this.enableModule(_context);\\n    }\\n}\\n\",\"keccak256\":\"0xe0f7ce9d8cf990bc13424c8ab55b436ac7286a910a55a3e117191ce88de3336d\"},\"contracts/interfaces/IController.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\ninterface IController{\\n\\n    /**\\n     * @param operator The account address that initiated the action\\n     * @param from The account address sending the membership token\\n     * @param to The account address recieving the membership token\\n     * @param ids An array of membership token ids to be transfered\\n     * @param amounts The amount of each membership token type to transfer\\n     * @param data Arbitrary data\\n     */\\n    function beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n\\n}\\n\",\"keccak256\":\"0x49c623fd7b83f04db221bf69af147566ecfba5a7d76d5241d4e453b86449e478\"},\"contracts/interfaces/IControllerRegistry.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\n\\ninterface IControllerRegistry{\\n\\n    /**\\n     * @param _controller Address to check if registered as a controller\\n     * @return Boolean representing if the address is a registered as a controller\\n     */\\n    function isRegistered(address _controller) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x02e7853f4677cafd67f4a486cea842929067ca7b764b468e54922180998d5c4c\"},\"contracts/interfaces/IGnosisSafe.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\ninterface IGnosisSafe {\\n\\n    enum Operation {Call, DelegateCall}\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Operation operation\\n    ) external returns (bool success);\\n\\n    /// @dev Returns array of owners.\\n    /// @return Array of Safe owners.\\n    function getOwners() external view returns (address[] memory);\\n\\n    function isOwner(address owner) external view returns (bool);\\n\\n    function getThreshold() external returns (uint256);\\n\\n    /// @dev Returns array of modules.\\n    /// @param start Start of the page.\\n    /// @param pageSize Maximum number of modules that should be returned.\\n    /// @return array Array of modules.\\n    /// @return next Start of the next page.\\n    function getModulesPaginated(address start, uint256 pageSize)\\n        external \\n        view\\n        returns (address[] memory array, address next);\\n\\n    /// @dev Returns if an module is enabled\\n    /// @return True if the module is enabled\\n    function isModuleEnabled(address module) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x337ab03fe75425112f380a2a6d4a150da49b5fcf5eb7aa1808e5f24429f37ed5\"},\"contracts/interfaces/IGnosisSafeProxyFactory.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\ninterface IGnosisSafeProxyFactory {\\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\\n    /// @param singleton Address of singleton contract.\\n    /// @param data Payload for message call sent to new proxy contract.\\n    function createProxy(address singleton, bytes memory data)\\n        external\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x1bddd6110ad627fda30e8735f689e46496069633f27bc0c29ecab5043fb33b20\"},\"contracts/interfaces/IMemberToken.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface IMemberToken is IERC1155 {\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Indicates weither any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) external view returns (bool);\\n\\n    function getNextAvailablePodId() external view returns (uint256);\\n\\n    /**\\n     * @param _podId The pod id number \\n     * @param _newController The address of the new controller\\n     */\\n    function migrateMemberController(uint256 _podId, address _newController)\\n        external;\\n\\n    /**\\n     * @param _account The account address to transfer the membership token to\\n     * @param _id The membership token id to mint\\n     * @param data Arbitrary data\\n     */\\n    function mint(\\n        address _account,\\n        uint256 _id,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @param _accounts The account addresses to transfer the membership tokens to\\n     * @param _id The membership token id to mint\\n     * @param data Arbitrary data\\n     */\\n    function mintSingleBatch(\\n        address[] memory _accounts,\\n        uint256 _id,\\n        bytes memory data\\n    ) external;\\n\\n    function createPod(address[] memory _accounts, bytes memory data) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xc597ff76776d203c80fcd6b90440f617858bdd3103f9ad33500919781e9404a0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c806374d4f6d0116100b8578063c7e2a4fc1161007c578063c7e2a4fc14610316578063cf00cec914610346578063d0496d6a14610376578063e1fc2cc114610394578063f0f39f5d146103b0578063fe258da7146103cc57610137565b806374d4f6d014610282578063827be3cc1461029e578063b06a4120146102bc578063bbc4541b146102da578063be5405d2146102f857610137565b8063436f8d03116100ff578063436f8d03146101de5780634a9b5db71461020e5780635cb543841461022c578063610b59251461024a57806362067cd11461026657610137565b806311dc129b1461013c57806326a13d30146101585780633115e00914610176578063346e5c48146101a657806341a3bb2a146101c2575b600080fd5b6101566004803603810190610151919061303e565b6103fc565b005b61016061066a565b60405161016d91906138b9565b60405180910390f35b610190600480360381019061018b91906130da565b6106a3565b60405161019d9190613603565b60405180910390f35b6101c060048036038101906101bb9190613134565b6106d6565b005b6101dc60048036038101906101d79190612e78565b610925565b005b6101f860048036038101906101f391906130da565b610dae565b6040516102059190613603565b60405180910390f35b610216610de1565b60405161022391906138b9565b60405180910390f35b610234610dfd565b604051610241919061389e565b60405180910390f35b610264600480360381019061025f9190612e1e565b610e23565b005b610280600480360381019061027b9190613174565b610e5f565b005b61029c60048036038101906102979190612e1e565b61116f565b005b6102a66111dd565b6040516102b391906138b9565b60405180910390f35b6102c46111f9565b6040516102d19190613603565b60405180910390f35b6102e261121f565b6040516102ef9190613883565b60405180910390f35b610300611245565b60405161030d9190613603565b60405180910390f35b610330600480360381019061032b9190612e1e565b611269565b60405161033d9190613868565b60405180910390f35b610360600480360381019061035b9190612e1e565b6112fb565b60405161036d9190613783565b60405180910390f35b61037e611387565b60405161038b9190613603565b60405180910390f35b6103ae60048036038101906103a99190613174565b6113ad565b005b6103ca60048036038101906103c59190612eb8565b6117d7565b005b6103e660048036038101906103e19190612e78565b611bd8565b6040516103f39190613868565b60405180910390f35b6000600167ffffffffffffffff81111561041957610418613f7e565b5b6040519080825280601f01601f19166020018201604052801561044b5781602001600182028036833780820191505090505b509050600160f81b8160008151811061046757610466613f4f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639aa0055e86846040518363ffffffff1660e01b81526004016104f59291906137a5565b602060405180830381600087803b15801561050f57600080fd5b505af1158015610523573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105479190613107565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146105d057826006600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f2d5eeb2cf7a3216b59bde08d3c9416a7e4da4b8d3064705f7ea767bed09b941f816040516105ff9190613b1b565b60405180910390a1610612818686611c6b565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b6040518060400160405280601681526020017f64656c656761746553657475702861646472657373290000000000000000000081525081565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006006600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006005600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ad90613abb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561085e578073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610859576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085090613a5b565b60405180910390fd5b6108cd565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c390613a7b565b60405180910390fd5b5b826005600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e9337026040518163ffffffff1660e01b815260040160206040518083038186803b15801561098f57600080fd5b505afa1580156109a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c79190613107565b9050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a309061393b565b60405180910390fd5b610a4282611269565b610a81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a78906139db565b60405180910390fd5b610a8b8233611bd8565b80610ac157508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610b00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af7906139bb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610b8757826006600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f2d5eeb2cf7a3216b59bde08d3c9416a7e4da4b8d3064705f7ea767bed09b941f81604051610bb69190613b1b565b60405180910390a1816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000610c1b836112fb565b90506000600167ffffffffffffffff811115610c3a57610c39613f7e565b5b6040519080825280601f01601f191660200182016040528015610c6c5781602001600182028036833780820191505090505b509050600160f81b81600081518110610c8857610c87613f4f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639aa0055e83836040518363ffffffff1660e01b8152600401610d149291906137a5565b602060405180830381600087803b158015610d2e57600080fd5b505af1158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d669190613107565b8314610da7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9e906139fb565b60405180910390fd5b5050505050565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060800160405280605a8152602001614313605a913981565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e5c57600080fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ecf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec6906138fb565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c3c5a547336040518263ffffffff1660e01b8152600401610f2a9190613603565b60206040518083038186803b158015610f4257600080fd5b505afa158015610f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7a91906130ad565b610fb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb090613a1b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166006600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156110875750600073ffffffffffffffffffffffffffffffffffffffff166005600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6110c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bd90613a9b565b60405180910390fd5b816006600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806005600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b3073ffffffffffffffffffffffffffffffffffffffff1663610b5925826040518263ffffffff1660e01b81526004016111a89190613603565b600060405180830381600087803b1580156111c257600080fd5b505af11580156111d6573d6000803e3d6000fd5b5050505050565b60405180608001604052806046815260200161436d6046913981565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff16632d9ad53d306040518263ffffffff1660e01b81526004016112a49190613603565b60206040518083038186803b1580156112bc57600080fd5b505afa1580156112d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f491906130ad565b9050919050565b60608173ffffffffffffffffffffffffffffffffffffffff1663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561134357600080fd5b505afa158015611357573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906113809190612f99565b9050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561141d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611414906138fb565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c3c5a547836040518263ffffffff1660e01b81526004016114789190613603565b60206040518083038186803b15801561149057600080fd5b505afa1580156114a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c891906130ad565b611507576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114fe90613a1b565b60405180910390fd5b60006006600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006005600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806115dc57508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61161b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161290613afb565b60405180910390fd5b600084905060006006600088815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006005600088815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638278665487876040518363ffffffff1660e01b8152600401611723929190613b36565b600060405180830381600087803b15801561173d57600080fd5b505af1158015611751573d6000803e3d6000fd5b50505050611760828686611f79565b8073ffffffffffffffffffffffffffffffffffffffff166362067cd18785856040518463ffffffff1660e01b815260040161179d93929190613b5f565b600060405180830381600087803b1580156117b757600080fd5b505af11580156117cb573d6000803e3d6000fd5b50505050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185e9061397b565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161480156118c95750600160ff16816000815181106118b6576118b5613f4f565b5b602001015160f81c60f81b60f81c60ff16145b156118d357611bd0565b60005b8351811015611bce5760008482815181106118f4576118f3613f4f565b5b6020026020010151905060006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006006600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415611a8c578173ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161480611a0857508073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16145b80611a3e57503073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16145b611a7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a74906138db565b60405180910390fd5b611a878883612376565b611bb7565b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161415611baa578173ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161480611b2657508073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16145b80611b5c57503073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16145b611b9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b92906138db565b60405180910390fd5b611ba5898361256c565b611bb6565b611bb58989846128be565b5b5b505050600181611bc79190613cc0565b90506118d6565b505b505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff16632f54bf6e836040518263ffffffff1660e01b8152600401611c139190613603565b60206040518083038186803b158015611c2b57600080fd5b505afa158015611c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6391906130ad565b905092915050565b6000806040518060400160405280601681526020017f64656c6567617465536574757028616464726573732900000000000000000000815250600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051602401611cd79190613603565b60405160208183030381529060405290604051611cf491906135ec565b60405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060405180608001604052806046815260200161436d6046913985853085600080600080604051602401611d879897969594939291906137dc565b60405160208183030381529060405290604051611da491906135ec565b60405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166361b69abd600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611e789291906136b5565b602060405180830381600087803b158015611e9257600080fd5b505af1925050508015611ec357506040513d601f19601f82011682018060405250810190611ec09190612e4b565b60015b611f34573d8060008114611ef3576040519150601f19603f3d011682016040523d82523d6000602084013e611ef8565b606091505b506040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2b9061399b565b60405180910390fd5b867f3a2b6a6c6dd2e186fa5889eb2b5f7338ca9c02c3801c54dc77a80a13b389035382604051611f649190613603565b60405180910390a28093505050509392505050565b600082604051602401611f8c9190613603565b6040516020818303038152906040527f610b5925000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008473ffffffffffffffffffffffffffffffffffffffff1663468721a78660008560006040518563ffffffff1660e01b815260040161204e94939291906136e5565b602060405180830381600087803b15801561206857600080fd5b505af115801561207c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a091906130ad565b9050806120e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d99061395b565b60405180910390fd5b60008573ffffffffffffffffffffffffffffffffffffffff1663cc2f84528560016040518363ffffffff1660e01b8152600401612120929190613731565b60006040518083038186803b15801561213857600080fd5b505afa15801561214c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906121759190612fe2565b5090503073ffffffffffffffffffffffffffffffffffffffff16816000815181106121a3576121a2613f4f565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614612201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f890613adb565b60405180910390fd5b6000843060405160240161221692919061361e565b6040516020818303038152906040527fe009cfde000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008773ffffffffffffffffffffffffffffffffffffffff1663468721a78960008560006040518563ffffffff1660e01b81526004016122d894939291906136e5565b602060405180830381600087803b1580156122f257600080fd5b505af1158015612306573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232a91906130ad565b90508061236c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123639061391b565b60405180910390fd5b5050505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff1663e75235b86040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156123c057600080fd5b505af11580156123d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f89190613107565b90506000838260405160240161240f92919061375a565b6040516020818303038152906040527f0d582f13000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008373ffffffffffffffffffffffffffffffffffffffff1663468721a78560008560006040518563ffffffff1660e01b81526004016124d194939291906136e5565b602060405180830381600087803b1580156124eb57600080fd5b505af11580156124ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252391906130ad565b905080612565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255c90613a3b565b60405180910390fd5b5050505050565b60008173ffffffffffffffffffffffffffffffffffffffff1663e75235b86040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156125b657600080fd5b505af11580156125ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ee9190613107565b905060008273ffffffffffffffffffffffffffffffffffffffff1663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561263857600080fd5b505afa15801561264c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906126759190612f99565b90506000805b8251811015612722578573ffffffffffffffffffffffffffffffffffffffff168382815181106126ae576126ad613f4f565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141561270f5760008114156126e4576001915061270e565b826001826126f29190613d16565b8151811061270357612702613f4f565b5b602002602001015191505b5b808061271a90613ea8565b91505061267b565b5082600183516127329190613d16565b1015612748576001836127459190613d16565b92505b600081868560405160240161275f9392919061367e565b6040516020818303038152906040527ff8dc5dd9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008573ffffffffffffffffffffffffffffffffffffffff1663468721a78760008560006040518563ffffffff1660e01b815260040161282194939291906136e5565b602060405180830381600087803b15801561283b57600080fd5b505af115801561284f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287391906130ad565b9050806128b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128ac90613a3b565b60405180910390fd5b50505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff1663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561290657600080fd5b505afa15801561291a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906129439190612f99565b9050600080600090505b82518110156129f4578573ffffffffffffffffffffffffffffffffffffffff168382815181106129805761297f613f4f565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156129e15760008114156129b657600191506129e0565b826001826129c49190613d16565b815181106129d5576129d4613f4f565b5b602002602001015191505b5b80806129ec90613ea8565b91505061294d565b506000818686604051602401612a0c93929190613647565b6040516020818303038152906040527fe318b52b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008473ffffffffffffffffffffffffffffffffffffffff1663468721a78660008560006040518563ffffffff1660e01b8152600401612ace94939291906136e5565b602060405180830381600087803b158015612ae857600080fd5b505af1158015612afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2091906130ad565b905080612b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b5990613a3b565b60405180910390fd5b50505050505050565b6000612b7e612b7984613bbb565b613b96565b90508083825260208201905082856020860282011115612ba157612ba0613fb2565b5b60005b85811015612bd15781612bb78882612cfd565b845260208401935060208301925050600181019050612ba4565b5050509392505050565b6000612bee612be984613bbb565b613b96565b90508083825260208201905082856020860282011115612c1157612c10613fb2565b5b60005b85811015612c415781612c278882612d12565b845260208401935060208301925050600181019050612c14565b5050509392505050565b6000612c5e612c5984613be7565b613b96565b90508083825260208201905082856020860282011115612c8157612c80613fb2565b5b60005b85811015612cb15781612c978882612df4565b845260208401935060208301925050600181019050612c84565b5050509392505050565b6000612cce612cc984613c13565b613b96565b905082815260208101848484011115612cea57612ce9613fb7565b5b612cf5848285613e35565b509392505050565b600081359050612d0c816142cd565b92915050565b600081519050612d21816142cd565b92915050565b600082601f830112612d3c57612d3b613fad565b5b8135612d4c848260208601612b6b565b91505092915050565b600082601f830112612d6a57612d69613fad565b5b8151612d7a848260208601612bdb565b91505092915050565b600082601f830112612d9857612d97613fad565b5b8135612da8848260208601612c4b565b91505092915050565b600081519050612dc0816142e4565b92915050565b600082601f830112612ddb57612dda613fad565b5b8135612deb848260208601612cbb565b91505092915050565b600081359050612e03816142fb565b92915050565b600081519050612e18816142fb565b92915050565b600060208284031215612e3457612e33613fc1565b5b6000612e4284828501612cfd565b91505092915050565b600060208284031215612e6157612e60613fc1565b5b6000612e6f84828501612d12565b91505092915050565b60008060408385031215612e8f57612e8e613fc1565b5b6000612e9d85828601612cfd565b9250506020612eae85828601612cfd565b9150509250929050565b60008060008060008060c08789031215612ed557612ed4613fc1565b5b6000612ee389828a01612cfd565b9650506020612ef489828a01612cfd565b9550506040612f0589828a01612cfd565b945050606087013567ffffffffffffffff811115612f2657612f25613fbc565b5b612f3289828a01612d83565b935050608087013567ffffffffffffffff811115612f5357612f52613fbc565b5b612f5f89828a01612d83565b92505060a087013567ffffffffffffffff811115612f8057612f7f613fbc565b5b612f8c89828a01612dc6565b9150509295509295509295565b600060208284031215612faf57612fae613fc1565b5b600082015167ffffffffffffffff811115612fcd57612fcc613fbc565b5b612fd984828501612d55565b91505092915050565b60008060408385031215612ff957612ff8613fc1565b5b600083015167ffffffffffffffff81111561301757613016613fbc565b5b61302385828601612d55565b925050602061303485828601612d12565b9150509250929050565b60008060006060848603121561305757613056613fc1565b5b600084013567ffffffffffffffff81111561307557613074613fbc565b5b61308186828701612d27565b935050602061309286828701612df4565b92505060406130a386828701612cfd565b9150509250925092565b6000602082840312156130c3576130c2613fc1565b5b60006130d184828501612db1565b91505092915050565b6000602082840312156130f0576130ef613fc1565b5b60006130fe84828501612df4565b91505092915050565b60006020828403121561311d5761311c613fc1565b5b600061312b84828501612e09565b91505092915050565b6000806040838503121561314b5761314a613fc1565b5b600061315985828601612df4565b925050602061316a85828601612cfd565b9150509250929050565b60008060006060848603121561318d5761318c613fc1565b5b600061319b86828701612df4565b93505060206131ac86828701612cfd565b92505060406131bd86828701612cfd565b9150509250925092565b60006131d383836131df565b60208301905092915050565b6131e881613d4a565b82525050565b6131f781613d4a565b82525050565b600061320882613c54565b6132128185613c82565b935061321d83613c44565b8060005b8381101561324e57815161323588826131c7565b975061324083613c75565b925050600181019050613221565b5085935050505092915050565b61326481613d5c565b82525050565b600061327582613c5f565b61327f8185613c93565b935061328f818560208601613e44565b61329881613fc6565b840191505092915050565b6132ac81613da5565b82525050565b6132bb81613db7565b82525050565b6132ca81613dc9565b82525050565b6132d981613ddb565b82525050565b6132e881613ded565b82525050565b6132f781613dff565b82525050565b600061330882613c6a565b6133128185613ca4565b9350613322818560208601613e44565b61332b81613fc6565b840191505092915050565b600061334182613c6a565b61334b8185613cb5565b935061335b818560208601613e44565b80840191505092915050565b6000613374600c83613ca4565b915061337f82613fd7565b602082019050919050565b6000613397600f83613ca4565b91506133a282614000565b602082019050919050565b60006133ba601b83613ca4565b91506133c582614029565b602082019050919050565b60006133dd601483613ca4565b91506133e882614052565b602082019050919050565b6000613400601a83613ca4565b915061340b8261407b565b602082019050919050565b6000613423600e83613ca4565b915061342e826140a4565b602082019050919050565b6000613446601d83613ca4565b9150613451826140cd565b602082019050919050565b6000613469601d83613ca4565b9150613474826140f6565b602082019050919050565b600061348c601b83613ca4565b91506134978261411f565b602082019050919050565b60006134af601a83613ca4565b91506134ba82614148565b602082019050919050565b60006134d2601983613ca4565b91506134dd82614171565b602082019050919050565b60006134f5601983613ca4565b91506135008261419a565b602082019050919050565b6000613518601b83613ca4565b9150613523826141c3565b602082019050919050565b600061353b601b83613ca4565b9150613546826141ec565b602082019050919050565b600061355e601283613ca4565b915061356982614215565b602082019050919050565b6000613581601183613ca4565b915061358c8261423e565b602082019050919050565b60006135a4601483613ca4565b91506135af82614267565b602082019050919050565b60006135c7601383613ca4565b91506135d282614290565b602082019050919050565b6135e681613d9b565b82525050565b60006135f88284613336565b915081905092915050565b600060208201905061361860008301846131ee565b92915050565b600060408201905061363360008301856131ee565b61364060208301846131ee565b9392505050565b600060608201905061365c60008301866131ee565b61366960208301856131ee565b61367660408301846131ee565b949350505050565b600060608201905061369360008301866131ee565b6136a060208301856131ee565b6136ad60408301846135dd565b949350505050565b60006040820190506136ca60008301856131ee565b81810360208301526136dc818461326a565b90509392505050565b60006080820190506136fa60008301876131ee565b61370760208301866132df565b8181036040830152613719818561326a565b905061372860608301846132d0565b95945050505050565b600060408201905061374660008301856131ee565b61375360208301846132ee565b9392505050565b600060408201905061376f60008301856131ee565b61377c60208301846135dd565b9392505050565b6000602082019050818103600083015261379d81846131fd565b905092915050565b600060408201905081810360008301526137bf81856131fd565b905081810360208301526137d3818461326a565b90509392505050565b60006101008201905081810360008301526137f7818b6131fd565b9050613806602083018a6135dd565b61381360408301896132c1565b8181036060830152613825818861326a565b905061383460808301876131ee565b61384160a08301866131ee565b61384e60c08301856135dd565b61385b60e08301846131ee565b9998505050505050505050565b600060208201905061387d600083018461325b565b92915050565b600060208201905061389860008301846132a3565b92915050565b60006020820190506138b360008301846132b2565b92915050565b600060208201905081810360008301526138d381846132fd565b905092915050565b600060208201905081810360008301526138f481613367565b9050919050565b600060208201905081810360008301526139148161338a565b9050919050565b60006020820190508181036000830152613934816133ad565b9050919050565b60006020820190508181036000830152613954816133d0565b9050919050565b60006020820190508181036000830152613974816133f3565b9050919050565b6000602082019050818103600083015261399481613416565b9050919050565b600060208201905081810360008301526139b481613439565b9050919050565b600060208201905081810360008301526139d48161345c565b9050919050565b600060208201905081810360008301526139f48161347f565b9050919050565b60006020820190508181036000830152613a14816134a2565b9050919050565b60006020820190508181036000830152613a34816134c5565b9050919050565b60006020820190508181036000830152613a54816134e8565b9050919050565b60006020820190508181036000830152613a748161350b565b9050919050565b60006020820190508181036000830152613a948161352e565b9050919050565b60006020820190508181036000830152613ab481613551565b9050919050565b60006020820190508181036000830152613ad481613574565b9050919050565b60006020820190508181036000830152613af481613597565b9050919050565b60006020820190508181036000830152613b14816135ba565b9050919050565b6000602082019050613b3060008301846135dd565b92915050565b6000604082019050613b4b60008301856135dd565b613b5860208301846131ee565b9392505050565b6000606082019050613b7460008301866135dd565b613b8160208301856131ee565b613b8e60408301846131ee565b949350505050565b6000613ba0613bb1565b9050613bac8282613e77565b919050565b6000604051905090565b600067ffffffffffffffff821115613bd657613bd5613f7e565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613c0257613c01613f7e565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613c2e57613c2d613f7e565b5b613c3782613fc6565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613ccb82613d9b565b9150613cd683613d9b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613d0b57613d0a613ef1565b5b828201905092915050565b6000613d2182613d9b565b9150613d2c83613d9b565b925082821015613d3f57613d3e613ef1565b5b828203905092915050565b6000613d5582613d7b565b9050919050565b60008115159050919050565b6000819050613d76826142b9565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613db082613e11565b9050919050565b6000613dc282613e11565b9050919050565b6000613dd482613e11565b9050919050565b6000613de682613d68565b9050919050565b6000613df882613d9b565b9050919050565b6000613e0a82613d9b565b9050919050565b6000613e1c82613e23565b9050919050565b6000613e2e82613d7b565b9050919050565b82818337600083830152505050565b60005b83811015613e62578082015181840152602081019050613e47565b83811115613e71576000848401525b50505050565b613e8082613fc6565b810181811067ffffffffffffffff82111715613e9f57613e9e613f7e565b5b80604052505050565b6000613eb382613d9b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613ee657613ee5613ef1565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e6f2052756c6573205365740000000000000000000000000000000000000000600082015250565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b7f4d6967726174696f6e206661696c6564206f6e2064697361626c650000000000600082015250565b7f696e76616c696420736166652061646472657373000000000000000000000000600082015250565b7f4d6967726174696f6e206661696c6564206f6e20656e61626c65000000000000600082015250565b7f4e6f7420417574686f72697a6564000000000000000000000000000000000000600082015250565b7f4372656174652050726f787920576974682044617461204661696c6564000000600082015250565b7f63616c6c6572206d7573742062652073616665206f72206d656d626572000000600082015250565b7f73616665206d6f64756c65206d75737420626520656e61626c65640000000000600082015250565b7f4d69736d61746368656420706f644964206f6e20637265617465000000000000600082015250565b7f436f6e74726f6c6c6572206e6f74207265676973746572656400000000000000600082015250565b7f4d6f64756c65205472616e73616374696f6e204661696c656400000000000000600082015250565b7f4f6e6c7920736166652063616e20616464206e65772061646d696e0000000000600082015250565b7f4f6e6c792061646d696e2063616e207570646174652061646d696e0000000000600082015250565b7f506f6420616c7265616479206578697374730000000000000000000000000000600082015250565b7f506f6420646f65736e2774206578697374000000000000000000000000000000600082015250565b7f696e636f727265637420707265764d6f64756c65000000000000000000000000600082015250565b7f55736572206e6f7420617574686f72697a656400000000000000000000000000600082015250565b600281106142ca576142c9613f20565b5b50565b6142d681613d4a565b81146142e157600080fd5b50565b6142ed81613d5c565b81146142f857600080fd5b50565b61430481613d9b565b811461430f57600080fd5b5056fe657865635472616e73616374696f6e28616464726573732c75696e743235362c62797465732c75696e74382c75696e743235362c75696e743235362c75696e743235362c616464726573732c616464726573732c627974657329736574757028616464726573735b5d2c75696e743235362c616464726573732c62797465732c616464726573732c616464726573732c75696e743235362c6164647265737329a2646970667358221220c30e7237bc3a6958ffacc32b73be8f1b2c04e18cfa3c9320ec38bb1a18bfe02c64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes)": {
        "params": {
          "data": "Passes a flag for an initial creation event",
          "from": "The address sending the membership token",
          "ids": "An array of membership token ids to be transfered",
          "operator": "The address that initiated the action",
          "to": "The address recieveing the membership token"
        }
      },
      "constructor": {
        "params": {
          "_controllerRegistry": "The address of the ControllerRegistry contract",
          "_gnosisMasterAddress": "The gnosis master address",
          "_memberToken": "The address of the MemberToken contract",
          "_proxyFactoryAddress": "The proxy factory address"
        }
      },
      "createPod(address[],uint256,address)": {
        "params": {
          "_admin": "The address of the pod admin",
          "_members": "The addresses of the members of the pod",
          "threshold": "The number of members that are required to sign a transaction"
        }
      },
      "createPodWithSafe(address,address)": {
        "details": "Used to create a pod with an existing safeWill automatically distribute membership NFTs to current safe members",
        "params": {
          "_admin": "The address of the pod admin",
          "_safe": "The address of existing safe"
        }
      },
      "migratePodController(uint256,address,address)": {
        "params": {
          "_newController": "The address of the new pod controller",
          "_podId": "The id number of the pod"
        }
      },
      "updatePodAdmin(uint256,address)": {
        "params": {
          "_newAdmin": "The address of the new pod admin",
          "_podId": "The id number of the pod"
        }
      },
      "updatePodState(uint256,address,address)": {
        "details": "This is called by another version of controller to migrate a pod to this versionWill only accept calls from registered controllersCan only be called once.",
        "params": {
          "_podAdmin": "The address of the pod admin",
          "_podId": "The id number of the pod",
          "_safeAddress": "The address of the safe"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3039,
        "contract": "contracts/Controller.sol:Controller",
        "label": "proxyFactoryAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3041,
        "contract": "contracts/Controller.sol:Controller",
        "label": "gnosisMasterAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3058,
        "contract": "contracts/Controller.sol:Controller",
        "label": "context",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1922,
        "contract": "contracts/Controller.sol:Controller",
        "label": "memberToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IMemberToken)3780"
      },
      {
        "astId": 1925,
        "contract": "contracts/Controller.sol:Controller",
        "label": "controllerRegistry",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IControllerRegistry)3640"
      },
      {
        "astId": 1929,
        "contract": "contracts/Controller.sol:Controller",
        "label": "safeAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1933,
        "contract": "contracts/Controller.sol:Controller",
        "label": "podAdmin",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IControllerRegistry)3640": {
        "encoding": "inplace",
        "label": "contract IControllerRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IMemberToken)3780": {
        "encoding": "inplace",
        "label": "contract IMemberToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}