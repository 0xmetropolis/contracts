{
  "address": "0x10aD2ddE17f19dC65E51274a7B5f7f0a64BAF325",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "ensAddr",
          "type": "address"
        },
        {
          "internalType": "contract Resolver",
          "name": "resolverAddr",
          "type": "address"
        },
        {
          "internalType": "contract ReverseRegistrar",
          "name": "_reverseRegistrar",
          "type": "address"
        },
        {
          "internalType": "contract IControllerRegistry",
          "name": "controllerRegistryAddr",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "contract IInviteToken",
          "name": "inviteTokenAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "input",
          "type": "address"
        }
      ],
      "name": "addressToNode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        }
      ],
      "name": "getEnsNode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRootNode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "podSafe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "podCreator",
          "type": "address"
        }
      ],
      "name": "registerPod",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract Resolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reverseRegistrar",
      "outputs": [
        {
          "internalType": "contract ReverseRegistrar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "setAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_state",
          "type": "uint256"
        }
      ],
      "name": "setRestrictionState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "setText",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum PodEnsRegistrar.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xae4d1355c581d784834b626e748366e2add07312e172752ef1189a5fd47eafb3",
  "receipt": {
    "to": null,
    "from": "0x3f4e2cFE11Aa607570E0Aee7AC74fbff9633fa8E",
    "contractAddress": "0x10aD2ddE17f19dC65E51274a7B5f7f0a64BAF325",
    "transactionIndex": 0,
    "gasUsed": "1195198",
    "logsBloom": "0x
    "blockHash": "0x164e51d7f6963019b6b5ef4f027f8db7edb0f19f60c00e6dc0fb1170cfc2f009",
    "transactionHash": "0xae4d1355c581d784834b626e748366e2add07312e172752ef1189a5fd47eafb3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9985532,
        "transactionHash": "0xae4d1355c581d784834b626e748366e2add07312e172752ef1189a5fd47eafb3",
        "address": "0x10aD2ddE17f19dC65E51274a7B5f7f0a64BAF325",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003f4e2cfe11aa607570e0aee7ac74fbff9633fa8e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x164e51d7f6963019b6b5ef4f027f8db7edb0f19f60c00e6dc0fb1170cfc2f009"
      }
    ],
    "blockNumber": 9985532,
    "cumulativeGasUsed": "1195198",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    "0xf6305c19e814d2a75429Fd637d01F7ee0E77d615",
    "0x6F628b68b30Dc3c17f345c9dbBb1E483c2b7aE5c",
    "0x0285727ab1A03873e142dfDb940635E15Dd92d18",
    "0xa74c8b4e0e15dcc91024ac3999fc5df0e6669b98308ddf55dee349ca1e642d08",
    "0x67e3F6e969FEC8521f93793487460FaCE13e6949"
  ],
  "solcInputHash": "522d22d146fd40d9f61e701f8da8f81b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"ensAddr\",\"type\":\"address\"},{\"internalType\":\"contract Resolver\",\"name\":\"resolverAddr\",\"type\":\"address\"},{\"internalType\":\"contract ReverseRegistrar\",\"name\":\"_reverseRegistrar\",\"type\":\"address\"},{\"internalType\":\"contract IControllerRegistry\",\"name\":\"controllerRegistryAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"contract IInviteToken\",\"name\":\"inviteTokenAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"}],\"name\":\"addressToNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"getEnsNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRootNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"podSafe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"podCreator\",\"type\":\"address\"}],\"name\":\"registerPod\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract Resolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reverseRegistrar\",\"outputs\":[{\"internalType\":\"contract ReverseRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_state\",\"type\":\"uint256\"}],\"name\":\"setRestrictionState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum PodEnsRegistrar.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addressToNode(address)\":{\"params\":{\"input\":\"- an ENS registered address\"}},\"constructor\":{\"params\":{\"ensAddr\":\"The address of the ENS registry.\",\"node\":\"The node that this registrar administers.\"}},\"getEnsNode(bytes32)\":{\"params\":{\"label\":\"- label hash of pod name (i.e., labelhash('mypod'))\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"register(bytes32,address)\":{\"params\":{\"label\":\"The hash of the label to register.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setText(bytes32,string,string)\":{\"params\":{\"node\":\"- the node hash of an ENS name\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addressToNode(address)\":{\"notice\":\"Returns the ENS Node of a given address\"},\"constructor\":{\"notice\":\"Constructor.\"},\"getEnsNode(bytes32)\":{\"notice\":\"Generates a node hash from the Registrar's root node + the label hash.\"},\"register(bytes32,address)\":{\"notice\":\"Register a name, or change the owner of an existing registration.\"}},\"notice\":\"A registrar that allocates subdomains to the first person to claim them.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ens/PodEnsRegistrar.sol\":\"PodEnsRegistrar\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\\n    function setResolver(bytes32 node, address resolver) external virtual;\\n    function setOwner(bytes32 node, address owner) external virtual;\\n    function setTTL(bytes32 node, uint64 ttl) external virtual;\\n    function setApprovalForAll(address operator, bool approved) external virtual;\\n    function owner(bytes32 node) external virtual view returns (address);\\n    function resolver(bytes32 node) external virtual view returns (address);\\n    function ttl(bytes32 node) external virtual view returns (uint64);\\n    function recordExists(bytes32 node) external virtual view returns (bool);\\n    function isApprovedForAll(address owner, address operator) external virtual view returns (bool);\\n}\\n\",\"keccak256\":\"0x942ef29bd7c0f62228aeb91879ddd1ba101f52a2162970d3e48adffa498f4483\"},\"@ensdomains/ens-contracts/contracts/registry/ReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./ENS.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../root/Controllable.sol\\\";\\n\\nabstract contract NameResolver {\\n    function setName(bytes32 node, string memory name) public virtual;\\n}\\n\\nbytes32 constant lookup = 0x3031323334353637383961626364656600000000000000000000000000000000;\\n\\nbytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n// namehash('addr.reverse')\\n\\ncontract ReverseRegistrar is Ownable, Controllable {\\n    ENS public ens;\\n    NameResolver public defaultResolver;\\n\\n    event ReverseClaimed(address indexed addr, bytes32 indexed node);\\n\\n    /**\\n     * @dev Constructor\\n     * @param ensAddr The address of the ENS registry.\\n     * @param resolverAddr The address of the default reverse resolver.\\n     */\\n    constructor(ENS ensAddr, NameResolver resolverAddr) {\\n        ens = ensAddr;\\n        defaultResolver = resolverAddr;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(\\n            ens.owner(ADDR_REVERSE_NODE)\\n        );\\n        if (address(oldRegistrar) != address(0x0)) {\\n            oldRegistrar.claim(msg.sender);\\n        }\\n    }\\n\\n    modifier authorised(address addr) {\\n        require(\\n            addr == msg.sender ||\\n                controllers[msg.sender] ||\\n                ens.isApprovedForAll(addr, msg.sender) ||\\n                ownsContract(addr),\\n            \\\"Caller is not a controller or authorised by address or the address itself\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claim(address owner) public returns (bytes32) {\\n        return _claimWithResolver(msg.sender, owner, address(0x0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param addr The reverse record to set\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimForAddr(address addr, address owner)\\n        public\\n        authorised(addr)\\n        returns (bytes32)\\n    {\\n        return _claimWithResolver(addr, owner, address(0x0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimWithResolver(address owner, address resolver)\\n        public\\n        returns (bytes32)\\n    {\\n        return _claimWithResolver(msg.sender, owner, resolver);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record specified with the\\n     *      address provided\\n     * @param addr The reverse record to set\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimWithResolverForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) public authorised(addr) returns (bytes32) {\\n        return _claimWithResolver(addr, owner, resolver);\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the calling account. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setName(string memory name) public returns (bytes32) {\\n        bytes32 node = _claimWithResolver(\\n            msg.sender,\\n            address(this),\\n            address(defaultResolver)\\n        );\\n        defaultResolver.setName(node, name);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the account provided. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * Only callable by controllers and authorised users\\n     * @param addr The reverse record to set\\n     * @param owner The owner of the reverse node\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        string memory name\\n    ) public authorised(addr) returns (bytes32) {\\n        bytes32 node = _claimWithResolver(\\n            addr,\\n            address(this),\\n            address(defaultResolver)\\n        );\\n        defaultResolver.setName(node, name);\\n        ens.setSubnodeOwner(ADDR_REVERSE_NODE, sha3HexAddress(addr), owner);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Returns the node hash for a given account's reverse records.\\n     * @param addr The address to hash\\n     * @return The ENS node hash.\\n     */\\n    function node(address addr) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr))\\n            );\\n    }\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n        assembly {\\n            for {\\n                let i := 40\\n            } gt(i, 0) {\\n\\n            } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n\\n    /* Internal functions */\\n\\n    function _claimWithResolver(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) internal returns (bytes32) {\\n        bytes32 label = sha3HexAddress(addr);\\n        bytes32 node = keccak256(abi.encodePacked(ADDR_REVERSE_NODE, label));\\n        address currentResolver = ens.resolver(node);\\n        bool shouldUpdateResolver = (resolver != address(0x0) &&\\n            resolver != currentResolver);\\n        address newResolver = shouldUpdateResolver ? resolver : currentResolver;\\n\\n        ens.setSubnodeRecord(ADDR_REVERSE_NODE, label, owner, newResolver, 0);\\n\\n        emit ReverseClaimed(addr, node);\\n\\n        return node;\\n    }\\n\\n    function ownsContract(address addr) internal view returns (bool) {\\n        try Ownable(addr).owner() returns (address owner) {\\n            return owner == msg.sender;\\n        } catch {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6151b50f057afe5e32f9ef2f05b3c5c3ac8719b5900aead76d60be4356997ef6\"},\"@ensdomains/ens-contracts/contracts/resolvers/Resolver.sol\":{\"content\":\"pragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * A generic resolver interface which includes all the functions including the ones deprecated\\n */\\ninterface Resolver{\\n    event AddrChanged(bytes32 indexed node, address a);\\n    event AddressChanged(bytes32 indexed node, uint coinType, bytes newAddress);\\n    event NameChanged(bytes32 indexed node, string name);\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n    /* Deprecated events */\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n\\n    function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\\n    function addr(bytes32 node) external view returns (address);\\n    function addr(bytes32 node, uint coinType) external view returns(bytes memory);\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n    function dnsrr(bytes32 node) external view returns (bytes memory);\\n    function name(bytes32 node) external view returns (string memory);\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n    function text(bytes32 node, string calldata key) external view returns (string memory);\\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\\n    function setAddr(bytes32 node, address addr) external;\\n    function setAddr(bytes32 node, uint coinType, bytes calldata a) external;\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\n    function setDnsrr(bytes32 node, bytes calldata data) external;\\n    function setName(bytes32 node, string calldata _name) external;\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\\n    function setText(bytes32 node, string calldata key, string calldata value) external;\\n    function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;\\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool);\\n    function multicall(bytes[] calldata data) external returns(bytes[] memory results);\\n\\n    /* Deprecated functions */\\n    function content(bytes32 node) external view returns (bytes32);\\n    function multihash(bytes32 node) external view returns (bytes memory);\\n    function setContent(bytes32 node, bytes32 hash) external;\\n    function setMultihash(bytes32 node, bytes calldata hash) external;\\n}\\n\",\"keccak256\":\"0x696c3b1e718aad7054ec75bc74b627c2bfea71b32fb1054ee021d0e079388275\"},\"@ensdomains/ens-contracts/contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0x0c364a5b65b6fff279adbe1fd6498c488feabeec781599cd60a5844e80ee7d88\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/ens/PodEnsRegistrar.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ReverseRegistrar.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/Resolver.sol\\\";\\nimport \\\"../interfaces/IControllerRegistry.sol\\\";\\nimport \\\"../interfaces/IInviteToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * A registrar that allocates subdomains to the first person to claim them.\\n */\\ncontract PodEnsRegistrar is Ownable {\\n    modifier onlyControllerOrOwner() {\\n        require(\\n            controllerRegistry.isRegistered(msg.sender) ||\\n                owner() == msg.sender,\\n            \\\"sender must be controller/owner\\\"\\n        );\\n        _;\\n    }\\n\\n    enum State {\\n        onlySafeWithShip, // Only safes with SHIP token\\n        onlyShip, // Anyone with SHIP token\\n        open, // Anyone can enroll\\n        closed // Nobody can enroll, just in case\\n    }\\n\\n    ENS public ens;\\n    Resolver public resolver;\\n    ReverseRegistrar public reverseRegistrar;\\n    IControllerRegistry controllerRegistry;\\n    bytes32 rootNode;\\n    IInviteToken inviteToken;\\n    State public state = State.onlySafeWithShip;\\n\\n    /**\\n     * Constructor.\\n     * @param ensAddr The address of the ENS registry.\\n     * @param node The node that this registrar administers.\\n     */\\n    constructor(\\n        ENS ensAddr,\\n        Resolver resolverAddr,\\n        ReverseRegistrar _reverseRegistrar,\\n        IControllerRegistry controllerRegistryAddr,\\n        bytes32 node,\\n        IInviteToken inviteTokenAddr\\n    ) {\\n        require(address(ensAddr) != address(0), \\\"Invalid address\\\");\\n        require(address(resolverAddr) != address(0), \\\"Invalid address\\\");\\n        require(address(_reverseRegistrar)!= address(0), \\\"Invalid address\\\");\\n        require(address(controllerRegistryAddr) != address(0), \\\"Invalid address\\\");\\n        require(node != bytes32(0), \\\"Invalid node\\\");\\n        require(address(inviteTokenAddr) != address(0), \\\"Invalid address\\\");\\n\\n        ens = ensAddr;\\n        resolver = resolverAddr;\\n        controllerRegistry = controllerRegistryAddr;\\n        rootNode = node;\\n        reverseRegistrar = _reverseRegistrar;\\n        inviteToken = inviteTokenAddr;\\n    }\\n\\n    function registerPod(\\n        bytes32 label,\\n        address podSafe,\\n        address podCreator\\n    ) public returns (address) {\\n        if (state == State.closed) {\\n            revert(\\\"registrations are closed\\\");\\n        }\\n\\n        if (state == State.onlySafeWithShip) {\\n            // This implicitly prevents safes that were created in this transaction\\n            // from registering, as they cannot have a SHIP token balance.\\n            require(\\n                inviteToken.balanceOf(podSafe) > 0,\\n                \\\"safe must have SHIP token\\\"\\n            );\\n            inviteToken.burn(podSafe, 1);\\n        }\\n        if (state == State.onlyShip) {\\n            // Prefer the safe's token over the user's\\n            if (inviteToken.balanceOf(podSafe) > 0) {\\n                inviteToken.burn(podSafe, 1);\\n            } else if (inviteToken.balanceOf(podCreator) > 0) {\\n                inviteToken.burn(podCreator, 1);\\n            } else {\\n                revert(\\\"sender or safe must have SHIP\\\");\\n            }\\n        }\\n\\n        bytes32 node = keccak256(abi.encodePacked(rootNode, label));\\n\\n        require(\\n            controllerRegistry.isRegistered(msg.sender),\\n            \\\"controller not registered\\\"\\n        );\\n\\n        require(ens.owner(node) == address(0), \\\"label is already owned\\\");\\n\\n        _register(label, address(this));\\n\\n        resolver.setAddr(node, podSafe);\\n\\n        return address(reverseRegistrar);\\n    }\\n\\n    function getRootNode() public view returns (bytes32) {\\n        return rootNode;\\n    }\\n\\n    /**\\n     * Generates a node hash from the Registrar's root node + the label hash.\\n     * @param label - label hash of pod name (i.e., labelhash('mypod'))\\n     */\\n    function getEnsNode(bytes32 label) public view returns (bytes32) {\\n        return keccak256(abi.encodePacked(getRootNode(), label));\\n    }\\n\\n    /**\\n     * Returns the ENS Node of a given address\\n     * @param input - an ENS registered address\\n     */\\n    function addressToNode(address input) public returns (bytes32) {\\n        return reverseRegistrar.node(input);\\n    }\\n\\n    /**\\n     * Register a name, or change the owner of an existing registration.\\n     * @param label The hash of the label to register.\\n     */\\n    function register(bytes32 label, address owner) public onlyOwner {\\n        _register(label, owner);\\n    }\\n\\n    /**\\n     * Register a name, or change the owner of an existing registration.\\n     * @param label The hash of the label to register.\\n     */\\n    function _register(bytes32 label, address owner) internal {\\n        ens.setSubnodeRecord(rootNode, label, owner, address(resolver), 0);\\n    }\\n\\n    /**\\n     * @param node - the node hash of an ENS name\\n     */\\n    function setText(\\n        bytes32 node,\\n        string calldata key,\\n        string calldata value\\n    ) public onlyControllerOrOwner {\\n        resolver.setText(node, key, value);\\n    }\\n\\n    function setAddr(bytes32 node, address newAddress) public onlyOwner {\\n        resolver.setAddr(node, newAddress);\\n    }\\n\\n    function setRestrictionState(uint256 _state) external onlyOwner {\\n        state = State(_state);\\n    }\\n}\\n\",\"keccak256\":\"0xd184d6c6b03231aac3679c0c52f7820681de870ff25813a7cd047a5f2af606e0\"},\"contracts/interfaces/IControllerRegistry.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\n\\ninterface IControllerRegistry{\\n\\n    /**\\n     * @param _controller Address to check if registered as a controller\\n     * @return Boolean representing if the address is a registered as a controller\\n     */\\n    function isRegistered(address _controller) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x02e7853f4677cafd67f4a486cea842929067ca7b764b468e54922180998d5c4c\"},\"contracts/interfaces/IInviteToken.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\n/* solhint-disable indent */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IInviteToken is IERC20 {\\n    function batchMint(address[] calldata accounts, uint256 amount) external;\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n\\n}\\n\",\"keccak256\":\"0x39bc6039380dd7ff26a571fa2b73040b214b6200b2428aaead513f61d8ba9603\"}},\"version\":1}",
  "bytecode": "0x60806040526006805460ff60a01b191690553480156200001e57600080fd5b50604051620014fb380380620014fb8339810160408190526200004191620002b7565b6200004c3362000267565b6001600160a01b0386166200009a5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b60448201526064015b60405180910390fd5b6001600160a01b038516620000e45760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640162000091565b6001600160a01b0384166200012e5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640162000091565b6001600160a01b038316620001785760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640162000091565b81620001b65760405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964206e6f646560a01b604482015260640162000091565b6001600160a01b038116620002005760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640162000091565b600180546001600160a01b03199081166001600160a01b039889161790915560028054821696881696909617909555600480548616938716939093179092556005556003805484169285169290921790915560068054909216921691909117905562000358565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060008060008060c08789031215620002d157600080fd5b8651620002de816200033f565b6020880151909650620002f1816200033f565b604088015190955062000304816200033f565b606088015190945062000317816200033f565b608088015160a0890151919450925062000331816200033f565b809150509295509295509295565b6001600160a01b03811681146200035557600080fd5b50565b61119380620003686000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063cfeac6a511610066578063cfeac6a5146101ee578063d22057a914610201578063d5fa2b0014610214578063f2fde38b1461022757600080fd5b80638da5cb5b1461019657806398eed3e9146101a7578063b9efd9b5146101ba578063c19d93fb146101cd57600080fd5b806338d1fcc3116100d357806338d1fcc3146101605780633f15457f14610168578063715018a61461017b578063808698531461018357600080fd5b806304f3bcec146100fa57806310f13a8c1461012a578063137a3f601461013f575b600080fd5b60025461010d906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61013d61013836600461102e565b61023a565b005b61015261014d366004610f27565b6103b5565b604051908152602001610121565b600554610152565b60015461010d906001600160a01b031681565b61013d610452565b60035461010d906001600160a01b031681565b6000546001600160a01b031661010d565b61010d6101b5366004610fec565b6104b8565b61013d6101c8366004610f8a565b610b0c565b6006546101e190600160a01b900460ff1681565b604051610121919061110a565b6101526101fc366004610f8a565b610bbd565b61013d61020f366004610fbc565b610bf9565b61013d610222366004610fbc565b610c61565b61013d610235366004610f27565b610d25565b6004805460405163c3c5a54760e01b815233928101929092526001600160a01b03169063c3c5a5479060240160206040518083038186803b15801561027e57600080fd5b505afa158015610292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b69190610f68565b806102da5750336102cf6000546001600160a01b031690565b6001600160a01b0316145b61032b5760405162461bcd60e51b815260206004820152601f60248201527f73656e646572206d75737420626520636f6e74726f6c6c65722f6f776e65720060448201526064015b60405180910390fd5b6002546040517f10f13a8c0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906310f13a8c9061037c90889088908890889088906004016110d1565b600060405180830381600087803b15801561039657600080fd5b505af11580156103aa573d6000803e3d6000fd5b505050505050505050565b6003546040517fbffbe61c0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152600092169063bffbe61c9060240160206040518083038186803b15801561041457600080fd5b505afa158015610428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044c9190610fa3565b92915050565b6000546001600160a01b031633146104ac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610322565b6104b66000610e07565b565b60006003600654600160a01b900460ff1660038111156104da576104da611132565b14156105285760405162461bcd60e51b815260206004820152601860248201527f726567697374726174696f6e732061726520636c6f73656400000000000000006044820152606401610322565b6000600654600160a01b900460ff16600381111561054857610548611132565b1415610680576006546040516370a0823160e01b81526001600160a01b03858116600483015260009216906370a082319060240160206040518083038186803b15801561059457600080fd5b505afa1580156105a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cc9190610fa3565b116106195760405162461bcd60e51b815260206004820152601960248201527f73616665206d7573742068617665205348495020746f6b656e000000000000006044820152606401610322565b600654604051632770a7eb60e21b81526001600160a01b0385811660048301526001602483015290911690639dc29fac90604401600060405180830381600087803b15801561066757600080fd5b505af115801561067b573d6000803e3d6000fd5b505050505b6001600654600160a01b900460ff1660038111156106a0576106a0611132565b141561089b576006546040516370a0823160e01b81526001600160a01b03858116600483015260009216906370a082319060240160206040518083038186803b1580156106ec57600080fd5b505afa158015610700573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107249190610fa3565b111561079657600654604051632770a7eb60e21b81526001600160a01b0385811660048301526001602483015290911690639dc29fac906044015b600060405180830381600087803b15801561077957600080fd5b505af115801561078d573d6000803e3d6000fd5b5050505061089b565b6006546040516370a0823160e01b81526001600160a01b03848116600483015260009216906370a082319060240160206040518083038186803b1580156107dc57600080fd5b505afa1580156107f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108149190610fa3565b111561085357600654604051632770a7eb60e21b81526001600160a01b0384811660048301526001602483015290911690639dc29fac9060440161075f565b60405162461bcd60e51b815260206004820152601d60248201527f73656e646572206f722073616665206d757374206861766520534849500000006044820152606401610322565b6000600554856040516020016108bb929190918252602082015260400190565b60408051808303601f190181529082905280516020909101206004805463c3c5a54760e01b845233918401919091529092506001600160a01b03169063c3c5a5479060240160206040518083038186803b15801561091857600080fd5b505afa15801561092c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109509190610f68565b61099c5760405162461bcd60e51b815260206004820152601960248201527f636f6e74726f6c6c6572206e6f742072656769737465726564000000000000006044820152606401610322565b6001546040517f02571be3000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b0316906302571be39060240160206040518083038186803b1580156109fa57600080fd5b505afa158015610a0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a329190610f4b565b6001600160a01b031614610a885760405162461bcd60e51b815260206004820152601660248201527f6c6162656c20697320616c7265616479206f776e6564000000000000000000006044820152606401610322565b610a928530610e6f565b60025460405162d5fa2b60e81b8152600481018390526001600160a01b0386811660248301529091169063d5fa2b0090604401600060405180830381600087803b158015610adf57600080fd5b505af1158015610af3573d6000803e3d6000fd5b50506003546001600160a01b0316979650505050505050565b6000546001600160a01b03163314610b665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610322565b806003811115610b7857610b78611132565b600680547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b836003811115610bb557610bb5611132565b021790555050565b6000610bc860055490565b6040805160208101929092528101839052606001604051602081830303815290604052805190602001209050919050565b6000546001600160a01b03163314610c535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610322565b610c5d8282610e6f565b5050565b6000546001600160a01b03163314610cbb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610322565b60025460405162d5fa2b60e81b8152600481018490526001600160a01b0383811660248301529091169063d5fa2b00906044015b600060405180830381600087803b158015610d0957600080fd5b505af1158015610d1d573d6000803e3d6000fd5b505050505050565b6000546001600160a01b03163314610d7f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610322565b6001600160a01b038116610dfb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610322565b610e0481610e07565b50565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001546005546002546040517f5ef2c7f00000000000000000000000000000000000000000000000000000000081526004810192909252602482018590526001600160a01b03848116604484015290811660648301526000608483015290911690635ef2c7f09060a401610cef565b60008083601f840112610ef057600080fd5b50813567ffffffffffffffff811115610f0857600080fd5b602083019150836020828501011115610f2057600080fd5b9250929050565b600060208284031215610f3957600080fd5b8135610f4481611148565b9392505050565b600060208284031215610f5d57600080fd5b8151610f4481611148565b600060208284031215610f7a57600080fd5b81518015158114610f4457600080fd5b600060208284031215610f9c57600080fd5b5035919050565b600060208284031215610fb557600080fd5b5051919050565b60008060408385031215610fcf57600080fd5b823591506020830135610fe181611148565b809150509250929050565b60008060006060848603121561100157600080fd5b83359250602084013561101381611148565b9150604084013561102381611148565b809150509250925092565b60008060008060006060868803121561104657600080fd5b85359450602086013567ffffffffffffffff8082111561106557600080fd5b61107189838a01610ede565b9096509450604088013591508082111561108a57600080fd5b5061109788828901610ede565b969995985093965092949392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8581526060602082015260006110eb6060830186886110a8565b82810360408401526110fe8185876110a8565b98975050505050505050565b602081016004831061112c57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b0381168114610e0457600080fdfea26469706673582212206324be6279551d477a0b3e471ab59703ee506a6ef40709f21235f6eb85fd9d7c64736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addressToNode(address)": {
        "params": {
          "input": "- an ENS registered address"
        }
      },
      "constructor": {
        "params": {
          "ensAddr": "The address of the ENS registry.",
          "node": "The node that this registrar administers."
        }
      },
      "getEnsNode(bytes32)": {
        "params": {
          "label": "- label hash of pod name (i.e., labelhash('mypod'))"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "register(bytes32,address)": {
        "params": {
          "label": "The hash of the label to register."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setText(bytes32,string,string)": {
        "params": {
          "node": "- the node hash of an ENS name"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addressToNode(address)": {
        "notice": "Returns the ENS Node of a given address"
      },
      "constructor": {
        "notice": "Constructor."
      },
      "getEnsNode(bytes32)": {
        "notice": "Generates a node hash from the Registrar's root node + the label hash."
      },
      "register(bytes32,address)": {
        "notice": "Register a name, or change the owner of an existing registration."
      }
    },
    "notice": "A registrar that allocates subdomains to the first person to claim them.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1231,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6924,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "ens",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ENS)136"
      },
      {
        "astId": 6927,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "resolver",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Resolver)794"
      },
      {
        "astId": 6930,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "reverseRegistrar",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ReverseRegistrar)543"
      },
      {
        "astId": 6933,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "controllerRegistry",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IControllerRegistry)7374"
      },
      {
        "astId": 6935,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "rootNode",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 6938,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "inviteToken",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IInviteToken)7476"
      },
      {
        "astId": 6943,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "state",
        "offset": 20,
        "slot": "6",
        "type": "t_enum(State)6921"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENS)136": {
        "encoding": "inplace",
        "label": "contract ENS",
        "numberOfBytes": "20"
      },
      "t_contract(IControllerRegistry)7374": {
        "encoding": "inplace",
        "label": "contract IControllerRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IInviteToken)7476": {
        "encoding": "inplace",
        "label": "contract IInviteToken",
        "numberOfBytes": "20"
      },
      "t_contract(Resolver)794": {
        "encoding": "inplace",
        "label": "contract Resolver",
        "numberOfBytes": "20"
      },
      "t_contract(ReverseRegistrar)543": {
        "encoding": "inplace",
        "label": "contract ReverseRegistrar",
        "numberOfBytes": "20"
      },
      "t_enum(State)6921": {
        "encoding": "inplace",
        "label": "enum PodEnsRegistrar.State",
        "numberOfBytes": "1"
      }
    }
  }
}