{
  "address": "0x90B5423615cA4d10390D638c0b1202D718417042",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "ensAddr",
          "type": "address"
        },
        {
          "internalType": "contract Resolver",
          "name": "resolverAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reverseRegistrar",
          "type": "address"
        },
        {
          "internalType": "contract IControllerRegistry",
          "name": "controllerRegistryAddr",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "contract IInviteToken",
          "name": "inviteTokenAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "podSafe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "podCreator",
          "type": "address"
        }
      ],
      "name": "registerPod",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "setAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_state",
          "type": "uint256"
        }
      ],
      "name": "setRestrictionState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "setText",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum PodEnsRegistrar.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd3db1b05dde76f3367b00677639d39446a857e3fff061ff0093856e4b21c2b43",
  "receipt": {
    "to": null,
    "from": "0x3f4e2cFE11Aa607570E0Aee7AC74fbff9633fa8E",
    "contractAddress": "0x90B5423615cA4d10390D638c0b1202D718417042",
    "transactionIndex": 0,
    "gasUsed": "1071256",
    "logsBloom": "0x
    "blockHash": "0xd928d09cee41c3120071da5da9bad25d335c20773b75d2696fabefca7cf62a7f",
    "transactionHash": "0xd3db1b05dde76f3367b00677639d39446a857e3fff061ff0093856e4b21c2b43",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9619272,
        "transactionHash": "0xd3db1b05dde76f3367b00677639d39446a857e3fff061ff0093856e4b21c2b43",
        "address": "0x90B5423615cA4d10390D638c0b1202D718417042",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003f4e2cfe11aa607570e0aee7ac74fbff9633fa8e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd928d09cee41c3120071da5da9bad25d335c20773b75d2696fabefca7cf62a7f"
      }
    ],
    "blockNumber": 9619272,
    "cumulativeGasUsed": "1071256",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    "0xf6305c19e814d2a75429Fd637d01F7ee0E77d615",
    "0x6F628b68b30Dc3c17f345c9dbBb1E483c2b7aE5c",
    "0x5b678Db8eA8540B0481E07EE29c7194D436056c4",
    "0xa74c8b4e0e15dcc91024ac3999fc5df0e6669b98308ddf55dee349ca1e642d08",
    "0x0bd45f842e58b8fB648F59eA79bd924Ca0b9F22E"
  ],
  "solcInputHash": "1e7787b98fc73b229729c04bd255a330",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"ensAddr\",\"type\":\"address\"},{\"internalType\":\"contract Resolver\",\"name\":\"resolverAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reverseRegistrar\",\"type\":\"address\"},{\"internalType\":\"contract IControllerRegistry\",\"name\":\"controllerRegistryAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"contract IInviteToken\",\"name\":\"inviteTokenAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"podSafe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"podCreator\",\"type\":\"address\"}],\"name\":\"registerPod\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_state\",\"type\":\"uint256\"}],\"name\":\"setRestrictionState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum PodEnsRegistrar.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"ensAddr\":\"The address of the ENS registry.\",\"node\":\"The node that this registrar administers.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"register(bytes32,address)\":{\"params\":{\"label\":\"The hash of the label to register.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor.\"},\"register(bytes32,address)\":{\"notice\":\"Register a name, or change the owner of an existing registration.\"}},\"notice\":\"A registrar that allocates subdomains to the first person to claim them.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ens/PodEnsRegistrar.sol\":\"PodEnsRegistrar\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\\n    function setResolver(bytes32 node, address resolver) external virtual;\\n    function setOwner(bytes32 node, address owner) external virtual;\\n    function setTTL(bytes32 node, uint64 ttl) external virtual;\\n    function setApprovalForAll(address operator, bool approved) external virtual;\\n    function owner(bytes32 node) external virtual view returns (address);\\n    function resolver(bytes32 node) external virtual view returns (address);\\n    function ttl(bytes32 node) external virtual view returns (uint64);\\n    function recordExists(bytes32 node) external virtual view returns (bool);\\n    function isApprovedForAll(address owner, address operator) external virtual view returns (bool);\\n}\\n\",\"keccak256\":\"0x942ef29bd7c0f62228aeb91879ddd1ba101f52a2162970d3e48adffa498f4483\"},\"@ensdomains/ens-contracts/contracts/resolvers/Resolver.sol\":{\"content\":\"pragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * A generic resolver interface which includes all the functions including the ones deprecated\\n */\\ninterface Resolver{\\n    event AddrChanged(bytes32 indexed node, address a);\\n    event AddressChanged(bytes32 indexed node, uint coinType, bytes newAddress);\\n    event NameChanged(bytes32 indexed node, string name);\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n    /* Deprecated events */\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n\\n    function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\\n    function addr(bytes32 node) external view returns (address);\\n    function addr(bytes32 node, uint coinType) external view returns(bytes memory);\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n    function dnsrr(bytes32 node) external view returns (bytes memory);\\n    function name(bytes32 node) external view returns (string memory);\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n    function text(bytes32 node, string calldata key) external view returns (string memory);\\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\\n    function setAddr(bytes32 node, address addr) external;\\n    function setAddr(bytes32 node, uint coinType, bytes calldata a) external;\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\n    function setDnsrr(bytes32 node, bytes calldata data) external;\\n    function setName(bytes32 node, string calldata _name) external;\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\\n    function setText(bytes32 node, string calldata key, string calldata value) external;\\n    function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;\\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool);\\n    function multicall(bytes[] calldata data) external returns(bytes[] memory results);\\n\\n    /* Deprecated functions */\\n    function content(bytes32 node) external view returns (bytes32);\\n    function multihash(bytes32 node) external view returns (bytes memory);\\n    function setContent(bytes32 node, bytes32 hash) external;\\n    function setMultihash(bytes32 node, bytes calldata hash) external;\\n}\\n\",\"keccak256\":\"0x696c3b1e718aad7054ec75bc74b627c2bfea71b32fb1054ee021d0e079388275\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/ens/PodEnsRegistrar.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/Resolver.sol\\\";\\nimport \\\"../interfaces/IControllerRegistry.sol\\\";\\nimport \\\"../interfaces/IInviteToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * A registrar that allocates subdomains to the first person to claim them.\\n */\\ncontract PodEnsRegistrar is Ownable {\\n\\n    enum State { \\n        onlySafeWithShip, // Only safes with SHIP token\\n        onlyShip, // Anyone with SHIP token\\n        open, // Anyone can enroll\\n        closed // Nobody can enroll, just in case\\n    }\\n\\n    ENS ens;\\n    Resolver resolver;\\n    address reverseRegistrar;\\n    IControllerRegistry controllerRegistry;\\n    bytes32 rootNode;\\n    IInviteToken inviteToken;\\n    State public state = State.onlySafeWithShip; \\n\\n    /**\\n     * Constructor.\\n     * @param ensAddr The address of the ENS registry.\\n     * @param node The node that this registrar administers.\\n     */\\n    constructor(ENS ensAddr, Resolver resolverAddr, address _reverseRegistrar, IControllerRegistry controllerRegistryAddr, bytes32 node, IInviteToken inviteTokenAddr) {\\n        ens = ensAddr;\\n        resolver = resolverAddr;\\n        controllerRegistry = controllerRegistryAddr;\\n        rootNode = node;\\n        reverseRegistrar = _reverseRegistrar;\\n        inviteToken = inviteTokenAddr;\\n    }\\n\\n    function registerPod(bytes32 label, address podSafe, address podCreator) public returns(address) {\\n        if (state == State.closed) {\\n            revert(\\\"registrations are closed\\\");\\n        }\\n\\n        if (state == State.onlySafeWithShip) {\\n            // This implicitly prevents safes that were created in this transaction\\n            // from registering, as they cannot have a SHIP token balance.\\n            require(inviteToken.balanceOf(podSafe) > 0, \\\"safe must have SHIP token\\\");\\n            inviteToken.burn(podSafe, 1);\\n        }\\n        if (state == State.onlyShip) {\\n            // Prefer the safe's token over the user's\\n            if (inviteToken.balanceOf(podSafe) > 0) {\\n                inviteToken.burn(podSafe, 1);\\n            } else if (inviteToken.balanceOf(podCreator) > 0) {\\n                inviteToken.burn(podCreator, 1);\\n            } else {\\n                revert(\\\"sender or safe must have SHIP\\\");\\n            }\\n        }\\n\\n        bytes32 node = keccak256(abi.encodePacked(rootNode, label));\\n\\n        require(controllerRegistry.isRegistered(msg.sender), \\\"controller not registered\\\");\\n\\n        require(\\n            ens.owner(node) == address(0),\\n            \\\"label is already owned\\\"\\n        );\\n        \\n        _register(label, address(this));\\n\\n        resolver.setAddr(node, podSafe);\\n\\n        return address(reverseRegistrar);\\n    }\\n\\n\\n    /**\\n     * Register a name, or change the owner of an existing registration.\\n     * @param label The hash of the label to register.\\n     */\\n    function register(bytes32 label, address owner) public onlyOwner {\\n        _register(label, owner);\\n    }\\n\\n    /**\\n     * Register a name, or change the owner of an existing registration.\\n     * @param label The hash of the label to register.\\n     */\\n    function _register(bytes32 label, address owner) internal {\\n\\n        ens.setSubnodeRecord(\\n            rootNode,\\n            label,\\n            owner,\\n            address(resolver),\\n            0\\n        );\\n\\n    }\\n\\n    function setText(bytes32 node, string calldata key, string calldata value) public onlyOwner {\\n        resolver.setText(node, key, value);\\n    }\\n\\n    function setAddr(bytes32 node, address newAddress) public onlyOwner {\\n        resolver.setAddr(node, newAddress);\\n    }\\n\\n    function setRestrictionState(uint256 _state) public onlyOwner {\\n        state = State(_state);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x9a230a88492b709a31c3b938b517f3352bcb8d53c6ee9fe774a479e83850906a\"},\"contracts/interfaces/IControllerRegistry.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\n\\ninterface IControllerRegistry{\\n\\n    /**\\n     * @param _controller Address to check if registered as a controller\\n     * @return Boolean representing if the address is a registered as a controller\\n     */\\n    function isRegistered(address _controller) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x02e7853f4677cafd67f4a486cea842929067ca7b764b468e54922180998d5c4c\"},\"contracts/interfaces/IInviteToken.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\n/* solhint-disable indent */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IInviteToken is IERC20 {\\n    function batchMint(address[] calldata accounts, uint256 amount) external;\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n\\n}\\n\",\"keccak256\":\"0x39bc6039380dd7ff26a571fa2b73040b214b6200b2428aaead513f61d8ba9603\"}},\"version\":1}",
  "bytecode": "0x60806040526006805460ff60a01b191690553480156200001e57600080fd5b506040516200112a3803806200112a833981016040819052620000419162000103565b6200004c33620000b3565b600180546001600160a01b03199081166001600160a01b0398891617909155600280548216968816969096179095556004805486169387169390931790925560055560038054841692851692909217909155600680549092169216919091179055620001a4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060008060008060c087890312156200011d57600080fd5b86516200012a816200018b565b60208801519096506200013d816200018b565b604088015190955062000150816200018b565b606088015190945062000163816200018b565b608088015160a089015191945092506200017d816200018b565b809150509295509295509295565b6001600160a01b0381168114620001a157600080fd5b50565b610f7680620001b46000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063b9efd9b511610076578063d22057a91161005b578063d22057a914610136578063d5fa2b0014610149578063f2fde38b1461015c57600080fd5b8063b9efd9b514610102578063c19d93fb1461011557600080fd5b806310f13a8c146100a8578063715018a6146100bd5780638da5cb5b146100c557806398eed3e9146100ef575b600080fd5b6100bb6100b6366004610ddf565b61016f565b005b6100bb610258565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100d26100fd366004610d9d565b6102be565b6100bb610110366004610e59565b61092b565b60065461012990600160a01b900460ff1681565b6040516100e69190610eed565b6100bb610144366004610d6d565b6109dc565b6100bb610157366004610d6d565b610a44565b6100bb61016a366004610d0a565b610b08565b6000546001600160a01b031633146101ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6002546040517f10f13a8c0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906310f13a8c9061021f9088908890889088908890600401610eb4565b600060405180830381600087803b15801561023957600080fd5b505af115801561024d573d6000803e3d6000fd5b505050505050505050565b6000546001600160a01b031633146102b25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101c5565b6102bc6000610bea565b565b60006003600654600160a01b900460ff1660038111156102e0576102e0610f15565b141561032e5760405162461bcd60e51b815260206004820152601860248201527f726567697374726174696f6e732061726520636c6f736564000000000000000060448201526064016101c5565b6000600654600160a01b900460ff16600381111561034e5761034e610f15565b1415610486576006546040516370a0823160e01b81526001600160a01b03858116600483015260009216906370a082319060240160206040518083038186803b15801561039a57600080fd5b505afa1580156103ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d29190610e72565b1161041f5760405162461bcd60e51b815260206004820152601960248201527f73616665206d7573742068617665205348495020746f6b656e0000000000000060448201526064016101c5565b600654604051632770a7eb60e21b81526001600160a01b0385811660048301526001602483015290911690639dc29fac90604401600060405180830381600087803b15801561046d57600080fd5b505af1158015610481573d6000803e3d6000fd5b505050505b6001600654600160a01b900460ff1660038111156104a6576104a6610f15565b14156106a1576006546040516370a0823160e01b81526001600160a01b03858116600483015260009216906370a082319060240160206040518083038186803b1580156104f257600080fd5b505afa158015610506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052a9190610e72565b111561059c57600654604051632770a7eb60e21b81526001600160a01b0385811660048301526001602483015290911690639dc29fac906044015b600060405180830381600087803b15801561057f57600080fd5b505af1158015610593573d6000803e3d6000fd5b505050506106a1565b6006546040516370a0823160e01b81526001600160a01b03848116600483015260009216906370a082319060240160206040518083038186803b1580156105e257600080fd5b505afa1580156105f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061a9190610e72565b111561065957600654604051632770a7eb60e21b81526001600160a01b0384811660048301526001602483015290911690639dc29fac90604401610565565b60405162461bcd60e51b815260206004820152601d60248201527f73656e646572206f722073616665206d7573742068617665205348495000000060448201526064016101c5565b6000600554856040516020016106c1929190918252602082015260400190565b60408051808303601f19018152908290528051602090910120600480547fc3c5a54700000000000000000000000000000000000000000000000000000000845233918401919091529092506001600160a01b03169063c3c5a5479060240160206040518083038186803b15801561073757600080fd5b505afa15801561074b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076f9190610d4b565b6107bb5760405162461bcd60e51b815260206004820152601960248201527f636f6e74726f6c6c6572206e6f7420726567697374657265640000000000000060448201526064016101c5565b6001546040517f02571be3000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b0316906302571be39060240160206040518083038186803b15801561081957600080fd5b505afa15801561082d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108519190610d2e565b6001600160a01b0316146108a75760405162461bcd60e51b815260206004820152601660248201527f6c6162656c20697320616c7265616479206f776e65640000000000000000000060448201526064016101c5565b6108b18530610c52565b60025460405162d5fa2b60e81b8152600481018390526001600160a01b0386811660248301529091169063d5fa2b0090604401600060405180830381600087803b1580156108fe57600080fd5b505af1158015610912573d6000803e3d6000fd5b50506003546001600160a01b0316979650505050505050565b6000546001600160a01b031633146109855760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101c5565b80600381111561099757610997610f15565b600680547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b8360038111156109d4576109d4610f15565b021790555050565b6000546001600160a01b03163314610a365760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101c5565b610a408282610c52565b5050565b6000546001600160a01b03163314610a9e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101c5565b60025460405162d5fa2b60e81b8152600481018490526001600160a01b0383811660248301529091169063d5fa2b00906044015b600060405180830381600087803b158015610aec57600080fd5b505af1158015610b00573d6000803e3d6000fd5b505050505050565b6000546001600160a01b03163314610b625760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101c5565b6001600160a01b038116610bde5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101c5565b610be781610bea565b50565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001546005546002546040517f5ef2c7f00000000000000000000000000000000000000000000000000000000081526004810192909252602482018590526001600160a01b03848116604484015290811660648301526000608483015290911690635ef2c7f09060a401610ad2565b60008083601f840112610cd357600080fd5b50813567ffffffffffffffff811115610ceb57600080fd5b602083019150836020828501011115610d0357600080fd5b9250929050565b600060208284031215610d1c57600080fd5b8135610d2781610f2b565b9392505050565b600060208284031215610d4057600080fd5b8151610d2781610f2b565b600060208284031215610d5d57600080fd5b81518015158114610d2757600080fd5b60008060408385031215610d8057600080fd5b823591506020830135610d9281610f2b565b809150509250929050565b600080600060608486031215610db257600080fd5b833592506020840135610dc481610f2b565b91506040840135610dd481610f2b565b809150509250925092565b600080600080600060608688031215610df757600080fd5b85359450602086013567ffffffffffffffff80821115610e1657600080fd5b610e2289838a01610cc1565b90965094506040880135915080821115610e3b57600080fd5b50610e4888828901610cc1565b969995985093965092949392505050565b600060208284031215610e6b57600080fd5b5035919050565b600060208284031215610e8457600080fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b858152606060208201526000610ece606083018688610e8b565b8281036040840152610ee1818587610e8b565b98975050505050505050565b6020810160048310610f0f57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b0381168114610be757600080fdfea26469706673582212209389de2f49cbf41082d76659355860ca8d540ea599bcb889272133439746870c64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c8063b9efd9b511610076578063d22057a91161005b578063d22057a914610136578063d5fa2b0014610149578063f2fde38b1461015c57600080fd5b8063b9efd9b514610102578063c19d93fb1461011557600080fd5b806310f13a8c146100a8578063715018a6146100bd5780638da5cb5b146100c557806398eed3e9146100ef575b600080fd5b6100bb6100b6366004610ddf565b61016f565b005b6100bb610258565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100d26100fd366004610d9d565b6102be565b6100bb610110366004610e59565b61092b565b60065461012990600160a01b900460ff1681565b6040516100e69190610eed565b6100bb610144366004610d6d565b6109dc565b6100bb610157366004610d6d565b610a44565b6100bb61016a366004610d0a565b610b08565b6000546001600160a01b031633146101ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6002546040517f10f13a8c0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906310f13a8c9061021f9088908890889088908890600401610eb4565b600060405180830381600087803b15801561023957600080fd5b505af115801561024d573d6000803e3d6000fd5b505050505050505050565b6000546001600160a01b031633146102b25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101c5565b6102bc6000610bea565b565b60006003600654600160a01b900460ff1660038111156102e0576102e0610f15565b141561032e5760405162461bcd60e51b815260206004820152601860248201527f726567697374726174696f6e732061726520636c6f736564000000000000000060448201526064016101c5565b6000600654600160a01b900460ff16600381111561034e5761034e610f15565b1415610486576006546040516370a0823160e01b81526001600160a01b03858116600483015260009216906370a082319060240160206040518083038186803b15801561039a57600080fd5b505afa1580156103ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d29190610e72565b1161041f5760405162461bcd60e51b815260206004820152601960248201527f73616665206d7573742068617665205348495020746f6b656e0000000000000060448201526064016101c5565b600654604051632770a7eb60e21b81526001600160a01b0385811660048301526001602483015290911690639dc29fac90604401600060405180830381600087803b15801561046d57600080fd5b505af1158015610481573d6000803e3d6000fd5b505050505b6001600654600160a01b900460ff1660038111156104a6576104a6610f15565b14156106a1576006546040516370a0823160e01b81526001600160a01b03858116600483015260009216906370a082319060240160206040518083038186803b1580156104f257600080fd5b505afa158015610506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052a9190610e72565b111561059c57600654604051632770a7eb60e21b81526001600160a01b0385811660048301526001602483015290911690639dc29fac906044015b600060405180830381600087803b15801561057f57600080fd5b505af1158015610593573d6000803e3d6000fd5b505050506106a1565b6006546040516370a0823160e01b81526001600160a01b03848116600483015260009216906370a082319060240160206040518083038186803b1580156105e257600080fd5b505afa1580156105f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061a9190610e72565b111561065957600654604051632770a7eb60e21b81526001600160a01b0384811660048301526001602483015290911690639dc29fac90604401610565565b60405162461bcd60e51b815260206004820152601d60248201527f73656e646572206f722073616665206d7573742068617665205348495000000060448201526064016101c5565b6000600554856040516020016106c1929190918252602082015260400190565b60408051808303601f19018152908290528051602090910120600480547fc3c5a54700000000000000000000000000000000000000000000000000000000845233918401919091529092506001600160a01b03169063c3c5a5479060240160206040518083038186803b15801561073757600080fd5b505afa15801561074b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076f9190610d4b565b6107bb5760405162461bcd60e51b815260206004820152601960248201527f636f6e74726f6c6c6572206e6f7420726567697374657265640000000000000060448201526064016101c5565b6001546040517f02571be3000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b0316906302571be39060240160206040518083038186803b15801561081957600080fd5b505afa15801561082d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108519190610d2e565b6001600160a01b0316146108a75760405162461bcd60e51b815260206004820152601660248201527f6c6162656c20697320616c7265616479206f776e65640000000000000000000060448201526064016101c5565b6108b18530610c52565b60025460405162d5fa2b60e81b8152600481018390526001600160a01b0386811660248301529091169063d5fa2b0090604401600060405180830381600087803b1580156108fe57600080fd5b505af1158015610912573d6000803e3d6000fd5b50506003546001600160a01b0316979650505050505050565b6000546001600160a01b031633146109855760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101c5565b80600381111561099757610997610f15565b600680547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b8360038111156109d4576109d4610f15565b021790555050565b6000546001600160a01b03163314610a365760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101c5565b610a408282610c52565b5050565b6000546001600160a01b03163314610a9e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101c5565b60025460405162d5fa2b60e81b8152600481018490526001600160a01b0383811660248301529091169063d5fa2b00906044015b600060405180830381600087803b158015610aec57600080fd5b505af1158015610b00573d6000803e3d6000fd5b505050505050565b6000546001600160a01b03163314610b625760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101c5565b6001600160a01b038116610bde5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101c5565b610be781610bea565b50565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001546005546002546040517f5ef2c7f00000000000000000000000000000000000000000000000000000000081526004810192909252602482018590526001600160a01b03848116604484015290811660648301526000608483015290911690635ef2c7f09060a401610ad2565b60008083601f840112610cd357600080fd5b50813567ffffffffffffffff811115610ceb57600080fd5b602083019150836020828501011115610d0357600080fd5b9250929050565b600060208284031215610d1c57600080fd5b8135610d2781610f2b565b9392505050565b600060208284031215610d4057600080fd5b8151610d2781610f2b565b600060208284031215610d5d57600080fd5b81518015158114610d2757600080fd5b60008060408385031215610d8057600080fd5b823591506020830135610d9281610f2b565b809150509250929050565b600080600060608486031215610db257600080fd5b833592506020840135610dc481610f2b565b91506040840135610dd481610f2b565b809150509250925092565b600080600080600060608688031215610df757600080fd5b85359450602086013567ffffffffffffffff80821115610e1657600080fd5b610e2289838a01610cc1565b90965094506040880135915080821115610e3b57600080fd5b50610e4888828901610cc1565b969995985093965092949392505050565b600060208284031215610e6b57600080fd5b5035919050565b600060208284031215610e8457600080fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b858152606060208201526000610ece606083018688610e8b565b8281036040840152610ee1818587610e8b565b98975050505050505050565b6020810160048310610f0f57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b0381168114610be757600080fdfea26469706673582212209389de2f49cbf41082d76659355860ca8d540ea599bcb889272133439746870c64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "ensAddr": "The address of the ENS registry.",
          "node": "The node that this registrar administers."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "register(bytes32,address)": {
        "params": {
          "label": "The hash of the label to register."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor."
      },
      "register(bytes32,address)": {
        "notice": "Register a name, or change the owner of an existing registration."
      }
    },
    "notice": "A registrar that allocates subdomains to the first person to claim them.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 775,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5496,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "ens",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ENS)136"
      },
      {
        "astId": 5499,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "resolver",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Resolver)387"
      },
      {
        "astId": 5501,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "reverseRegistrar",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5504,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "controllerRegistry",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IControllerRegistry)5819"
      },
      {
        "astId": 5506,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "rootNode",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 5509,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "inviteToken",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IInviteToken)5921"
      },
      {
        "astId": 5514,
        "contract": "contracts/ens/PodEnsRegistrar.sol:PodEnsRegistrar",
        "label": "state",
        "offset": 20,
        "slot": "6",
        "type": "t_enum(State)5493"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENS)136": {
        "encoding": "inplace",
        "label": "contract ENS",
        "numberOfBytes": "20"
      },
      "t_contract(IControllerRegistry)5819": {
        "encoding": "inplace",
        "label": "contract IControllerRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IInviteToken)5921": {
        "encoding": "inplace",
        "label": "contract IInviteToken",
        "numberOfBytes": "20"
      },
      "t_contract(Resolver)387": {
        "encoding": "inplace",
        "label": "contract Resolver",
        "numberOfBytes": "20"
      },
      "t_enum(State)5493": {
        "encoding": "inplace",
        "label": "enum PodEnsRegistrar.State",
        "numberOfBytes": "1"
      }
    }
  }
}