{
  "address": "0x1023cd01f90c388A2A66E631993b7b988AE742cA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxyFactoryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gnosisMasterAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "podId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "safeAddress",
          "type": "address"
        }
      ],
      "name": "CreateSafe",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FUNCTION_SIG_ENABLE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUNCTION_SIG_EXEC",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUNCTION_SIG_SETUP",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "context",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_podId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "createSafe",
      "outputs": [
        {
          "internalType": "address",
          "name": "safeAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_context",
          "type": "address"
        }
      ],
      "name": "delegateSetup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "enableModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        }
      ],
      "name": "getMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gnosisMasterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        }
      ],
      "name": "isModuleEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newSafeTeller",
          "type": "address"
        }
      ],
      "name": "migrateSafeTeller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        }
      ],
      "name": "onBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        }
      ],
      "name": "onMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        }
      ],
      "name": "onTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "updateController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a48e0f64cc502dee968258ea942cf2ccee08d694028bd1ebdc95af9c10ab451",
  "receipt": {
    "to": null,
    "from": "0x3f4e2cFE11Aa607570E0Aee7AC74fbff9633fa8E",
    "contractAddress": "0x1023cd01f90c388A2A66E631993b7b988AE742cA",
    "transactionIndex": 12,
    "gasUsed": "2525080",
    "logsBloom": "0x
    "blockHash": "0x4632a9ff5bf7bcaa4f2c427e5ae3fdca26acd3dad77e341a0c1f6231df1592ac",
    "transactionHash": "0x9a48e0f64cc502dee968258ea942cf2ccee08d694028bd1ebdc95af9c10ab451",
    "logs": [],
    "blockNumber": 9183185,
    "cumulativeGasUsed": "4747231",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
    "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"
  ],
  "solcInputHash": "f278c53c595dedb9df3ec0dcc47e5d93",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gnosisMasterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"podId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"safeAddress\",\"type\":\"address\"}],\"name\":\"CreateSafe\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FUNCTION_SIG_ENABLE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNCTION_SIG_EXEC\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNCTION_SIG_SETUP\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"context\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_podId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"createSafe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"safeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_context\",\"type\":\"address\"}],\"name\":\"delegateSetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"enableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"}],\"name\":\"getMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gnosisMasterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"}],\"name\":\"isModuleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newSafeTeller\",\"type\":\"address\"}],\"name\":\"migrateSafeTeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"}],\"name\":\"onBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"}],\"name\":\"onMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"}],\"name\":\"onTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"updateController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_gnosisMasterAddress\":\"The gnosis master address\",\"_proxyFactoryAddress\":\"The proxy factory address\"}},\"createSafe(uint256,address[],uint256)\":{\"params\":{\"_owners\":\"The  addresses to be owners of the safe\",\"_podId\":\"The id number of the pod\",\"_threshold\":\"The number of owners that are required to sign a transaciton\"},\"returns\":{\"safeAddress\":\"The address of the new safe\"}},\"migrateSafeTeller(address,address)\":{\"params\":{\"_newSafeTeller\":\"The address of the new safe teller contract\",\"safe\":\"The address of the safe\"}},\"onBurn(address,address)\":{\"params\":{\"from\":\"The address to be removed as an owner\",\"safe\":\"The address of the safe\"}},\"onMint(address,address)\":{\"params\":{\"safe\":\"The address of the safe\",\"to\":\"The account address to add as an owner\"}},\"onTransfer(address,address,address)\":{\"params\":{\"from\":\"The address being removed as an owner\",\"safe\":\"The address of the safe\",\"to\":\"The address being added as an owner\"}},\"updateController(address)\":{\"params\":{\"_controller\":\"The address to set as controller\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafeTeller.sol\":\"SafeTeller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/SafeTeller.sol\":{\"content\":\"pragma solidity 0.7.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/IGnosisSafe.sol\\\";\\nimport \\\"./interfaces/IGnosisSafeProxyFactory.sol\\\";\\n\\ncontract SafeTeller {\\n    using Address for address;\\n\\n    // mainnet: 0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B;\\n    address public proxyFactoryAddress;\\n\\n    // mainnet: 0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F;\\n    address public gnosisMasterAddress;\\n\\n    string public constant FUNCTION_SIG_SETUP =\\n        \\\"setup(address[],uint256,address,bytes,address,address,uint256,address)\\\";\\n    string public constant FUNCTION_SIG_EXEC =\\n        \\\"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)\\\";\\n\\n    string public constant FUNCTION_SIG_ENABLE = \\\"delegateSetup(address)\\\";\\n\\n    address internal constant SENTINEL = address(0x1);\\n\\n    address public controller;\\n    address public context;\\n\\n    event CreateSafe(uint256 indexed podId, address safeAddress);\\n\\n    /**\\n     * @param _proxyFactoryAddress The proxy factory address\\n     * @param _gnosisMasterAddress The gnosis master address\\n     */\\n    constructor(address _proxyFactoryAddress, address _gnosisMasterAddress) {\\n        require(\\n            _proxyFactoryAddress != address(0),\\n            \\\"Invalid proxyFactory address\\\"\\n        );\\n        require(\\n            _gnosisMasterAddress != address(0),\\n            \\\"Invalid gnosisMaster address\\\"\\n        );\\n        controller = msg.sender;\\n        proxyFactoryAddress = _proxyFactoryAddress;\\n        gnosisMasterAddress = _gnosisMasterAddress;\\n        context = address(this);\\n    }\\n\\n    /**\\n     * @param _controller The address to set as controller\\n     */\\n    function updateController(address _controller) external {\\n        require(_controller != address(0), \\\"Invalid controller address\\\");\\n        require(controller == msg.sender, \\\"!controller\\\");\\n        controller = _controller;\\n    }\\n\\n    /**\\n     * @param safe The address of the safe\\n     * @param _newSafeTeller The address of the new safe teller contract\\n     */\\n    function migrateSafeTeller(address safe, address _newSafeTeller) external {\\n        require(controller == msg.sender, \\\"!controller\\\");\\n        bytes memory enableData = abi.encodeWithSignature(\\n            \\\"enableModule(address)\\\",\\n            _newSafeTeller\\n        );\\n\\n        bool enableSuccess = IGnosisSafe(safe).execTransactionFromModule(\\n            safe,\\n            0,\\n            enableData,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(enableSuccess, \\\"Migration failed on enable\\\");\\n\\n        // find current safe teller in module array\\n        uint256 pageSize = 10;\\n        address index = SENTINEL;\\n        address prevModule = address(0);\\n\\n        while (prevModule == address(0)) {\\n            (address[] memory moduleBuffer, address next) = IGnosisSafe(safe)\\n                .getModulesPaginated(index, pageSize);\\n            require(moduleBuffer[0] != address(0), \\\"module not found\\\");\\n            index = next;\\n\\n            for (uint256 i = 0; i < moduleBuffer.length; i++) {\\n                if (moduleBuffer[i] == address(this))\\n                    prevModule = i > 0 ? moduleBuffer[i - 1] : moduleBuffer[0];\\n            }\\n        }\\n\\n        // disable current safeTeller\\n        bytes memory disableData = abi.encodeWithSignature(\\n            \\\"disableModule(address,address)\\\",\\n            prevModule,\\n            address(this)\\n        );\\n\\n        bool disableSuccess = IGnosisSafe(safe).execTransactionFromModule(\\n            safe,\\n            0,\\n            disableData,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(disableSuccess, \\\"Migration failed on disable\\\");\\n    }\\n\\n    function getMembers(address safe) external returns (address[] memory) {\\n        return IGnosisSafe(safe).getOwners();\\n    }\\n\\n    function isModuleEnabled(address safe) external view returns (bool) {\\n        return IGnosisSafe(safe).isModuleEnabled(address(this));\\n    }\\n\\n    /**\\n     * @param _podId The id number of the pod\\n     * @param _owners The  addresses to be owners of the safe\\n     * @param _threshold The number of owners that are required to sign a transaciton\\n     * @return safeAddress The address of the new safe\\n     */\\n    function createSafe(\\n        uint256 _podId,\\n        address[] memory _owners,\\n        uint256 _threshold\\n    ) external returns (address safeAddress) {\\n        require(controller == msg.sender, \\\"!controller\\\");\\n        bytes memory data = abi.encodeWithSignature(\\n            FUNCTION_SIG_ENABLE,\\n            context\\n        );\\n\\n        // encode the setup call that will be called on the new proxy safe\\n        // from the proxy factory\\n        bytes memory setupData = abi.encodeWithSignature(\\n            FUNCTION_SIG_SETUP,\\n            _owners,\\n            _threshold,\\n            this,\\n            data,\\n            address(0),\\n            address(0),\\n            uint256(0),\\n            address(0)\\n        );\\n\\n        try\\n            IGnosisSafeProxyFactory(proxyFactoryAddress).createProxy(\\n                gnosisMasterAddress,\\n                setupData\\n            )\\n        returns (address newSafeAddress) {\\n            emit CreateSafe(_podId, newSafeAddress);\\n            return newSafeAddress;\\n        } catch (bytes memory) {\\n            revert(\\\"Create Proxy With Data Failed\\\");\\n        }\\n    }\\n\\n    //TODO: could probably do all this as a delegate call\\n    /**\\n     * @param to The account address to add as an owner\\n     * @param safe The address of the safe\\n     */\\n    function onMint(address to, address safe) external {\\n        require(controller == msg.sender, \\\"!controller\\\");\\n        uint256 threshold = IGnosisSafe(safe).getThreshold();\\n\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"addOwnerWithThreshold(address,uint256)\\\",\\n            to,\\n            threshold\\n        );\\n\\n        bool success = IGnosisSafe(safe).execTransactionFromModule(\\n            safe,\\n            0,\\n            data,\\n            IGnosisSafe.Operation.Call\\n        );\\n\\n        require(success, \\\"Module Transaction Failed\\\");\\n    }\\n\\n    /**\\n     * @param from The address to be removed as an owner\\n     * @param safe The address of the safe\\n     */\\n    function onBurn(address from, address safe) external {\\n        require(controller == msg.sender, \\\"!controller\\\");\\n        uint256 threshold = IGnosisSafe(safe).getThreshold();\\n        address[] memory owners = IGnosisSafe(safe).getOwners();\\n\\n        //look for the address pointing to address from\\n        address prevFrom = address(0);\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            if (owners[i] == from) {\\n                if (i == 0) {\\n                    prevFrom = SENTINEL;\\n                } else {\\n                    prevFrom = owners[i - 1];\\n                }\\n            }\\n        }\\n        if (owners.length - 1 < threshold) threshold -= 1;\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"removeOwner(address,address,uint256)\\\",\\n            prevFrom,\\n            from,\\n            threshold\\n        );\\n\\n        bool success = IGnosisSafe(safe).execTransactionFromModule(\\n            safe,\\n            0,\\n            data,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(success, \\\"Module Transaction Failed\\\");\\n    }\\n\\n    /**\\n     * @param from The address being removed as an owner\\n     * @param to The address being added as an owner\\n     * @param safe The address of the safe\\n     */\\n    function onTransfer(\\n        address from,\\n        address to,\\n        address safe\\n    ) external {\\n        require(controller == msg.sender, \\\"!controller\\\");\\n        address[] memory owners = IGnosisSafe(safe).getOwners();\\n\\n        //look for the address pointing to address from\\n        address prevFrom;\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            if (owners[i] == from) {\\n                if (i == 0) {\\n                    prevFrom = SENTINEL;\\n                } else {\\n                    prevFrom = owners[i - 1];\\n                }\\n            }\\n        }\\n\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"swapOwner(address,address,address)\\\",\\n            prevFrom,\\n            from,\\n            to\\n        );\\n\\n        bool success = IGnosisSafe(safe).execTransactionFromModule(\\n            safe,\\n            0,\\n            data,\\n            IGnosisSafe.Operation.Call\\n        );\\n        require(success, \\\"Module Transaction Failed\\\");\\n    }\\n\\n    // TODO: move to library\\n    // Used in a delegate call to enable module add on setup\\n    function enableModule(address module) external {\\n        require(module == address(0));\\n    }\\n\\n    function delegateSetup(address _context) external {\\n        this.enableModule(_context);\\n    }\\n}\\n\",\"keccak256\":\"0xde41351ee80902077197ee379ab12a8bdd7fb742fe0b4894c769d251a5c6a6ca\"},\"contracts/interfaces/IGnosisSafe.sol\":{\"content\":\"pragma solidity 0.7.4;\\n\\ninterface IGnosisSafe {\\n\\n    enum Operation {Call, DelegateCall}\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Operation operation\\n    ) external returns (bool success);\\n\\n    /// @dev Returns array of owners.\\n    /// @return Array of Safe owners.\\n    function getOwners() external returns (address[] memory);\\n\\n    function getThreshold() external returns (uint256);\\n\\n    /// @dev Returns array of modules.\\n    /// @param start Start of the page.\\n    /// @param pageSize Maximum number of modules that should be returned.\\n    /// @return array Array of modules.\\n    /// @return next Start of the next page.\\n    function getModulesPaginated(address start, uint256 pageSize)\\n        external\\n        returns (address[] memory array, address next);\\n\\n    /// @dev Returns if an module is enabled\\n    /// @return True if the module is enabled\\n    function isModuleEnabled(address module) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfddcf9ea4fe167b6a309820720ad93545203678265ddc6a7efc6421015d31ed7\"},\"contracts/interfaces/IGnosisSafeProxyFactory.sol\":{\"content\":\"pragma solidity 0.7.4;\\n\\ninterface IGnosisSafeProxyFactory {\\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\\n    /// @param singleton Address of singleton contract.\\n    /// @param data Payload for message call sent to new proxy contract.\\n    function createProxy(address singleton, bytes memory data)\\n        external\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x4199e8d9c05fc0089897d216a21f9ed624850cc387661e197d08308bef045fb8\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405162002dbf38038062002dbf8339818101604052604081101561003557600080fd5b810190808051906020019092919080519060200190929190505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156100f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f496e76616c69642070726f7879466163746f727920616464726573730000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610196576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f496e76616c696420676e6f7369734d617374657220616464726573730000000081525060200191505060405180910390fd5b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555030600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050612b1480620002ab6000396000f3fe608060405234801561001057600080fd5b506004361061010a5760003560e01c806378544629116100a2578063bf556d5f11610071578063bf556d5f146105a7578063cc2f5d701461060b578063d0496d6a14610701578063e5d84be714610735578063f77c4791146107995761010a565b80637854462914610423578063827be3cc146104bc578063b06a41201461053f578063be5405d2146105735761010a565b80634a9b5db7116100de5780634a9b5db7146102b4578063610b59251461033757806374d4f6d01461037b578063753883b0146103bf5761010a565b8062fa93f11461010f57806306cb5b661461019357806326a13d30146101d75780632d9ad53d1461025a575b600080fd5b6101916004803603606081101561012557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107cd565b005b6101d5600480360360208110156101a957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cd6565b005b6101df610e80565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561021f578082015181840152602081019050610204565b50505050905090810190601f16801561024c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61029c6004803603602081101561027057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610eb9565b60405180821515815260200191505060405180910390f35b6102bc610f64565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102fc5780820151818401526020810190506102e1565b50505050905090810190601f1680156103295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103796004803603602081101561034d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f80565b005b6103bd6004803603602081101561039157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fbc565b005b610421600480360360408110156103d557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611040565b005b6104656004803603602081101561043957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118c4565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156104a857808201518184015260208101905061048d565b505050509050019250505060405180910390f35b6104c46119ea565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105045780820151818401526020810190506104e9565b50505050905090810190601f1680156105315780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610547611a06565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61057b611a2c565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610609600480360360408110156105bd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a50565b005b6106d56004803603606081101561062157600080fd5b81019080803590602001909291908035906020019064010000000081111561064857600080fd5b82018360208201111561065a57600080fd5b8035906020019184602083028401116401000000008311171561067c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050611fd9565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61070961264c565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6107976004803603604081101561074b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612672565b005b6107a1612a18565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f21636f6e74726f6c6c657200000000000000000000000000000000000000000081525060200191505060405180910390fd5b60608173ffffffffffffffffffffffffffffffffffffffff1663a0e67e2b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156108da57600080fd5b505af11580156108ee573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561091857600080fd5b810190808051604051939291908464010000000082111561093857600080fd5b8382019150602082018581111561094e57600080fd5b825186602082028301116401000000008211171561096b57600080fd5b8083526020830192505050908051906020019060200280838360005b838110156109a2578082015181840152602081019050610987565b505050509050016040525050509050600080600090505b8251811015610a43578573ffffffffffffffffffffffffffffffffffffffff168382815181106109e557fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610a36576000811415610a1b5760019150610a35565b826001820381518110610a2a57fe5b602002602001015191505b5b80806001019150506109b9565b506060818686604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200193505050506040516020818303038152906040527fe318b52b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008473ffffffffffffffffffffffffffffffffffffffff1663468721a78660008560006040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200180602001836001811115610b9157fe5b8152602001828103825284818151815260200191508051906020019080838360005b83811015610bce578082015181840152602081019050610bb3565b50505050905090810190601f168015610bfb5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610c1d57600080fd5b505af1158015610c31573d6000803e3d6000fd5b505050506040513d6020811015610c4757600080fd5b8101908080519060200190929190505050905080610ccd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4d6f64756c65205472616e73616374696f6e204661696c65640000000000000081525060200191505060405180910390fd5b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f496e76616c696420636f6e74726f6c6c6572206164647265737300000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f21636f6e74726f6c6c657200000000000000000000000000000000000000000081525060200191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6040518060400160405280601681526020017f64656c656761746553657475702861646472657373290000000000000000000081525081565b60008173ffffffffffffffffffffffffffffffffffffffff16632d9ad53d306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610f2257600080fd5b505afa158015610f36573d6000803e3d6000fd5b505050506040513d6020811015610f4c57600080fd5b81019080805190602001909291905050509050919050565b6040518060800160405280605a8152602001612a3f605a913981565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610fb957600080fd5b50565b3073ffffffffffffffffffffffffffffffffffffffff1663610b5925826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561102557600080fd5b505af1158015611039573d6000803e3d6000fd5b5050505050565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611103576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f21636f6e74726f6c6c657200000000000000000000000000000000000000000081525060200191505060405180910390fd5b606081604051602401808273ffffffffffffffffffffffffffffffffffffffff1681526020019150506040516020818303038152906040527f610b5925000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008373ffffffffffffffffffffffffffffffffffffffff1663468721a78560008560006040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018060200183600181111561121457fe5b8152602001828103825284818151815260200191508051906020019080838360005b83811015611251578082015181840152602081019050611236565b50505050905090810190601f16801561127e5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156112a057600080fd5b505af11580156112b4573d6000803e3d6000fd5b505050506040513d60208110156112ca57600080fd5b8101908080519060200190929190505050905080611350576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4d6967726174696f6e206661696c6564206f6e20656e61626c6500000000000081525060200191505060405180910390fd5b6000600a905060006001905060005b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561164e57606060008873ffffffffffffffffffffffffffffffffffffffff1663cc2f845285876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561140957600080fd5b505af115801561141d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250604081101561144757600080fd5b810190808051604051939291908464010000000082111561146757600080fd5b8382019150602082018581111561147d57600080fd5b825186602082028301116401000000008211171561149a57600080fd5b8083526020830192505050908051906020019060200280838360005b838110156114d15780820151818401526020810190506114b6565b505050509050016040526020018051906020019092919050505091509150600073ffffffffffffffffffffffffffffffffffffffff168260008151811061151457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156115a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f6d6f64756c65206e6f7420666f756e640000000000000000000000000000000081525060200191505060405180910390fd5b80935060005b8251811015611646573073ffffffffffffffffffffffffffffffffffffffff168382815181106115d857fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415611639576000811161161e578260008151811061161157fe5b6020026020010151611636565b82600182038151811061162d57fe5b60200260200101515b93505b80806001019150506115ac565b50505061135f565b60608130604051602401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff168152602001925050506040516020818303038152906040527fe009cfde000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008873ffffffffffffffffffffffffffffffffffffffff1663468721a78a60008560006040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018060200183600181111561177d57fe5b8152602001828103825284818151815260200191508051906020019080838360005b838110156117ba57808201518184015260208101905061179f565b50505050905090810190601f1680156117e75780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561180957600080fd5b505af115801561181d573d6000803e3d6000fd5b505050506040513d602081101561183357600080fd5b81019080805190602001909291905050509050806118b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d6967726174696f6e206661696c6564206f6e2064697361626c65000000000081525060200191505060405180910390fd5b505050505050505050565b60608173ffffffffffffffffffffffffffffffffffffffff1663a0e67e2b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561190e57600080fd5b505af1158015611922573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561194c57600080fd5b810190808051604051939291908464010000000082111561196c57600080fd5b8382019150602082018581111561198257600080fd5b825186602082028301116401000000008211171561199f57600080fd5b8083526020830192505050908051906020019060200280838360005b838110156119d65780820151818401526020810190506119bb565b505050509050016040525050509050919050565b604051806080016040528060468152602001612a996046913981565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611b13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f21636f6e74726f6c6c657200000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff1663e75235b86040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611b5d57600080fd5b505af1158015611b71573d6000803e3d6000fd5b505050506040513d6020811015611b8757600080fd5b8101908080519060200190929190505050905060608273ffffffffffffffffffffffffffffffffffffffff1663a0e67e2b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611be457600080fd5b505af1158015611bf8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611c2257600080fd5b8101908080516040519392919084640100000000821115611c4257600080fd5b83820191506020820185811115611c5857600080fd5b8251866020820283011164010000000082111715611c7557600080fd5b8083526020830192505050908051906020019060200280838360005b83811015611cac578082015181840152602081019050611c91565b5050505090500160405250505090506000805b8251811015611d49578573ffffffffffffffffffffffffffffffffffffffff16838281518110611ceb57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415611d3c576000811415611d215760019150611d3b565b826001820381518110611d3057fe5b602002602001015191505b5b8080600101915050611cbf565b508260018351031015611d5d576001830392505b6060818685604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200193505050506040516020818303038152906040527ff8dc5dd9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008573ffffffffffffffffffffffffffffffffffffffff1663468721a78760008560006040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200180602001836001811115611e9457fe5b8152602001828103825284818151815260200191508051906020019080838360005b83811015611ed1578082015181840152602081019050611eb6565b50505050905090810190601f168015611efe5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015611f2057600080fd5b505af1158015611f34573d6000803e3d6000fd5b505050506040513d6020811015611f4a57600080fd5b8101908080519060200190929190505050905080611fd0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4d6f64756c65205472616e73616374696f6e204661696c65640000000000000081525060200191505060405180910390fd5b50505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461209e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f21636f6e74726f6c6c657200000000000000000000000000000000000000000081525060200191505060405180910390fd5b60606040518060400160405280601681526020017f64656c6567617465536574757028616464726573732900000000000000000000815250600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051602401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050604051602081830303815290604052906040518082805190602001908083835b60208310612162578051825260208201915060208101905060208303925061213f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506060604051806080016040528060468152602001612a99604691398585308560008060008060405160240180806020018981526020018873ffffffffffffffffffffffffffffffffffffffff168152602001806020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183810383528b818151815260200191508051906020019060200280838360005b838110156122c95780820151818401526020810190506122ae565b50505050905001838103825288818151815260200191508051906020019080838360005b838110156123085780820151818401526020810190506122ed565b50505050905090810190601f1680156123355780820380516001836020036101000a031916815260200191505b509a5050505050505050505050604051602081830303815290604052906040518082805190602001908083835b602083106123855780518252602082019150602081019050602083039250612362565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166361b69abd600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156124cc5780820151818401526020810190506124b1565b50505050905090810190601f1680156124f95780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561251957600080fd5b505af192505050801561254d57506040513d602081101561253957600080fd5b810190808051906020019092919050505060015b6125f1573d806000811461257d576040519150601f19603f3d011682016040523d82523d6000602084013e612582565b606091505b506040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4372656174652050726f787920576974682044617461204661696c656400000081525060200191505060405180910390fd5b867f3a2b6a6c6dd2e186fa5889eb2b5f7338ca9c02c3801c54dc77a80a13b389035382604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a28093505050509392505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f21636f6e74726f6c6c657200000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff1663e75235b86040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561277f57600080fd5b505af1158015612793573d6000803e3d6000fd5b505050506040513d60208110156127a957600080fd5b8101908080519060200190929190505050905060608382604051602401808373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506040516020818303038152906040527f0d582f13000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008373ffffffffffffffffffffffffffffffffffffffff1663468721a78560008560006040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018360018111156128d557fe5b8152602001828103825284818151815260200191508051906020019080838360005b838110156129125780820151818401526020810190506128f7565b50505050905090810190601f16801561293f5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561296157600080fd5b505af1158015612975573d6000803e3d6000fd5b505050506040513d602081101561298b57600080fd5b8101908080519060200190929190505050905080612a11576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4d6f64756c65205472616e73616374696f6e204661696c65640000000000000081525060200191505060405180910390fd5b5050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fe657865635472616e73616374696f6e28616464726573732c75696e743235362c62797465732c75696e74382c75696e743235362c75696e743235362c75696e743235362c616464726573732c616464726573732c627974657329736574757028616464726573735b5d2c75696e743235362c616464726573732c62797465732c616464726573732c616464726573732c75696e743235362c6164647265737329a26469706673582212201aaab03a5feebb5dce36f2981d75665b712057f67b523d516fc269255f02d22a64736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010a5760003560e01c806378544629116100a2578063bf556d5f11610071578063bf556d5f146105a7578063cc2f5d701461060b578063d0496d6a14610701578063e5d84be714610735578063f77c4791146107995761010a565b80637854462914610423578063827be3cc146104bc578063b06a41201461053f578063be5405d2146105735761010a565b80634a9b5db7116100de5780634a9b5db7146102b4578063610b59251461033757806374d4f6d01461037b578063753883b0146103bf5761010a565b8062fa93f11461010f57806306cb5b661461019357806326a13d30146101d75780632d9ad53d1461025a575b600080fd5b6101916004803603606081101561012557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107cd565b005b6101d5600480360360208110156101a957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cd6565b005b6101df610e80565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561021f578082015181840152602081019050610204565b50505050905090810190601f16801561024c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61029c6004803603602081101561027057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610eb9565b60405180821515815260200191505060405180910390f35b6102bc610f64565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102fc5780820151818401526020810190506102e1565b50505050905090810190601f1680156103295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103796004803603602081101561034d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f80565b005b6103bd6004803603602081101561039157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fbc565b005b610421600480360360408110156103d557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611040565b005b6104656004803603602081101561043957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118c4565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156104a857808201518184015260208101905061048d565b505050509050019250505060405180910390f35b6104c46119ea565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105045780820151818401526020810190506104e9565b50505050905090810190601f1680156105315780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610547611a06565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61057b611a2c565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610609600480360360408110156105bd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a50565b005b6106d56004803603606081101561062157600080fd5b81019080803590602001909291908035906020019064010000000081111561064857600080fd5b82018360208201111561065a57600080fd5b8035906020019184602083028401116401000000008311171561067c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050611fd9565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61070961264c565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6107976004803603604081101561074b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612672565b005b6107a1612a18565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f21636f6e74726f6c6c657200000000000000000000000000000000000000000081525060200191505060405180910390fd5b60608173ffffffffffffffffffffffffffffffffffffffff1663a0e67e2b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156108da57600080fd5b505af11580156108ee573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561091857600080fd5b810190808051604051939291908464010000000082111561093857600080fd5b8382019150602082018581111561094e57600080fd5b825186602082028301116401000000008211171561096b57600080fd5b8083526020830192505050908051906020019060200280838360005b838110156109a2578082015181840152602081019050610987565b505050509050016040525050509050600080600090505b8251811015610a43578573ffffffffffffffffffffffffffffffffffffffff168382815181106109e557fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610a36576000811415610a1b5760019150610a35565b826001820381518110610a2a57fe5b602002602001015191505b5b80806001019150506109b9565b506060818686604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200193505050506040516020818303038152906040527fe318b52b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008473ffffffffffffffffffffffffffffffffffffffff1663468721a78660008560006040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200180602001836001811115610b9157fe5b8152602001828103825284818151815260200191508051906020019080838360005b83811015610bce578082015181840152602081019050610bb3565b50505050905090810190601f168015610bfb5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610c1d57600080fd5b505af1158015610c31573d6000803e3d6000fd5b505050506040513d6020811015610c4757600080fd5b8101908080519060200190929190505050905080610ccd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4d6f64756c65205472616e73616374696f6e204661696c65640000000000000081525060200191505060405180910390fd5b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f496e76616c696420636f6e74726f6c6c6572206164647265737300000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f21636f6e74726f6c6c657200000000000000000000000000000000000000000081525060200191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6040518060400160405280601681526020017f64656c656761746553657475702861646472657373290000000000000000000081525081565b60008173ffffffffffffffffffffffffffffffffffffffff16632d9ad53d306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610f2257600080fd5b505afa158015610f36573d6000803e3d6000fd5b505050506040513d6020811015610f4c57600080fd5b81019080805190602001909291905050509050919050565b6040518060800160405280605a8152602001612a3f605a913981565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610fb957600080fd5b50565b3073ffffffffffffffffffffffffffffffffffffffff1663610b5925826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561102557600080fd5b505af1158015611039573d6000803e3d6000fd5b5050505050565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611103576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f21636f6e74726f6c6c657200000000000000000000000000000000000000000081525060200191505060405180910390fd5b606081604051602401808273ffffffffffffffffffffffffffffffffffffffff1681526020019150506040516020818303038152906040527f610b5925000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008373ffffffffffffffffffffffffffffffffffffffff1663468721a78560008560006040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018060200183600181111561121457fe5b8152602001828103825284818151815260200191508051906020019080838360005b83811015611251578082015181840152602081019050611236565b50505050905090810190601f16801561127e5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156112a057600080fd5b505af11580156112b4573d6000803e3d6000fd5b505050506040513d60208110156112ca57600080fd5b8101908080519060200190929190505050905080611350576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4d6967726174696f6e206661696c6564206f6e20656e61626c6500000000000081525060200191505060405180910390fd5b6000600a905060006001905060005b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561164e57606060008873ffffffffffffffffffffffffffffffffffffffff1663cc2f845285876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561140957600080fd5b505af115801561141d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250604081101561144757600080fd5b810190808051604051939291908464010000000082111561146757600080fd5b8382019150602082018581111561147d57600080fd5b825186602082028301116401000000008211171561149a57600080fd5b8083526020830192505050908051906020019060200280838360005b838110156114d15780820151818401526020810190506114b6565b505050509050016040526020018051906020019092919050505091509150600073ffffffffffffffffffffffffffffffffffffffff168260008151811061151457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156115a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f6d6f64756c65206e6f7420666f756e640000000000000000000000000000000081525060200191505060405180910390fd5b80935060005b8251811015611646573073ffffffffffffffffffffffffffffffffffffffff168382815181106115d857fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415611639576000811161161e578260008151811061161157fe5b6020026020010151611636565b82600182038151811061162d57fe5b60200260200101515b93505b80806001019150506115ac565b50505061135f565b60608130604051602401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff168152602001925050506040516020818303038152906040527fe009cfde000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008873ffffffffffffffffffffffffffffffffffffffff1663468721a78a60008560006040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018060200183600181111561177d57fe5b8152602001828103825284818151815260200191508051906020019080838360005b838110156117ba57808201518184015260208101905061179f565b50505050905090810190601f1680156117e75780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561180957600080fd5b505af115801561181d573d6000803e3d6000fd5b505050506040513d602081101561183357600080fd5b81019080805190602001909291905050509050806118b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d6967726174696f6e206661696c6564206f6e2064697361626c65000000000081525060200191505060405180910390fd5b505050505050505050565b60608173ffffffffffffffffffffffffffffffffffffffff1663a0e67e2b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561190e57600080fd5b505af1158015611922573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561194c57600080fd5b810190808051604051939291908464010000000082111561196c57600080fd5b8382019150602082018581111561198257600080fd5b825186602082028301116401000000008211171561199f57600080fd5b8083526020830192505050908051906020019060200280838360005b838110156119d65780820151818401526020810190506119bb565b505050509050016040525050509050919050565b604051806080016040528060468152602001612a996046913981565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611b13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f21636f6e74726f6c6c657200000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff1663e75235b86040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611b5d57600080fd5b505af1158015611b71573d6000803e3d6000fd5b505050506040513d6020811015611b8757600080fd5b8101908080519060200190929190505050905060608273ffffffffffffffffffffffffffffffffffffffff1663a0e67e2b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611be457600080fd5b505af1158015611bf8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611c2257600080fd5b8101908080516040519392919084640100000000821115611c4257600080fd5b83820191506020820185811115611c5857600080fd5b8251866020820283011164010000000082111715611c7557600080fd5b8083526020830192505050908051906020019060200280838360005b83811015611cac578082015181840152602081019050611c91565b5050505090500160405250505090506000805b8251811015611d49578573ffffffffffffffffffffffffffffffffffffffff16838281518110611ceb57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415611d3c576000811415611d215760019150611d3b565b826001820381518110611d3057fe5b602002602001015191505b5b8080600101915050611cbf565b508260018351031015611d5d576001830392505b6060818685604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200193505050506040516020818303038152906040527ff8dc5dd9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008573ffffffffffffffffffffffffffffffffffffffff1663468721a78760008560006040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200180602001836001811115611e9457fe5b8152602001828103825284818151815260200191508051906020019080838360005b83811015611ed1578082015181840152602081019050611eb6565b50505050905090810190601f168015611efe5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015611f2057600080fd5b505af1158015611f34573d6000803e3d6000fd5b505050506040513d6020811015611f4a57600080fd5b8101908080519060200190929190505050905080611fd0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4d6f64756c65205472616e73616374696f6e204661696c65640000000000000081525060200191505060405180910390fd5b50505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461209e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f21636f6e74726f6c6c657200000000000000000000000000000000000000000081525060200191505060405180910390fd5b60606040518060400160405280601681526020017f64656c6567617465536574757028616464726573732900000000000000000000815250600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051602401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050604051602081830303815290604052906040518082805190602001908083835b60208310612162578051825260208201915060208101905060208303925061213f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506060604051806080016040528060468152602001612a99604691398585308560008060008060405160240180806020018981526020018873ffffffffffffffffffffffffffffffffffffffff168152602001806020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183810383528b818151815260200191508051906020019060200280838360005b838110156122c95780820151818401526020810190506122ae565b50505050905001838103825288818151815260200191508051906020019080838360005b838110156123085780820151818401526020810190506122ed565b50505050905090810190601f1680156123355780820380516001836020036101000a031916815260200191505b509a5050505050505050505050604051602081830303815290604052906040518082805190602001908083835b602083106123855780518252602082019150602081019050602083039250612362565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166361b69abd600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156124cc5780820151818401526020810190506124b1565b50505050905090810190601f1680156124f95780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561251957600080fd5b505af192505050801561254d57506040513d602081101561253957600080fd5b810190808051906020019092919050505060015b6125f1573d806000811461257d576040519150601f19603f3d011682016040523d82523d6000602084013e612582565b606091505b506040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4372656174652050726f787920576974682044617461204661696c656400000081525060200191505060405180910390fd5b867f3a2b6a6c6dd2e186fa5889eb2b5f7338ca9c02c3801c54dc77a80a13b389035382604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a28093505050509392505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f21636f6e74726f6c6c657200000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff1663e75235b86040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561277f57600080fd5b505af1158015612793573d6000803e3d6000fd5b505050506040513d60208110156127a957600080fd5b8101908080519060200190929190505050905060608382604051602401808373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506040516020818303038152906040527f0d582f13000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008373ffffffffffffffffffffffffffffffffffffffff1663468721a78560008560006040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018360018111156128d557fe5b8152602001828103825284818151815260200191508051906020019080838360005b838110156129125780820151818401526020810190506128f7565b50505050905090810190601f16801561293f5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561296157600080fd5b505af1158015612975573d6000803e3d6000fd5b505050506040513d602081101561298b57600080fd5b8101908080519060200190929190505050905080612a11576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4d6f64756c65205472616e73616374696f6e204661696c65640000000000000081525060200191505060405180910390fd5b5050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fe657865635472616e73616374696f6e28616464726573732c75696e743235362c62797465732c75696e74382c75696e743235362c75696e743235362c75696e743235362c616464726573732c616464726573732c627974657329736574757028616464726573735b5d2c75696e743235362c616464726573732c62797465732c616464726573732c616464726573732c75696e743235362c6164647265737329a26469706673582212201aaab03a5feebb5dce36f2981d75665b712057f67b523d516fc269255f02d22a64736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_gnosisMasterAddress": "The gnosis master address",
          "_proxyFactoryAddress": "The proxy factory address"
        }
      },
      "createSafe(uint256,address[],uint256)": {
        "params": {
          "_owners": "The  addresses to be owners of the safe",
          "_podId": "The id number of the pod",
          "_threshold": "The number of owners that are required to sign a transaciton"
        },
        "returns": {
          "safeAddress": "The address of the new safe"
        }
      },
      "migrateSafeTeller(address,address)": {
        "params": {
          "_newSafeTeller": "The address of the new safe teller contract",
          "safe": "The address of the safe"
        }
      },
      "onBurn(address,address)": {
        "params": {
          "from": "The address to be removed as an owner",
          "safe": "The address of the safe"
        }
      },
      "onMint(address,address)": {
        "params": {
          "safe": "The address of the safe",
          "to": "The account address to add as an owner"
        }
      },
      "onTransfer(address,address,address)": {
        "params": {
          "from": "The address being removed as an owner",
          "safe": "The address of the safe",
          "to": "The address being added as an owner"
        }
      },
      "updateController(address)": {
        "params": {
          "_controller": "The address to set as controller"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3613,
        "contract": "contracts/SafeTeller.sol:SafeTeller",
        "label": "proxyFactoryAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3615,
        "contract": "contracts/SafeTeller.sol:SafeTeller",
        "label": "gnosisMasterAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3632,
        "contract": "contracts/SafeTeller.sol:SafeTeller",
        "label": "controller",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3634,
        "contract": "contracts/SafeTeller.sol:SafeTeller",
        "label": "context",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}